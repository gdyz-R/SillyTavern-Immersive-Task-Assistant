{"1": {"title": "Two Sum", "difficulty": "Easy", "description": "Given an array of integers `nums` and an integer `target`, return _indices of the two numbers such that they add up to `target`_.\n\nYou may assume that each input would have **_exactly_ one solution**, and you may not use the _same_ element twice.\n\nYou can return the answer in any order.\n\n**Example 1:**\n\n**Input:** nums = \\[2,7,11,15\\], target = 9\n**Output:** \\[0,1\\]\n**Explanation:** Because nums\\[0\\] + nums\\[1\\] == 9, we return \\[0, 1\\].\n\n**Example 2:**\n\n**Input:** nums = \\[3,2,4\\], target = 6\n**Output:** \\[1,2\\]\n\n**Example 3:**\n\n**Input:** nums = \\[3,3\\], target = 6\n**Output:** \\[0,1\\]\n\n**Constraints:**\n\n*   `2 <= nums.length <= 104`\n*   `-109 <= nums[i] <= 109`\n*   `-109 <= target <= 109`\n*   **Only one valid answer exists.**\n\n**Follow-up:** Can you come up with an algorithm that is less than `O(n2)` time complexity?"}}
{"9": {"title": "Palindrome Number", "difficulty": "Easy", "description": "Given an integer `x`, return `true` _if_ `x` _is a_ _**palindrome**__, and_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** x = 121\n**Output:** true\n**Explanation:** 121 reads as 121 from left to right and from right to left.\n\n**Example 2:**\n\n**Input:** x = -121\n**Output:** false\n**Explanation:** From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n\n**Example 3:**\n\n**Input:** x = 10\n**Output:** false\n**Explanation:** Reads 01 from right to left. Therefore it is not a palindrome.\n\n**Constraints:**\n\n*   `-231 <= x <= 231 - 1`\n\n**Follow up:** Could you solve it without converting the integer to a string?"}}
{"13": {"title": "Roman to Integer", "difficulty": "Easy", "description": "Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.\n\n**Symbol**       **Value**\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n\nFor example, `2` is written as `II` in Roman numeral, just two ones added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:\n\n*   `I` can be placed before `V` (5) and `X` (10) to make 4 and 9.\n*   `X` can be placed before `L` (50) and `C` (100) to make 40 and 90.\n*   `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.\n\n**Example 1:**\n\n**Input:** s =  \"III \"\n**Output:** 3\n**Explanation:** III = 3.\n\n**Example 2:**\n\n**Input:** s =  \"LVIII \"\n**Output:** 58\n**Explanation:** L = 50, V= 5, III = 3.\n\n**Example 3:**\n\n**Input:** s =  \"MCMXCIV \"\n**Output:** 1994\n**Explanation:** M = 1000, CM = 900, XC = 90 and IV = 4.\n\n**Constraints:**\n\n*   `1 <= s.length <= 15`\n*   `s` contains only the characters `('I', 'V', 'X', 'L', 'C', 'D', 'M')`.\n*   It is **guaranteed** that `s` is a valid roman numeral in the range `[1, 3999]`."}}
{"14": {"title": "Longest Common Prefix", "difficulty": "Easy", "description": "Write a function to find the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string `\" \"`.\n\n**Example 1:**\n\n**Input:** strs = \\[ \"flower \", \"flow \", \"flight \"\\]\n**Output:**  \"fl \"\n\n**Example 2:**\n\n**Input:** strs = \\[ \"dog \", \"racecar \", \"car \"\\]\n**Output:**  \" \"\n**Explanation:** There is no common prefix among the input strings.\n\n**Constraints:**\n\n*   `1 <= strs.length <= 200`\n*   `0 <= strs[i].length <= 200`\n*   `strs[i]` consists of only lowercase English letters."}}
{"20": {"title": "Valid Parentheses", "difficulty": "Easy", "description": "Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.\n\nAn input string is valid if:\n\n1.  Open brackets must be closed by the same type of brackets.\n2.  Open brackets must be closed in the correct order.\n3.  Every close bracket has a corresponding open bracket of the same type.\n\n**Example 1:**\n\n**Input:** s =  \"() \"\n**Output:** true\n\n**Example 2:**\n\n**Input:** s =  \"()\\[\\]{} \"\n**Output:** true\n\n**Example 3:**\n\n**Input:** s =  \"(\\] \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s` consists of parentheses only `'()[]{}'`."}}
{"21": {"title": "Merge Two Sorted Lists", "difficulty": "Easy", "description": "You are given the heads of two sorted linked lists `list1` and `list2`.\n\nMerge the two lists in a one **sorted** list. The list should be made by splicing together the nodes of the first two lists.\n\nReturn _the head of the merged linked list_.\n\n**Example 1:**\n\n**Input:** list1 = \\[1,2,4\\], list2 = \\[1,3,4\\]\n**Output:** \\[1,1,2,3,4,4\\]\n\n**Example 2:**\n\n**Input:** list1 = \\[\\], list2 = \\[\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** list1 = \\[\\], list2 = \\[0\\]\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   The number of nodes in both lists is in the range `[0, 50]`.\n*   `-100 <= Node.val <= 100`\n*   Both `list1` and `list2` are sorted in **non-decreasing** order."}}
{"26": {"title": "Remove Duplicates from Sorted Array", "difficulty": "Easy", "description": "Given an integer array `nums` sorted in **non-decreasing order**, remove the duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears only **once**. The **relative order** of the elements should be kept the **same**. Then return _the number of unique elements in_ `nums`.\n\nConsider the number of unique elements of `nums` be `k`, to get accepted, you need to do the following things:\n\n*   Change the array `nums` such that the first `k` elements of `nums` contain the unique elements in the order they were present in `nums` initially. The remaining elements of `nums` are not important as well as the size of `nums`.\n*   Return `k`.\n\n**Custom Judge:**\n\nThe judge will test your solution with the following code:\n\nint\\[\\] nums = \\[...\\]; // Input array\nint\\[\\] expectedNums = \\[...\\]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\n    assert nums\\[i\\] == expectedNums\\[i\\];\n}\n\nIf all assertions pass, then your solution will be **accepted**.\n\n**Example 1:**\n\n**Input:** nums = \\[1,1,2\\]\n**Output:** 2, nums = \\[1,2,\\_\\]\n**Explanation:** Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n**Example 2:**\n\n**Input:** nums = \\[0,0,1,1,1,2,2,3,3,4\\]\n**Output:** 5, nums = \\[0,1,2,3,4,\\_,\\_,\\_,\\_,\\_\\]\n**Explanation:** Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n**Constraints:**\n\n*   `1 <= nums.length <= 3 * 104`\n*   `-100 <= nums[i] <= 100`\n*   `nums` is sorted in **non-decreasing** order."}}
{"27": {"title": "Remove Element", "difficulty": "Easy", "description": "Given an integer array `nums` and an integer `val`, remove all occurrences of `val` in `nums` [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm). The order of the elements may be changed. Then return _the number of elements in_ `nums` _which are not equal to_ `val`.\n\nConsider the number of elements in `nums` which are not equal to `val` be `k`, to get accepted, you need to do the following things:\n\n*   Change the array `nums` such that the first `k` elements of `nums` contain the elements which are not equal to `val`. The remaining elements of `nums` are not important as well as the size of `nums`.\n*   Return `k`.\n\n**Custom Judge:**\n\nThe judge will test your solution with the following code:\n\nint\\[\\] nums = \\[...\\]; // Input array\nint val = ...; // Value to remove\nint\\[\\] expectedNums = \\[...\\]; // The expected answer with correct length.\n                            // It is sorted with no values equaling val.\n\nint k = removeElement(nums, val); // Calls your implementation\n\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i < actualLength; i++) {\n    assert nums\\[i\\] == expectedNums\\[i\\];\n}\n\nIf all assertions pass, then your solution will be **accepted**.\n\n**Example 1:**\n\n**Input:** nums = \\[3,2,2,3\\], val = 3\n**Output:** 2, nums = \\[2,2,\\_,\\_\\]\n**Explanation:** Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n**Example 2:**\n\n**Input:** nums = \\[0,1,2,2,3,0,4,2\\], val = 2\n**Output:** 5, nums = \\[0,1,4,0,3,\\_,\\_,\\_\\]\n**Explanation:** Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n\n**Constraints:**\n\n*   `0 <= nums.length <= 100`\n*   `0 <= nums[i] <= 50`\n*   `0 <= val <= 100`"}}
{"28": {"title": "Find the Index of the First Occurrence in a String", "difficulty": "Easy", "description": "Given two strings `needle` and `haystack`, return the index of the first occurrence of `needle` in `haystack`, or `-1` if `needle` is not part of `haystack`.\n\n**Example 1:**\n\n**Input:** haystack =  \"sadbutsad \", needle =  \"sad \"\n**Output:** 0\n**Explanation:**  \"sad \" occurs at index 0 and 6.\nThe first occurrence is at index 0, so we return 0.\n\n**Example 2:**\n\n**Input:** haystack =  \"leetcode \", needle =  \"leeto \"\n**Output:** -1\n**Explanation:**  \"leeto \" did not occur in  \"leetcode \", so we return -1.\n\n**Constraints:**\n\n*   `1 <= haystack.length, needle.length <= 104`\n*   `haystack` and `needle` consist of only lowercase English characters."}}
{"35": {"title": "Search Insert Position", "difficulty": "Easy", "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n**Example 1:**\n\n**Input:** nums = \\[1,3,5,6\\], target = 5\n**Output:** 2\n\n**Example 2:**\n\n**Input:** nums = \\[1,3,5,6\\], target = 2\n**Output:** 1\n\n**Example 3:**\n\n**Input:** nums = \\[1,3,5,6\\], target = 7\n**Output:** 4\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-104 <= nums[i] <= 104`\n*   `nums` contains **distinct** values sorted in **ascending** order.\n*   `-104 <= target <= 104`"}}
{"58": {"title": "Length of Last Word", "difficulty": "Easy", "description": "Given a string `s` consisting of words and spaces, return _the length of the **last** word in the string._\n\nA **word** is a maximal substring consisting of non-space characters only.\n\n**Example 1:**\n\n**Input:** s =  \"Hello World \"\n**Output:** 5\n**Explanation:** The last word is  \"World \" with length 5.\n\n**Example 2:**\n\n**Input:** s =  \"   fly me   to   the moon   \"\n**Output:** 4\n**Explanation:** The last word is  \"moon \" with length 4.\n\n**Example 3:**\n\n**Input:** s =  \"luffy is still joyboy \"\n**Output:** 6\n**Explanation:** The last word is  \"joyboy \" with length 6.\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s` consists of only English letters and spaces `' '`.\n*   There will be at least one word in `s`."}}
{"66": {"title": "Plus One", "difficulty": "Easy", "description": "You are given a **large integer** represented as an integer array `digits`, where each `digits[i]` is the `ith` digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading `0`'s.\n\nIncrement the large integer by one and return _the resulting array of digits_.\n\n**Example 1:**\n\n**Input:** digits = \\[1,2,3\\]\n**Output:** \\[1,2,4\\]\n**Explanation:** The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be \\[1,2,4\\].\n\n**Example 2:**\n\n**Input:** digits = \\[4,3,2,1\\]\n**Output:** \\[4,3,2,2\\]\n**Explanation:** The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be \\[4,3,2,2\\].\n\n**Example 3:**\n\n**Input:** digits = \\[9\\]\n**Output:** \\[1,0\\]\n**Explanation:** The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be \\[1,0\\].\n\n**Constraints:**\n\n*   `1 <= digits.length <= 100`\n*   `0 <= digits[i] <= 9`\n*   `digits` does not contain any leading `0`'s."}}
{"67": {"title": "Add Binary", "difficulty": "Easy", "description": "Given two binary strings `a` and `b`, return _their sum as a binary string_.\n\n**Example 1:**\n\n**Input:** a = \"11\", b = \"1\"\n**Output:** \"100\"\n\n**Example 2:**\n\n**Input:** a = \"1010\", b = \"1011\"\n**Output:** \"10101\"\n\n**Constraints:**\n\n*   `1 <= a.length, b.length <= 104`\n*   `a` and `b` consist only of `'0'` or `'1'` characters.\n*   Each string does not contain leading zeros except for the zero itself."}}
{"69": {"title": "Sqrt(x)", "difficulty": "Easy", "description": "Given a non-negative integer `x`, return _the square root of_ `x` _rounded down to the nearest integer_. The returned integer should be **non-negative** as well.\n\nYou **must not use** any built-in exponent function or operator.\n\n*   For example, do not use `pow(x, 0.5)` in c++ or `x ** 0.5` in python.\n\n**Example 1:**\n\n**Input:** x = 4\n**Output:** 2\n**Explanation:** The square root of 4 is 2, so we return 2.\n\n**Example 2:**\n\n**Input:** x = 8\n**Output:** 2\n**Explanation:** The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.\n\n**Constraints:**\n\n*   `0 <= x <= 231 - 1`"}}
{"70": {"title": "Climbing Stairs", "difficulty": "Easy", "description": "You are climbing a staircase. It takes `n` steps to reach the top.\n\nEach time you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top?\n\n**Example 1:**\n\n**Input:** n = 2\n**Output:** 2\n**Explanation:** There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps\n\n**Example 2:**\n\n**Input:** n = 3\n**Output:** 3\n**Explanation:** There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step\n\n**Constraints:**\n\n*   `1 <= n <= 45`"}}
{"83": {"title": "Remove Duplicates from Sorted List", "difficulty": "Easy", "description": "Given the `head` of a sorted linked list, _delete all duplicates such that each element appears only once_. Return _the linked list **sorted** as well_.\n\n**Example 1:**\n\n**Input:** head = \\[1,1,2\\]\n**Output:** \\[1,2\\]\n\n**Example 2:**\n\n**Input:** head = \\[1,1,2,3,3\\]\n**Output:** \\[1,2,3\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[0, 300]`.\n*   `-100 <= Node.val <= 100`\n*   The list is guaranteed to be **sorted** in ascending order."}}
{"88": {"title": "Merge Sorted Array", "difficulty": "Easy", "description": "You are given two integer arrays `nums1` and `nums2`, sorted in **non-decreasing order**, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively.\n\n**Merge** `nums1` and `nums2` into a single array sorted in **non-decreasing order**.\n\nThe final sorted array should not be returned by the function, but instead be _stored inside the array_ `nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are set to `0` and should be ignored. `nums2` has a length of `n`.\n\n**Example 1:**\n\n**Input:** nums1 = \\[1,2,3,0,0,0\\], m = 3, nums2 = \\[2,5,6\\], n = 3\n**Output:** \\[1,2,2,3,5,6\\]\n**Explanation:** The arrays we are merging are \\[1,2,3\\] and \\[2,5,6\\].\nThe result of the merge is \\[1,2,2,3,5,6\\] with the underlined elements coming from nums1.\n\n**Example 2:**\n\n**Input:** nums1 = \\[1\\], m = 1, nums2 = \\[\\], n = 0\n**Output:** \\[1\\]\n**Explanation:** The arrays we are merging are \\[1\\] and \\[\\].\nThe result of the merge is \\[1\\].\n\n**Example 3:**\n\n**Input:** nums1 = \\[0\\], m = 0, nums2 = \\[1\\], n = 1\n**Output:** \\[1\\]\n**Explanation:** The arrays we are merging are \\[\\] and \\[1\\].\nThe result of the merge is \\[1\\].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\n\n**Constraints:**\n\n*   `nums1.length == m + n`\n*   `nums2.length == n`\n*   `0 <= m, n <= 200`\n*   `1 <= m + n <= 200`\n*   `-109 <= nums1[i], nums2[j] <= 109`\n\n**Follow up:** Can you come up with an algorithm that runs in `O(m + n)` time?"}}
{"94": {"title": "Binary Tree Inorder Traversal", "difficulty": "Easy", "description": "Given the `root` of a binary tree, return _the inorder traversal of its nodes' values_.\n\n**Example 1:**\n\n**Input:** root = \\[1,null,2,3\\]\n**Output:** \\[1,3,2\\]\n\n**Example 2:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 100]`.\n*   `-100 <= Node.val <= 100`\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?"}}
{"100": {"title": "Same Tree", "difficulty": "Easy", "description": "Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n\n**Example 1:**\n\n**Input:** p = \\[1,2,3\\], q = \\[1,2,3\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** p = \\[1,2\\], q = \\[1,null,2\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** p = \\[1,2,1\\], q = \\[1,1,2\\]\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in both trees is in the range `[0, 100]`.\n*   `-104 <= Node.val <= 104`"}}
{"101": {"title": "Symmetric Tree", "difficulty": "Easy", "description": "Given the `root` of a binary tree, _check whether it is a mirror of itself_ (i.e., symmetric around its center).\n\n**Example 1:**\n\n**Input:** root = \\[1,2,2,3,4,4,3\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** root = \\[1,2,2,null,3,null,3\\]\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 1000]`.\n*   `-100 <= Node.val <= 100`\n\n**Follow up:** Could you solve it both recursively and iteratively?"}}
{"104": {"title": "Maximum Depth of Binary Tree", "difficulty": "Easy", "description": "Given the `root` of a binary tree, return _its maximum depth_.\n\nA binary tree's **maximum depth** is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** 3\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2\\]\n**Output:** 2\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `-100 <= Node.val <= 100`"}}
{"108": {"title": "Convert Sorted Array to Binary Search Tree", "difficulty": "Easy", "description": "Given an integer array `nums` where the elements are sorted in **ascending order**, convert _it to a_ **_height-balanced_** _binary search tree_.\n\n**Example 1:**\n\n**Input:** nums = \\[-10,-3,0,5,9\\]\n**Output:** \\[0,-3,9,-10,null,5\\]\n**Explanation:** \\[0,-10,5,null,-3,null,9\\] is also accepted:\n \n\n**Example 2:**\n\n**Input:** nums = \\[1,3\\]\n**Output:** \\[3,1\\]\n**Explanation:** \\[1,null,3\\] and \\[3,1\\] are both height-balanced BSTs.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-104 <= nums[i] <= 104`\n*   `nums` is sorted in a **strictly increasing** order."}}
{"110": {"title": "Balanced Binary Tree", "difficulty": "Easy", "description": "Given a binary tree, determine if it is **height-balanced**.\n\n**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** root = \\[1,2,2,3,3,null,null,4,4\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** root = \\[\\]\n**Output:** true\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 5000]`.\n*   `-104 <= Node.val <= 104`"}}
{"111": {"title": "Minimum Depth of Binary Tree", "difficulty": "Easy", "description": "Given a binary tree, find its minimum depth.\n\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\n\n**Note:** A leaf is a node with no children.\n\n**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** root = \\[2,null,3,null,4,null,5,null,6\\]\n**Output:** 5\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 105]`.\n*   `-1000 <= Node.val <= 1000`"}}
{"112": {"title": "Path Sum", "difficulty": "Easy", "description": "Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a **root-to-leaf** path such that adding up all the values along the path equals `targetSum`.\n\nA **leaf** is a node with no children.\n\n**Example 1:**\n\n**Input:** root = \\[5,4,8,11,null,13,4,7,2,null,null,null,1\\], targetSum = 22\n**Output:** true\n**Explanation:** The root-to-leaf path with the target sum is shown.\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3\\], targetSum = 5\n**Output:** false\n**Explanation:** There two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.\n\n**Example 3:**\n\n**Input:** root = \\[\\], targetSum = 0\n**Output:** false\n**Explanation:** Since the tree is empty, there are no root-to-leaf paths.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 5000]`.\n*   `-1000 <= Node.val <= 1000`\n*   `-1000 <= targetSum <= 1000`"}}
{"118": {"title": "Pascal's Triangle", "difficulty": "Easy", "description": "Given an integer `numRows`, return the first numRows of **Pascal's triangle**.\n\nIn **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown:\n\n**Example 1:**\n\n**Input:** numRows = 5\n**Output:** \\[\\[1\\],\\[1,1\\],\\[1,2,1\\],\\[1,3,3,1\\],\\[1,4,6,4,1\\]\\]\n\n**Example 2:**\n\n**Input:** numRows = 1\n**Output:** \\[\\[1\\]\\]\n\n**Constraints:**\n\n*   `1 <= numRows <= 30`"}}
{"119": {"title": "Pascal's Triangle II", "difficulty": "Easy", "description": "Given an integer `rowIndex`, return the `rowIndexth` (**0-indexed**) row of the **Pascal's triangle**.\n\nIn **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown:\n\n**Example 1:**\n\n**Input:** rowIndex = 3\n**Output:** \\[1,3,3,1\\]\n\n**Example 2:**\n\n**Input:** rowIndex = 0\n**Output:** \\[1\\]\n\n**Example 3:**\n\n**Input:** rowIndex = 1\n**Output:** \\[1,1\\]\n\n**Constraints:**\n\n*   `0 <= rowIndex <= 33`\n\n**Follow up:** Could you optimize your algorithm to use only `O(rowIndex)` extra space?"}}
{"121": {"title": "Best Time to Buy and Sell Stock", "difficulty": "Easy", "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.\n\nYou want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock.\n\nReturn _the maximum profit you can achieve from this transaction_. If you cannot achieve any profit, return `0`.\n\n**Example 1:**\n\n**Input:** prices = \\[7,1,5,3,6,4\\]\n**Output:** 5\n**Explanation:** Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\n**Example 2:**\n\n**Input:** prices = \\[7,6,4,3,1\\]\n**Output:** 0\n**Explanation:** In this case, no transactions are done and the max profit = 0.\n\n**Constraints:**\n\n*   `1 <= prices.length <= 105`\n*   `0 <= prices[i] <= 104`"}}
{"125": {"title": "Valid Palindrome", "difficulty": "Easy", "description": "A phrase is a **palindrome** if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\n\nGiven a string `s`, return `true` _if it is a **palindrome**, or_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** s =  \"A man, a plan, a canal: Panama \"\n**Output:** true\n**Explanation:**  \"amanaplanacanalpanama \" is a palindrome.\n\n**Example 2:**\n\n**Input:** s =  \"race a car \"\n**Output:** false\n**Explanation:**  \"raceacar \" is not a palindrome.\n\n**Example 3:**\n\n**Input:** s =  \"  \"\n**Output:** true\n**Explanation:** s is an empty string  \" \" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n\n**Constraints:**\n\n*   `1 <= s.length <= 2 * 105`\n*   `s` consists only of printable ASCII characters."}}
{"136": {"title": "Single Number", "difficulty": "Easy", "description": "Given a **non-empty** array of integers `nums`, every element appears _twice_ except for one. Find that single one.\n\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\n\n**Example 1:**\n\n**Input:** nums = \\[2,2,1\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** nums = \\[4,1,2,1,2\\]\n**Output:** 4\n\n**Example 3:**\n\n**Input:** nums = \\[1\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 3 * 104`\n*   `-3 * 104 <= nums[i] <= 3 * 104`\n*   Each element in the array appears twice except for one element which appears only once."}}
{"141": {"title": "Linked List Cycle", "difficulty": "Easy", "description": "Given `head`, the head of a linked list, determine if the linked list has a cycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. **Note that `pos` is not passed as a parameter**.\n\nReturn `true` _if there is a cycle in the linked list_. Otherwise, return `false`.\n\n**Example 1:**\n\n**Input:** head = \\[3,2,0,-4\\], pos = 1\n**Output:** true\n**Explanation:** There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n\n**Example 2:**\n\n**Input:** head = \\[1,2\\], pos = 0\n**Output:** true\n**Explanation:** There is a cycle in the linked list, where the tail connects to the 0th node.\n\n**Example 3:**\n\n**Input:** head = \\[1\\], pos = -1\n**Output:** false\n**Explanation:** There is no cycle in the linked list.\n\n**Constraints:**\n\n*   The number of the nodes in the list is in the range `[0, 104]`.\n*   `-105 <= Node.val <= 105`\n*   `pos` is `-1` or a **valid index** in the linked-list.\n\n**Follow up:** Can you solve it using `O(1)` (i.e. constant) memory?"}}
{"144": {"title": "Binary Tree Preorder Traversal", "difficulty": "Easy", "description": "Given the `root` of a binary tree, return _the preorder traversal of its nodes' values_.\n\n**Example 1:**\n\n**Input:** root = \\[1,null,2,3\\]\n**Output:** \\[1,2,3\\]\n\n**Example 2:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 100]`.\n*   `-100 <= Node.val <= 100`\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?"}}
{"145": {"title": "Binary Tree Postorder Traversal", "difficulty": "Easy", "description": "Given the `root` of a binary tree, return _the postorder traversal of its nodes' values_.\n\n**Example 1:**\n\n**Input:** root = \\[1,null,2,3\\]\n**Output:** \\[3,2,1\\]\n\n**Example 2:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[1\\]\n\n**Constraints:**\n\n*   The number of the nodes in the tree is in the range `[0, 100]`.\n*   `-100 <= Node.val <= 100`\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?"}}
{"157": {"title": "Read N Characters Given Read4", "difficulty": "Easy", "description": "Given a `file` and assume that you can only read the file using a given method `read4`, implement a method to read `n` characters.\n\n**Method read4:**\n\nThe API `read4` reads **four consecutive characters** from `file`, then writes those characters into the buffer array `buf4`.\n\nThe return value is the number of actual characters read.\n\nNote that `read4()` has its own file pointer, much like `FILE *fp` in C.\n\n**Definition of read4:**\n\n    Parameter:  char\\[\\] buf4\n    Returns:    int\n\nbuf4\\[\\] is a destination, not a source. The results from read4 will be copied to buf4\\[\\].\n\nBelow is a high-level example of how `read4` works:\n\nFile file( \"abcde `\"); // File is  \"`abcde `\", initially file pointer (fp) points to 'a' char[] buf4 = new char[4]; // Create buffer with enough space to store characters read4(buf4); // read4 returns 4. Now buf4 =  \"abcd \", fp points to 'e' read4(buf4); // read4 returns 1. Now buf4 =  \"e \", fp points to end of file read4(buf4); // read4 returns 0. Now buf4 =  \" \", fp points to end of file`\n\n**Method read:**\n\nBy using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.\n\nThe return value is the number of actual characters read.\n\n**Definition of read:**\n\n    Parameters:\tchar\\[\\] buf, int n\n    Returns:\tint\n\nbuf\\[\\] is a destination, not a source. You will need to write the results to buf\\[\\].\n\n**Note:**\n\n*   Consider that you cannot manipulate the file directly. The file is only accessible for `read4` but not for `read`.\n*   The `read` function will only be called once for each test case.\n*   You may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.\n\n**Example 1:**\n\n**Input:** file =  \"abc \", n = 4\n**Output:** 3\n**Explanation:** After calling your read method, buf should contain  \"abc \". We read a total of 3 characters from the file, so return 3.\nNote that  \"abc \" is the file's content, not buf. buf is the destination buffer that you will have to write the results to.\n\n**Example 2:**\n\n**Input:** file =  \"abcde \", n = 5\n**Output:** 5\n**Explanation:** After calling your read method, buf should contain  \"abcde \". We read a total of 5 characters from the file, so return 5.\n\n**Example 3:**\n\n**Input:** file =  \"abcdABCD1234 \", n = 12\n**Output:** 12\n**Explanation:** After calling your read method, buf should contain  \"abcdABCD1234 \". We read a total of 12 characters from the file, so return 12.\n\n**Constraints:**\n\n*   `1 <= file.length <= 500`\n*   `file` consist of English letters and digits.\n*   `1 <= n <= 1000`"}}
{"160": {"title": "Intersection of Two Linked Lists", "difficulty": "Easy", "description": "Given the heads of two singly linked-lists `headA` and `headB`, return _the node at which the two lists intersect_. If the two linked lists have no intersection at all, return `null`.\n\nFor example, the following two linked lists begin to intersect at node `c1`:\n\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\n\n**Note** that the linked lists must **retain their original structure** after the function returns.\n\n**Custom Judge:**\n\nThe inputs to the **judge** are given as follows (your program is **not** given these inputs):\n\n*   `intersectVal` - The value of the node where the intersection occurs. This is `0` if there is no intersected node.\n*   `listA` - The first linked list.\n*   `listB` - The second linked list.\n*   `skipA` - The number of nodes to skip ahead in `listA` (starting from the head) to get to the intersected node.\n*   `skipB` - The number of nodes to skip ahead in `listB` (starting from the head) to get to the intersected node.\n\nThe judge will then create the linked structure based on these inputs and pass the two heads, `headA` and `headB` to your program. If you correctly return the intersected node, then your solution will be **accepted**.\n\n**Example 1:**\n\n**Input:** intersectVal = 8, listA = \\[4,1,8,4,5\\], listB = \\[5,6,1,8,4,5\\], skipA = 2, skipB = 3\n**Output:** Intersected at '8'\n**Explanation:** The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as \\[4,1,8,4,5\\]. From the head of B, it reads as \\[5,6,1,8,4,5\\]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.\n\n**Example 2:**\n\n**Input:** intersectVal = 2, listA = \\[1,9,1,2,4\\], listB = \\[3,2,4\\], skipA = 3, skipB = 1\n**Output:** Intersected at '2'\n**Explanation:** The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as \\[1,9,1,2,4\\]. From the head of B, it reads as \\[3,2,4\\]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n\n**Example 3:**\n\n**Input:** intersectVal = 0, listA = \\[2,6,4\\], listB = \\[1,5\\], skipA = 3, skipB = 2\n**Output:** No intersection\n**Explanation:** From the head of A, it reads as \\[2,6,4\\]. From the head of B, it reads as \\[1,5\\]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.\n\n**Constraints:**\n\n*   The number of nodes of `listA` is in the `m`.\n*   The number of nodes of `listB` is in the `n`.\n*   `1 <= m, n <= 3 * 104`\n*   `1 <= Node.val <= 105`\n*   `0 <= skipA < m`\n*   `0 <= skipB < n`\n*   `intersectVal` is `0` if `listA` and `listB` do not intersect.\n*   `intersectVal == listA[skipA] == listB[skipB]` if `listA` and `listB` intersect.\n\n**Follow up:** Could you write a solution that runs in `O(m + n)` time and use only `O(1)` memory?"}}
{"163": {"title": "Missing Ranges", "difficulty": "Easy", "description": "You are given an inclusive range `[lower, upper]` and a **sorted unique** integer array `nums`, where all elements are in the inclusive range.\n\nA number `x` is considered **missing** if `x` is in the range `[lower, upper]` and `x` is not in `nums`.\n\nReturn _the **smallest sorted** list of ranges that **cover every missing number exactly**_. That is, no element of `nums` is in any of the ranges, and each missing number is in one of the ranges.\n\nEach range `[a,b]` in the list should be output as:\n\n*   `\"a->b \"` if `a != b`\n*   `\"a \"` if `a == b`\n\n**Example 1:**\n\n**Input:** nums = \\[0,1,3,50,75\\], lower = 0, upper = 99\n**Output:** \\[ \"2 \", \"4->49 \", \"51->74 \", \"76->99 \"\\]\n**Explanation:** The ranges are:\n\\[2,2\\] -->  \"2 \"\n\\[4,49\\] -->  \"4->49 \"\n\\[51,74\\] -->  \"51->74 \"\n\\[76,99\\] -->  \"76->99 \"\n\n**Example 2:**\n\n**Input:** nums = \\[-1\\], lower = -1, upper = -1\n**Output:** \\[\\]\n**Explanation:** There are no missing ranges since there are no missing numbers.\n\n**Constraints:**\n\n*   `-109 <= lower <= upper <= 109`\n*   `0 <= nums.length <= 100`\n*   `lower <= nums[i] <= upper`\n*   All the values of `nums` are **unique**."}}
{"168": {"title": "Excel Sheet Column Title", "difficulty": "Easy", "description": "Given an integer `columnNumber`, return _its corresponding column title as it appears in an Excel sheet_.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n\n**Example 1:**\n\n**Input:** columnNumber = 1\n**Output:**  \"A \"\n\n**Example 2:**\n\n**Input:** columnNumber = 28\n**Output:**  \"AB \"\n\n**Example 3:**\n\n**Input:** columnNumber = 701\n**Output:**  \"ZY \"\n\n**Constraints:**\n\n*   `1 <= columnNumber <= 231 - 1`"}}
{"169": {"title": "Majority Element", "difficulty": "Easy", "description": "Given an array `nums` of size `n`, return _the majority element_.\n\nThe majority element is the element that appears more than `⌊n / 2⌋` times. You may assume that the majority element always exists in the array.\n\n**Example 1:**\n\n**Input:** nums = \\[3,2,3\\]\n**Output:** 3\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,1,1,1,2,2\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 5 * 104`\n*   `-109 <= nums[i] <= 109`\n\n**Follow-up:** Could you solve the problem in linear time and in `O(1)` space?"}}
{"170": {"title": "Two Sum III - Data structure design", "difficulty": "Easy", "description": "Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value.\n\nImplement the `TwoSum` class:\n\n*   `TwoSum()` Initializes the `TwoSum` object, with an empty array initially.\n*   `void add(int number)` Adds `number` to the data structure.\n*   `boolean find(int value)` Returns `true` if there exists any pair of numbers whose sum is equal to `value`, otherwise, it returns `false`.\n\n**Example 1:**\n\n**Input**\n\\[ \"TwoSum \",  \"add \",  \"add \",  \"add \",  \"find \",  \"find \"\\]\n\\[\\[\\], \\[1\\], \\[3\\], \\[5\\], \\[4\\], \\[7\\]\\]\n**Output**\n\\[null, null, null, null, true, false\\]\n\n**Explanation**\nTwoSum twoSum = new TwoSum();\ntwoSum.add(1);   // \\[\\] --> \\[1\\]\ntwoSum.add(3);   // \\[1\\] --> \\[1,3\\]\ntwoSum.add(5);   // \\[1,3\\] --> \\[1,3,5\\]\ntwoSum.find(4);  // 1 + 3 = 4, return true\ntwoSum.find(7);  // No two integers sum up to 7, return false\n\n**Constraints:**\n\n*   `-105 <= number <= 105`\n*   `-231 <= value <= 231 - 1`\n*   At most `104` calls will be made to `add` and `find`."}}
{"171": {"title": "Excel Sheet Column Number", "difficulty": "Easy", "description": "Given a string `columnTitle` that represents the column title as appears in an Excel sheet, return _its corresponding column number_.\n\nFor example:\n\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28 \n...\n\n**Example 1:**\n\n**Input:** columnTitle =  \"A \"\n**Output:** 1\n\n**Example 2:**\n\n**Input:** columnTitle =  \"AB \"\n**Output:** 28\n\n**Example 3:**\n\n**Input:** columnTitle =  \"ZY \"\n**Output:** 701\n\n**Constraints:**\n\n*   `1 <= columnTitle.length <= 7`\n*   `columnTitle` consists only of uppercase English letters.\n*   `columnTitle` is in the range `[ \"A \", \"FXSHRXW \"]`."}}
{"190": {"title": "Reverse Bits", "difficulty": "Easy", "description": "Reverse bits of a given 32 bits unsigned integer.\n\n**Note:**\n\n*   Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n*   In Java, the compiler represents the signed integers using [2's complement notation](https://en.wikipedia.org/wiki/Two%27s_complement). Therefore, in **Example 2** above, the input represents the signed integer `-3` and the output represents the signed integer `-1073741825`.\n\n**Example 1:**\n\n**Input:** n = 00000010100101000001111010011100\n**Output:**    964176192 (00111001011110000010100101000000)\n**Explanation:** The input binary string **00000010100101000001111010011100** represents the unsigned integer 43261596, so return 964176192 which its binary representation is **00111001011110000010100101000000**.\n\n**Example 2:**\n\n**Input:** n = 11111111111111111111111111111101\n**Output:**   3221225471 (10111111111111111111111111111111)\n**Explanation:** The input binary string **11111111111111111111111111111101** represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is **10111111111111111111111111111111**.\n\n**Constraints:**\n\n*   The input must be a **binary string** of length `32`\n\n**Follow up:** If this function is called many times, how would you optimize it?"}}
{"191": {"title": "Number of 1 Bits", "difficulty": "Easy", "description": "Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the [Hamming weight](http://en.wikipedia.org/wiki/Hamming_weight)).\n\n**Note:**\n\n*   Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n*   In Java, the compiler represents the signed integers using [2's complement notation](https://en.wikipedia.org/wiki/Two%27s_complement). Therefore, in **Example 3**, the input represents the signed integer. `-3`.\n\n**Example 1:**\n\n**Input:** n = 00000000000000000000000000001011\n**Output:** 3\n**Explanation:** The input binary string **00000000000000000000000000001011** has a total of three '1' bits.\n\n**Example 2:**\n\n**Input:** n = 00000000000000000000000010000000\n**Output:** 1\n**Explanation:** The input binary string **00000000000000000000000010000000** has a total of one '1' bit.\n\n**Example 3:**\n\n**Input:** n = 11111111111111111111111111111101\n**Output:** 31\n**Explanation:** The input binary string **11111111111111111111111111111101** has a total of thirty one '1' bits.\n\n**Constraints:**\n\n*   The input must be a **binary string** of length `32`.\n\n**Follow up:** If this function is called many times, how would you optimize it?"}}
{"202": {"title": "Happy Number", "difficulty": "Easy", "description": "Write an algorithm to determine if a number `n` is happy.\n\nA **happy number** is a number defined by the following process:\n\n*   Starting with any positive integer, replace the number by the sum of the squares of its digits.\n*   Repeat the process until the number equals 1 (where it will stay), or it **loops endlessly in a cycle** which does not include 1.\n*   Those numbers for which this process **ends in 1** are happy.\n\nReturn `true` _if_ `n` _is a happy number, and_ `false` _if not_.\n\n**Example 1:**\n\n**Input:** n = 19\n**Output:** true\n**Explanation:**\n12 + 92 = 82\n82 + 22 = 68\n62 + 82 = 100\n12 + 02 + 02 = 1\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= n <= 231 - 1`"}}
{"203": {"title": "Remove Linked List Elements", "difficulty": "Easy", "description": "Given the `head` of a linked list and an integer `val`, remove all the nodes of the linked list that has `Node.val == val`, and return _the new head_.\n\n**Example 1:**\n\n**Input:** head = \\[1,2,6,3,4,5,6\\], val = 6\n**Output:** \\[1,2,3,4,5\\]\n\n**Example 2:**\n\n**Input:** head = \\[\\], val = 1\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** head = \\[7,7,7,7\\], val = 7\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[0, 104]`.\n*   `1 <= Node.val <= 50`\n*   `0 <= val <= 50`"}}
{"205": {"title": "Isomorphic Strings", "difficulty": "Easy", "description": "Given two strings `s` and `t`, _determine if they are isomorphic_.\n\nTwo strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`.\n\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\n\n**Example 1:**\n\n**Input:** s = \"egg\", t = \"add\"\n**Output:** true\n\n**Example 2:**\n\n**Input:** s = \"foo\", t = \"bar\"\n**Output:** false\n\n**Example 3:**\n\n**Input:** s = \"paper\", t = \"title\"\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= s.length <= 5 * 104`\n*   `t.length == s.length`\n*   `s` and `t` consist of any valid ascii character."}}
{"206": {"title": "Reverse Linked List", "difficulty": "Easy", "description": "Given the `head` of a singly linked list, reverse the list, and return _the reversed list_.\n\n**Example 1:**\n\n**Input:** head = \\[1,2,3,4,5\\]\n**Output:** \\[5,4,3,2,1\\]\n\n**Example 2:**\n\n**Input:** head = \\[1,2\\]\n**Output:** \\[2,1\\]\n\n**Example 3:**\n\n**Input:** head = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the list is the range `[0, 5000]`.\n*   `-5000 <= Node.val <= 5000`\n\n**Follow up:** A linked list can be reversed either iteratively or recursively. Could you implement both?"}}
{"217": {"title": "Contains Duplicate", "difficulty": "Easy", "description": "Given an integer array `nums`, return `true` if any value appears **at least twice** in the array, and return `false` if every element is distinct.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,3,1\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,1,3,3,4,3,2,4,2\\]\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-109 <= nums[i] <= 109`"}}
{"219": {"title": "Contains Duplicate II", "difficulty": "Easy", "description": "Given an integer array `nums` and an integer `k`, return `true` _if there are two **distinct indices**_ `i` _and_ `j` _in the array such that_ `nums[i] == nums[j]` _and_ `abs(i - j) <= k`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,3,1\\], k = 3\n**Output:** true\n\n**Example 2:**\n\n**Input:** nums = \\[1,0,1,1\\], k = 1\n**Output:** true\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3,1,2,3\\], k = 2\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-109 <= nums[i] <= 109`\n*   `0 <= k <= 105`"}}
{"225": {"title": "Implement Stack using Queues", "difficulty": "Easy", "description": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (`push`, `top`, `pop`, and `empty`).\n\nImplement the `MyStack` class:\n\n*   `void push(int x)` Pushes element x to the top of the stack.\n*   `int pop()` Removes the element on the top of the stack and returns it.\n*   `int top()` Returns the element on the top of the stack.\n*   `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n**Notes:**\n\n*   You must use **only** standard operations of a queue, which means that only `push to back`, `peek/pop from front`, `size` and `is empty` operations are valid.\n*   Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.\n\n**Example 1:**\n\n**Input**\n\\[ \"MyStack \",  \"push \",  \"push \",  \"top \",  \"pop \",  \"empty \"\\]\n\\[\\[\\], \\[1\\], \\[2\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, null, null, 2, 2, false\\]\n\n**Explanation**\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False\n\n**Constraints:**\n\n*   `1 <= x <= 9`\n*   At most `100` calls will be made to `push`, `pop`, `top`, and `empty`.\n*   All the calls to `pop` and `top` are valid.\n\n**Follow-up:** Can you implement the stack using only one queue?"}}
{"226": {"title": "Invert Binary Tree", "difficulty": "Easy", "description": "Given the `root` of a binary tree, invert the tree, and return _its root_.\n\n**Example 1:**\n\n**Input:** root = \\[4,2,7,1,3,6,9\\]\n**Output:** \\[4,7,2,9,6,3,1\\]\n\n**Example 2:**\n\n**Input:** root = \\[2,1,3\\]\n**Output:** \\[2,3,1\\]\n\n**Example 3:**\n\n**Input:** root = \\[\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 100]`.\n*   `-100 <= Node.val <= 100`"}}
{"228": {"title": "Summary Ranges", "difficulty": "Easy", "description": "You are given a **sorted unique** integer array `nums`.\n\nA **range** `[a,b]` is the set of all integers from `a` to `b` (inclusive).\n\nReturn _the **smallest sorted** list of ranges that **cover all the numbers in the array exactly**_. That is, each element of `nums` is covered by exactly one of the ranges, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`.\n\nEach range `[a,b]` in the list should be output as:\n\n*   `\"a->b \"` if `a != b`\n*   `\"a \"` if `a == b`\n\n**Example 1:**\n\n**Input:** nums = \\[0,1,2,4,5,7\\]\n**Output:** \\[ \"0->2 \", \"4->5 \", \"7 \"\\]\n**Explanation:** The ranges are:\n\\[0,2\\] -->  \"0->2 \"\n\\[4,5\\] -->  \"4->5 \"\n\\[7,7\\] -->  \"7 \"\n\n**Example 2:**\n\n**Input:** nums = \\[0,2,3,4,6,8,9\\]\n**Output:** \\[ \"0 \", \"2->4 \", \"6 \", \"8->9 \"\\]\n**Explanation:** The ranges are:\n\\[0,0\\] -->  \"0 \"\n\\[2,4\\] -->  \"2->4 \"\n\\[6,6\\] -->  \"6 \"\n\\[8,9\\] -->  \"8->9 \"\n\n**Constraints:**\n\n*   `0 <= nums.length <= 20`\n*   `-231 <= nums[i] <= 231 - 1`\n*   All the values of `nums` are **unique**.\n*   `nums` is sorted in ascending order."}}
{"231": {"title": "Power of Two", "difficulty": "Easy", "description": "Given an integer `n`, return _`true` if it is a power of two. Otherwise, return `false`_.\n\nAn integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`.\n\n**Example 1:**\n\n**Input:** n = 1\n**Output:** true\n**Explanation:** 20 = 1\n\n**Example 2:**\n\n**Input:** n = 16\n**Output:** true\n**Explanation:** 24 = 16\n\n**Example 3:**\n\n**Input:** n = 3\n**Output:** false\n\n**Constraints:**\n\n*   `-231 <= n <= 231 - 1`\n\n**Follow up:** Could you solve it without loops/recursion?"}}
{"232": {"title": "Implement Queue using Stacks", "difficulty": "Easy", "description": "Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (`push`, `peek`, `pop`, and `empty`).\n\nImplement the `MyQueue` class:\n\n*   `void push(int x)` Pushes element x to the back of the queue.\n*   `int pop()` Removes the element from the front of the queue and returns it.\n*   `int peek()` Returns the element at the front of the queue.\n*   `boolean empty()` Returns `true` if the queue is empty, `false` otherwise.\n\n**Notes:**\n\n*   You must use **only** standard operations of a stack, which means only `push to top`, `peek/pop from top`, `size`, and `is empty` operations are valid.\n*   Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n\n**Example 1:**\n\n**Input**\n\\[ \"MyQueue \",  \"push \",  \"push \",  \"peek \",  \"pop \",  \"empty \"\\]\n\\[\\[\\], \\[1\\], \\[2\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null, null, null, 1, 1, false\\]\n\n**Explanation**\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: \\[1\\]\nmyQueue.push(2); // queue is: \\[1, 2\\] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is \\[2\\]\nmyQueue.empty(); // return false\n\n**Constraints:**\n\n*   `1 <= x <= 9`\n*   At most `100` calls will be made to `push`, `pop`, `peek`, and `empty`.\n*   All the calls to `pop` and `peek` are valid.\n\n**Follow-up:** Can you implement the queue such that each operation is **[amortized](https://en.wikipedia.org/wiki/Amortized_analysis)** `O(1)` time complexity? In other words, performing `n` operations will take overall `O(n)` time even if one of those operations may take longer."}}
{"234": {"title": "Palindrome Linked List", "difficulty": "Easy", "description": "Given the `head` of a singly linked list, return `true` _if it is a_ _palindrome_ _or_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** head = \\[1,2,2,1\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** head = \\[1,2\\]\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[1, 105]`.\n*   `0 <= Node.val <= 9`\n\n**Follow up:** Could you do it in `O(n)` time and `O(1)` space?"}}
{"242": {"title": "Valid Anagram", "difficulty": "Easy", "description": "Given two strings `s` and `t`, return `true` _if_ `t` _is an anagram of_ `s`_, and_ `false` _otherwise_.\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n**Example 1:**\n\n**Input:** s = \"anagram\", t = \"nagaram\"\n**Output:** true\n\n**Example 2:**\n\n**Input:** s = \"rat\", t = \"car\"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= s.length, t.length <= 5 * 104`\n*   `s` and `t` consist of lowercase English letters.\n\n**Follow up:** What if the inputs contain Unicode characters? How would you adapt your solution to such a case?"}}
{"243": {"title": "Shortest Word Distance", "difficulty": "Easy", "description": "Given an array of strings `wordsDict` and two different strings that already exist in the array `word1` and `word2`, return _the shortest distance between these two words in the list_.\n\n**Example 1:**\n\n**Input:** wordsDict = \\[ \"practice \",  \"makes \",  \"perfect \",  \"coding \",  \"makes \"\\], word1 =  \"coding \", word2 =  \"practice \"\n**Output:** 3\n\n**Example 2:**\n\n**Input:** wordsDict = \\[ \"practice \",  \"makes \",  \"perfect \",  \"coding \",  \"makes \"\\], word1 =  \"makes \", word2 =  \"coding \"\n**Output:** 1\n\n**Constraints:**\n\n*   `2 <= wordsDict.length <= 3 * 104`\n*   `1 <= wordsDict[i].length <= 10`\n*   `wordsDict[i]` consists of lowercase English letters.\n*   `word1` and `word2` are in `wordsDict`.\n*   `word1 != word2`"}}
{"246": {"title": "Strobogrammatic Number", "difficulty": "Easy", "description": "Given a string `num` which represents an integer, return `true` _if_ `num` _is a **strobogrammatic number**_.\n\nA **strobogrammatic number** is a number that looks the same when rotated `180` degrees (looked at upside down).\n\n**Example 1:**\n\n**Input:** num =  \"69 \"\n**Output:** true\n\n**Example 2:**\n\n**Input:** num =  \"88 \"\n**Output:** true\n\n**Example 3:**\n\n**Input:** num =  \"962 \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= num.length <= 50`\n*   `num` consists of only digits.\n*   `num` does not contain any leading zeros except for zero itself."}}
{"252": {"title": "Meeting Rooms", "difficulty": "Easy", "description": "Given an array of meeting time `intervals` where `intervals[i] = [starti, endi]`, determine if a person could attend all meetings.\n\n**Example 1:**\n\n**Input:** intervals = \\[\\[0,30\\],\\[5,10\\],\\[15,20\\]\\]\n**Output:** false\n\n**Example 2:**\n\n**Input:** intervals = \\[\\[7,10\\],\\[2,4\\]\\]\n**Output:** true\n\n**Constraints:**\n\n*   `0 <= intervals.length <= 104`\n*   `intervals[i].length == 2`\n*   `0 <= starti < endi <= 106`"}}
{"257": {"title": "Binary Tree Paths", "difficulty": "Easy", "description": "Given the `root` of a binary tree, return _all root-to-leaf paths in **any order**_.\n\nA **leaf** is a node with no children.\n\n**Example 1:**\n\n**Input:** root = \\[1,2,3,null,5\\]\n**Output:** \\[ \"1->2->5 \", \"1->3 \"\\]\n\n**Example 2:**\n\n**Input:** root = \\[1\\]\n**Output:** \\[ \"1 \"\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 100]`.\n*   `-100 <= Node.val <= 100`"}}
{"258": {"title": "Add Digits", "difficulty": "Easy", "description": "Given an integer `num`, repeatedly add all its digits until the result has only one digit, and return it.\n\n**Example 1:**\n\n**Input:** num = 38\n**Output:** 2\n**Explanation:** The process is\n38 --> 3 + 8 --> 11\n11 --> 1 + 1 --> 2 \nSince 2 has only one digit, return it.\n\n**Example 2:**\n\n**Input:** num = 0\n**Output:** 0\n\n**Constraints:**\n\n*   `0 <= num <= 231 - 1`\n\n**Follow up:** Could you do it without any loop/recursion in `O(1)` runtime?"}}
{"263": {"title": "Ugly Number", "difficulty": "Easy", "description": "An **ugly number** is a positive integer whose prime factors are limited to `2`, `3`, and `5`.\n\nGiven an integer `n`, return `true` _if_ `n` _is an **ugly number**_.\n\n**Example 1:**\n\n**Input:** n = 6\n**Output:** true\n**Explanation:** 6 = 2 \\* 3\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** true\n**Explanation:** 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n\n**Example 3:**\n\n**Input:** n = 14\n**Output:** false\n**Explanation:** 14 is not ugly since it includes the prime factor 7.\n\n**Constraints:**\n\n*   `-231 <= n <= 231 - 1`"}}
{"266": {"title": "Palindrome Permutation", "difficulty": "Easy", "description": "Given a string `s`, return `true` _if a permutation of the string could form a_ _**palindrome**_ _and_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** s =  \"code \"\n**Output:** false\n\n**Example 2:**\n\n**Input:** s =  \"aab \"\n**Output:** true\n\n**Example 3:**\n\n**Input:** s =  \"carerac \"\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= s.length <= 5000`\n*   `s` consists of only lowercase English letters."}}
{"268": {"title": "Missing Number", "difficulty": "Easy", "description": "Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return _the only number in the range that is missing from the array._\n\n**Example 1:**\n\n**Input:** nums = \\[3,0,1\\]\n**Output:** 2\n**Explanation:** n = 3 since there are 3 numbers, so all numbers are in the range \\[0,3\\]. 2 is the missing number in the range since it does not appear in nums.\n\n**Example 2:**\n\n**Input:** nums = \\[0,1\\]\n**Output:** 2\n**Explanation:** n = 2 since there are 2 numbers, so all numbers are in the range \\[0,2\\]. 2 is the missing number in the range since it does not appear in nums.\n\n**Example 3:**\n\n**Input:** nums = \\[9,6,4,2,3,5,7,0,1\\]\n**Output:** 8\n**Explanation:** n = 9 since there are 9 numbers, so all numbers are in the range \\[0,9\\]. 8 is the missing number in the range since it does not appear in nums.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 104`\n*   `0 <= nums[i] <= n`\n*   All the numbers of `nums` are **unique**.\n\n**Follow up:** Could you implement a solution using only `O(1)` extra space complexity and `O(n)` runtime complexity?"}}
{"270": {"title": "Closest Binary Search Tree Value", "difficulty": "Easy", "description": "Given the `root` of a binary search tree and a `target` value, return _the value in the BST that is closest to the_ `target`. If there are multiple answers, print the smallest.\n\n**Example 1:**\n\n**Input:** root = \\[4,2,5,1,3\\], target = 3.714286\n**Output:** 4\n\n**Example 2:**\n\n**Input:** root = \\[1\\], target = 4.428571\n**Output:** 1\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `0 <= Node.val <= 109`\n*   `-109 <= target <= 109`"}}
{"278": {"title": "First Bad Version", "difficulty": "Easy", "description": "You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\n\nSuppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad.\n\nYou are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\n\n**Example 1:**\n\n**Input:** n = 5, bad = 4\n**Output:** 4\n**Explanation:**\ncall isBadVersion(3) -> false\ncall isBadVersion(5) -> true\ncall isBadVersion(4) -> true\nThen 4 is the first bad version.\n\n**Example 2:**\n\n**Input:** n = 1, bad = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= bad <= n <= 231 - 1`"}}
{"283": {"title": "Move Zeroes", "difficulty": "Easy", "description": "Given an integer array `nums`, move all `0`'s to the end of it while maintaining the relative order of the non-zero elements.\n\n**Note** that you must do this in-place without making a copy of the array.\n\n**Example 1:**\n\n**Input:** nums = \\[0,1,0,3,12\\]\n**Output:** \\[1,3,12,0,0\\]\n\n**Example 2:**\n\n**Input:** nums = \\[0\\]\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-231 <= nums[i] <= 231 - 1`\n\n**Follow up:** Could you minimize the total number of operations done?"}}
{"290": {"title": "Word Pattern", "difficulty": "Easy", "description": "Given a `pattern` and a string `s`, find if `s` follows the same pattern.\n\nHere **follow** means a full match, such that there is a bijection between a letter in `pattern` and a **non-empty** word in `s`.\n\n**Example 1:**\n\n**Input:** pattern =  \"abba \", s =  \"dog cat cat dog \"\n**Output:** true\n\n**Example 2:**\n\n**Input:** pattern =  \"abba \", s =  \"dog cat cat fish \"\n**Output:** false\n\n**Example 3:**\n\n**Input:** pattern =  \"aaaa \", s =  \"dog cat cat dog \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= pattern.length <= 300`\n*   `pattern` contains only lower-case English letters.\n*   `1 <= s.length <= 3000`\n*   `s` contains only lowercase English letters and spaces `' '`.\n*   `s` **does not contain** any leading or trailing spaces.\n*   All the words in `s` are separated by a **single space**."}}
{"292": {"title": "Nim Game", "difficulty": "Easy", "description": "You are playing the following Nim Game with your friend:\n\n*   Initially, there is a heap of stones on the table.\n*   You and your friend will alternate taking turns, and **you go first**.\n*   On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\n*   The one who removes the last stone is the winner.\n\nGiven `n`, the number of stones in the heap, return `true` _if you can win the game assuming both you and your friend play optimally, otherwise return_ `false`.\n\n**Example 1:**\n\n**Input:** n = 4\n**Output:** false\n**Explanation:** These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** true\n\n**Example 3:**\n\n**Input:** n = 2\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= n <= 231 - 1`"}}
{"293": {"title": "Flip Game", "difficulty": "Easy", "description": "You are playing a Flip Game with your friend.\n\nYou are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip **two consecutive** `\"++ \"` into `\"-- \"`. The game ends when a person can no longer make a move, and therefore the other person will be the winner.\n\nReturn all possible states of the string `currentState` after **one valid move**. You may return the answer in **any order**. If there is no valid move, return an empty list `[]`.\n\n**Example 1:**\n\n**Input:** currentState =  \"++++ \"\n**Output:** \\[ \"--++ \", \"+--+ \", \"++-- \"\\]\n\n**Example 2:**\n\n**Input:** currentState =  \"+ \"\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `1 <= currentState.length <= 500`\n*   `currentState[i]` is either `'+'` or `'-'`."}}
{"303": {"title": "Range Sum Query - Immutable", "difficulty": "Easy", "description": "Given an integer array `nums`, handle multiple queries of the following type:\n\n1.  Calculate the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** where `left <= right`.\n\nImplement the `NumArray` class:\n\n*   `NumArray(int[] nums)` Initializes the object with the integer array `nums`.\n*   `int sumRange(int left, int right)` Returns the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`).\n\n**Example 1:**\n\n**Input**\n\\[ \"NumArray \",  \"sumRange \",  \"sumRange \",  \"sumRange \"\\]\n\\[\\[\\[-2, 0, 3, -5, 2, -1\\]\\], \\[0, 2\\], \\[2, 5\\], \\[0, 5\\]\\]\n**Output**\n\\[null, 1, -1, -3\\]\n\n**Explanation**\nNumArray numArray = new NumArray(\\[-2, 0, 3, -5, 2, -1\\]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-105 <= nums[i] <= 105`\n*   `0 <= left <= right < nums.length`\n*   At most `104` calls will be made to `sumRange`."}}
{"326": {"title": "Power of Three", "difficulty": "Easy", "description": "Given an integer `n`, return _`true` if it is a power of three. Otherwise, return `false`_.\n\nAn integer `n` is a power of three, if there exists an integer `x` such that `n == 3x`.\n\n**Example 1:**\n\n**Input:** n = 27\n**Output:** true\n**Explanation:** 27 = 33\n\n**Example 2:**\n\n**Input:** n = 0\n**Output:** false\n**Explanation:** There is no x where 3x = 0.\n\n**Example 3:**\n\n**Input:** n = -1\n**Output:** false\n**Explanation:** There is no x where 3x = (-1).\n\n**Constraints:**\n\n*   `-231 <= n <= 231 - 1`\n\n**Follow up:** Could you solve it without loops/recursion?"}}
{"338": {"title": "Counting Bits", "difficulty": "Easy", "description": "Given an integer `n`, return _an array_ `ans` _of length_ `n + 1` _such that for each_ `i` (`0 <= i <= n`)_,_ `ans[i]` _is the **number of**_ `1`_**'s** in the binary representation of_ `i`.\n\n**Example 1:**\n\n**Input:** n = 2\n**Output:** \\[0,1,1\\]\n**Explanation:**\n0 --> 0\n1 --> 1\n2 --> 10\n\n**Example 2:**\n\n**Input:** n = 5\n**Output:** \\[0,1,1,2,1,2\\]\n**Explanation:**\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101\n\n**Constraints:**\n\n*   `0 <= n <= 105`\n\n**Follow up:**\n\n*   It is very easy to come up with a solution with a runtime of `O(n log n)`. Can you do it in linear time `O(n)` and possibly in a single pass?\n*   Can you do it without using any built-in function (i.e., like `__builtin_popcount` in C++)?"}}
{"342": {"title": "Power of Four", "difficulty": "Easy", "description": "Given an integer `n`, return _`true` if it is a power of four. Otherwise, return `false`_.\n\nAn integer `n` is a power of four, if there exists an integer `x` such that `n == 4x`.\n\n**Example 1:**\n\n**Input:** n = 16\n**Output:** true\n\n**Example 2:**\n\n**Input:** n = 5\n**Output:** false\n\n**Example 3:**\n\n**Input:** n = 1\n**Output:** true\n\n**Constraints:**\n\n*   `-231 <= n <= 231 - 1`\n\n**Follow up:** Could you solve it without loops/recursion?"}}
{"344": {"title": "Reverse String", "difficulty": "Easy", "description": "Write a function that reverses a string. The input string is given as an array of characters `s`.\n\nYou must do this by modifying the input array [in-place](https://en.wikipedia.org/wiki/In-place_algorithm) with `O(1)` extra memory.\n\n**Example 1:**\n\n**Input:** s = \\[\"h\",\"e\",\"l\",\"l\",\"o\"\\]\n**Output:** \\[\"o\",\"l\",\"l\",\"e\",\"h\"\\]\n\n**Example 2:**\n\n**Input:** s = \\[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"\\]\n**Output:** \\[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is a [printable ascii character](https://en.wikipedia.org/wiki/ASCII#Printable_characters)."}}
{"345": {"title": "Reverse Vowels of a String", "difficulty": "Easy", "description": "Given a string `s`, reverse only all the vowels in the string and return it.\n\nThe vowels are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`, and they can appear in both lower and upper cases, more than once.\n\n**Example 1:**\n\n**Input:** s = \"hello\"\n**Output:** \"holle\"\n\n**Example 2:**\n\n**Input:** s = \"leetcode\"\n**Output:** \"leotcede\"\n\n**Constraints:**\n\n*   `1 <= s.length <= 3 * 105`\n*   `s` consist of **printable ASCII** characters."}}
{"346": {"title": "Moving Average from Data Stream", "difficulty": "Easy", "description": "Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.\n\nImplement the `MovingAverage` class:\n\n*   `MovingAverage(int size)` Initializes the object with the size of the window `size`.\n*   `double next(int val)` Returns the moving average of the last `size` values of the stream.\n\n**Example 1:**\n\n**Input**\n\\[ \"MovingAverage \",  \"next \",  \"next \",  \"next \",  \"next \"\\]\n\\[\\[3\\], \\[1\\], \\[10\\], \\[3\\], \\[5\\]\\]\n**Output**\n\\[null, 1.0, 5.5, 4.66667, 6.0\\]\n\n**Explanation**\nMovingAverage movingAverage = new MovingAverage(3);\nmovingAverage.next(1); // return 1.0 = 1 / 1\nmovingAverage.next(10); // return 5.5 = (1 + 10) / 2\nmovingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3\nmovingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3\n\n**Constraints:**\n\n*   `1 <= size <= 1000`\n*   `-105 <= val <= 105`\n*   At most `104` calls will be made to `next`."}}
{"349": {"title": "Intersection of Two Arrays", "difficulty": "Easy", "description": "Given two integer arrays `nums1` and `nums2`, return _an array of their intersection_. Each element in the result must be **unique** and you may return the result in **any order**.\n\n**Example 1:**\n\n**Input:** nums1 = \\[1,2,2,1\\], nums2 = \\[2,2\\]\n**Output:** \\[2\\]\n\n**Example 2:**\n\n**Input:** nums1 = \\[4,9,5\\], nums2 = \\[9,4,9,8,4\\]\n**Output:** \\[9,4\\]\n**Explanation:** \\[4,9\\] is also accepted.\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 1000`\n*   `0 <= nums1[i], nums2[i] <= 1000`"}}
{"350": {"title": "Intersection of Two Arrays II", "difficulty": "Easy", "description": "Given two integer arrays `nums1` and `nums2`, return _an array of their intersection_. Each element in the result must appear as many times as it shows in both arrays and you may return the result in **any order**.\n\n**Example 1:**\n\n**Input:** nums1 = \\[1,2,2,1\\], nums2 = \\[2,2\\]\n**Output:** \\[2,2\\]\n\n**Example 2:**\n\n**Input:** nums1 = \\[4,9,5\\], nums2 = \\[9,4,9,8,4\\]\n**Output:** \\[4,9\\]\n**Explanation:** \\[9,4\\] is also accepted.\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 1000`\n*   `0 <= nums1[i], nums2[i] <= 1000`\n\n**Follow up:**\n\n*   What if the given array is already sorted? How would you optimize your algorithm?\n*   What if `nums1`'s size is small compared to `nums2`'s size? Which algorithm is better?\n*   What if elements of `nums2` are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?"}}
{"359": {"title": "Logger Rate Limiter", "difficulty": "Easy", "description": "Design a logger system that receives a stream of messages along with their timestamps. Each **unique** message should only be printed **at most every 10 seconds** (i.e. a message printed at timestamp `t` will prevent other identical messages from being printed until timestamp `t + 10`).\n\nAll messages will come in chronological order. Several messages may arrive at the same timestamp.\n\nImplement the `Logger` class:\n\n*   `Logger()` Initializes the `logger` object.\n*   `bool shouldPrintMessage(int timestamp, string message)` Returns `true` if the `message` should be printed in the given `timestamp`, otherwise returns `false`.\n\n**Example 1:**\n\n**Input**\n\\[ \"Logger \",  \"shouldPrintMessage \",  \"shouldPrintMessage \",  \"shouldPrintMessage \",  \"shouldPrintMessage \",  \"shouldPrintMessage \",  \"shouldPrintMessage \"\\]\n\\[\\[\\], \\[1,  \"foo \"\\], \\[2,  \"bar \"\\], \\[3,  \"foo \"\\], \\[8,  \"bar \"\\], \\[10,  \"foo \"\\], \\[11,  \"foo \"\\]\\]\n**Output**\n\\[null, true, true, false, false, false, true\\]\n\n**Explanation**\nLogger logger = new Logger();\nlogger.shouldPrintMessage(1,  \"foo \");  // return true, next allowed timestamp for  \"foo \" is 1 + 10 = 11\nlogger.shouldPrintMessage(2,  \"bar \");  // return true, next allowed timestamp for  \"bar \" is 2 + 10 = 12\nlogger.shouldPrintMessage(3,  \"foo \");  // 3 < 11, return false\nlogger.shouldPrintMessage(8,  \"bar \");  // 8 < 12, return false\nlogger.shouldPrintMessage(10,  \"foo \"); // 10 < 11, return false\nlogger.shouldPrintMessage(11,  \"foo \"); // 11 >= 11, return true, next allowed timestamp for  \"foo \" is 11 + 10 = 21\n\n**Constraints:**\n\n*   `0 <= timestamp <= 109`\n*   Every `timestamp` will be passed in non-decreasing order (chronological order).\n*   `1 <= message.length <= 30`\n*   At most `104` calls will be made to `shouldPrintMessage`."}}
{"367": {"title": "Valid Perfect Square", "difficulty": "Easy", "description": "Given a positive integer num, return `true` _if_ `num` _is a perfect square or_ `false` _otherwise_.\n\nA **perfect square** is an integer that is the square of an integer. In other words, it is the product of some integer with itself.\n\nYou must not use any built-in library function, such as `sqrt`.\n\n**Example 1:**\n\n**Input:** num = 16\n**Output:** true\n**Explanation:** We return true because 4 \\* 4 = 16 and 4 is an integer.\n\n**Example 2:**\n\n**Input:** num = 14\n**Output:** false\n**Explanation:** We return false because 3.742 \\* 3.742 = 14 and 3.742 is not an integer.\n\n**Constraints:**\n\n*   `1 <= num <= 231 - 1`"}}
{"374": {"title": "Guess Number Higher or Lower", "difficulty": "Easy", "description": "We are playing the Guess Game. The game is as follows:\n\nI pick a number from `1` to `n`. You have to guess which number I picked.\n\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\n\nYou call a pre-defined API `int guess(int num)`, which returns three possible results:\n\n*   `-1`: Your guess is higher than the number I picked (i.e. `num > pick`).\n*   `1`: Your guess is lower than the number I picked (i.e. `num < pick`).\n*   `0`: your guess is equal to the number I picked (i.e. `num == pick`).\n\nReturn _the number that I picked_.\n\n**Example 1:**\n\n**Input:** n = 10, pick = 6\n**Output:** 6\n\n**Example 2:**\n\n**Input:** n = 1, pick = 1\n**Output:** 1\n\n**Example 3:**\n\n**Input:** n = 2, pick = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= n <= 231 - 1`\n*   `1 <= pick <= n`"}}
{"383": {"title": "Ransom Note", "difficulty": "Easy", "description": "Given two strings `ransomNote` and `magazine`, return `true` _if_ `ransomNote` _can be constructed by using the letters from_ `magazine` _and_ `false` _otherwise_.\n\nEach letter in `magazine` can only be used once in `ransomNote`.\n\n**Example 1:**\n\n**Input:** ransomNote = \"a\", magazine = \"b\"\n**Output:** false\n\n**Example 2:**\n\n**Input:** ransomNote = \"aa\", magazine = \"ab\"\n**Output:** false\n\n**Example 3:**\n\n**Input:** ransomNote = \"aa\", magazine = \"aab\"\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= ransomNote.length, magazine.length <= 105`\n*   `ransomNote` and `magazine` consist of lowercase English letters."}}
{"387": {"title": "First Unique Character in a String", "difficulty": "Easy", "description": "Given a string `s`, _find the first non-repeating character in it and return its index_. If it does not exist, return `-1`.\n\n**Example 1:**\n\n**Input:** s = \"leetcode\"\n**Output:** 0\n\n**Example 2:**\n\n**Input:** s = \"loveleetcode\"\n**Output:** 2\n\n**Example 3:**\n\n**Input:** s = \"aabb\"\n**Output:** -1\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of only lowercase English letters."}}
{"389": {"title": "Find the Difference", "difficulty": "Easy", "description": "You are given two strings `s` and `t`.\n\nString `t` is generated by random shuffling string `s` and then add one more letter at a random position.\n\nReturn the letter that was added to `t`.\n\n**Example 1:**\n\n**Input:** s =  \"abcd \", t =  \"abcde \"\n**Output:**  \"e \"\n**Explanation:** 'e' is the letter that was added.\n\n**Example 2:**\n\n**Input:** s =  \" \", t =  \"y \"\n**Output:**  \"y \"\n\n**Constraints:**\n\n*   `0 <= s.length <= 1000`\n*   `t.length == s.length + 1`\n*   `s` and `t` consist of lowercase English letters."}}
{"392": {"title": "Is Subsequence", "difficulty": "Easy", "description": "Given two strings `s` and `t`, return `true` _if_ `s` _is a **subsequence** of_ `t`_, or_ `false` _otherwise_.\n\nA **subsequence** of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `\"ace \"` is a subsequence of `\"abcde \"` while `\"aec \"` is not).\n\n**Example 1:**\n\n**Input:** s = \"abc\", t = \"ahbgdc\"\n**Output:** true\n\n**Example 2:**\n\n**Input:** s = \"axc\", t = \"ahbgdc\"\n**Output:** false\n\n**Constraints:**\n\n*   `0 <= s.length <= 100`\n*   `0 <= t.length <= 104`\n*   `s` and `t` consist only of lowercase English letters.\n\n**Follow up:** Suppose there are lots of incoming `s`, say `s1, s2, ..., sk` where `k >= 109`, and you want to check one by one to see if `t` has its subsequence. In this scenario, how would you change your code?"}}
{"401": {"title": "Binary Watch", "difficulty": "Easy", "description": "A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\n\n*   For example, the below binary watch reads `\"4:51 \"`.\n\nGiven an integer `turnedOn` which represents the number of LEDs that are currently on (ignoring the PM), return _all possible times the watch could represent_. You may return the answer in **any order**.\n\nThe hour must not contain a leading zero.\n\n*   For example, `\"01:00 \"` is not valid. It should be `\"1:00 \"`.\n\nThe minute must be consist of two digits and may contain a leading zero.\n\n*   For example, `\"10:2 \"` is not valid. It should be `\"10:02 \"`.\n\n**Example 1:**\n\n**Input:** turnedOn = 1\n**Output:** \\[\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"\\]\n\n**Example 2:**\n\n**Input:** turnedOn = 9\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `0 <= turnedOn <= 10`"}}
{"404": {"title": "Sum of Left Leaves", "difficulty": "Easy", "description": "Given the `root` of a binary tree, return _the sum of all left leaves._\n\nA **leaf** is a node with no children. A **left leaf** is a leaf that is the left child of another node.\n\n**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** 24\n**Explanation:** There are two left leaves in the binary tree, with values 9 and 15 respectively.\n\n**Example 2:**\n\n**Input:** root = \\[1\\]\n**Output:** 0\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 1000]`.\n*   `-1000 <= Node.val <= 1000`"}}
{"405": {"title": "Convert a Number to Hexadecimal", "difficulty": "Easy", "description": "Given an integer `num`, return _a string representing its hexadecimal representation_. For negative integers, [two's complement](https://en.wikipedia.org/wiki/Two%27s_complement) method is used.\n\nAll the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\n\n**Note:** You are not allowed to use any built-in library method to directly solve this problem.\n\n**Example 1:**\n\n**Input:** num = 26\n**Output:** \"1a\"\n\n**Example 2:**\n\n**Input:** num = -1\n**Output:** \"ffffffff\"\n\n**Constraints:**\n\n*   `-231 <= num <= 231 - 1`"}}
{"408": {"title": "Valid Word Abbreviation", "difficulty": "Easy", "description": "A string can be **abbreviated** by replacing any number of **non-adjacent**, **non-empty** substrings with their lengths. The lengths **should not** have leading zeros.\n\nFor example, a string such as `\"substitution \"` could be abbreviated as (but not limited to):\n\n*   `\"s10n \"` ( `\"s ubstitutio n \"`)\n*   `\"sub4u4 \"` ( `\"sub stit u tion \"`)\n*   `\"12 \"` ( `\"substitution \"`)\n*   `\"su3i1u2on \"` ( `\"su bst i t u ti on \"`)\n*   `\"substitution \"` (no substrings replaced)\n\nThe following are **not valid** abbreviations:\n\n*   `\"s55n \"` ( `\"s ubsti tutio n \"`, the replaced substrings are adjacent)\n*   `\"s010n \"` (has leading zeros)\n*   `\"s0ubstitution \"` (replaces an empty substring)\n\nGiven a string `word` and an abbreviation `abbr`, return _whether the string **matches** the given abbreviation_.\n\nA **substring** is a contiguous **non-empty** sequence of characters within a string.\n\n**Example 1:**\n\n**Input:** word =  \"internationalization \", abbr =  \"i12iz4n \"\n**Output:** true\n**Explanation:** The word  \"internationalization \" can be abbreviated as  \"i12iz4n \" ( \"i nternational iz atio n \").\n\n**Example 2:**\n\n**Input:** word =  \"apple \", abbr =  \"a2e \"\n**Output:** false\n**Explanation:** The word  \"apple \" cannot be abbreviated as  \"a2e \".\n\n**Constraints:**\n\n*   `1 <= word.length <= 20`\n*   `word` consists of only lowercase English letters.\n*   `1 <= abbr.length <= 10`\n*   `abbr` consists of lowercase English letters and digits.\n*   All the integers in `abbr` will fit in a 32-bit integer."}}
{"409": {"title": "Longest Palindrome", "difficulty": "Easy", "description": "Given a string `s` which consists of lowercase or uppercase letters, return _the length of the **longest palindrome**_ that can be built with those letters.\n\nLetters are **case sensitive**, for example, `\"Aa \"` is not considered a palindrome here.\n\n**Example 1:**\n\n**Input:** s =  \"abccccdd \"\n**Output:** 7\n**Explanation:** One longest palindrome that can be built is  \"dccaccd \", whose length is 7.\n\n**Example 2:**\n\n**Input:** s =  \"a \"\n**Output:** 1\n**Explanation:** The longest palindrome that can be built is  \"a \", whose length is 1.\n\n**Constraints:**\n\n*   `1 <= s.length <= 2000`\n*   `s` consists of lowercase **and/or** uppercase English letters only."}}
{"412": {"title": "Fizz Buzz", "difficulty": "Easy", "description": "Given an integer `n`, return _a string array_ `answer` _(**1-indexed**) where_:\n\n*   `answer[i] == \"FizzBuzz \"` if `i` is divisible by `3` and `5`.\n*   `answer[i] == \"Fizz \"` if `i` is divisible by `3`.\n*   `answer[i] == \"Buzz \"` if `i` is divisible by `5`.\n*   `answer[i] == i` (as a string) if none of the above conditions are true.\n\n**Example 1:**\n\n**Input:** n = 3\n**Output:** \\[\"1\",\"2\",\"Fizz\"\\]\n\n**Example 2:**\n\n**Input:** n = 5\n**Output:** \\[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"\\]\n\n**Example 3:**\n\n**Input:** n = 15\n**Output:** \\[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"\\]\n\n**Constraints:**\n\n*   `1 <= n <= 104`"}}
{"414": {"title": "Third Maximum Number", "difficulty": "Easy", "description": "Given an integer array `nums`, return _the **third distinct maximum** number in this array. If the third maximum does not exist, return the **maximum** number_.\n\n**Example 1:**\n\n**Input:** nums = \\[3,2,1\\]\n**Output:** 1\n**Explanation:**\nThe first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2\\]\n**Output:** 2\n**Explanation:**\nThe first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.\n\n**Example 3:**\n\n**Input:** nums = \\[2,2,3,1\\]\n**Output:** 1\n**Explanation:**\nThe first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\nThe third distinct maximum is 1.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-231 <= nums[i] <= 231 - 1`\n\n**Follow up:** Can you find an `O(n)` solution?"}}
{"415": {"title": "Add Strings", "difficulty": "Easy", "description": "Given two non-negative integers, `num1` and `num2` represented as string, return _the sum of_ `num1` _and_ `num2` _as a string_.\n\nYou must solve the problem without using any built-in library for handling large integers (such as `BigInteger`). You must also not convert the inputs to integers directly.\n\n**Example 1:**\n\n**Input:** num1 =  \"11 \", num2 =  \"123 \"\n**Output:**  \"134 \"\n\n**Example 2:**\n\n**Input:** num1 =  \"456 \", num2 =  \"77 \"\n**Output:**  \"533 \"\n\n**Example 3:**\n\n**Input:** num1 =  \"0 \", num2 =  \"0 \"\n**Output:**  \"0 \"\n\n**Constraints:**\n\n*   `1 <= num1.length, num2.length <= 104`\n*   `num1` and `num2` consist of only digits.\n*   `num1` and `num2` don't have any leading zeros except for the zero itself."}}
{"422": {"title": "Valid Word Square", "difficulty": "Easy", "description": "Given an array of strings `words`, return `true` _if it forms a valid **word square**_.\n\nA sequence of strings forms a valid **word square** if the `kth` row and column read the same string, where `0 <= k < max(numRows, numColumns)`.\n\n**Example 1:**\n\n**Input:** words = \\[ \"abcd \", \"bnrt \", \"crmy \", \"dtye \"\\]\n**Output:** true\n**Explanation:**\nThe 1st row and 1st column both read  \"abcd \".\nThe 2nd row and 2nd column both read  \"bnrt \".\nThe 3rd row and 3rd column both read  \"crmy \".\nThe 4th row and 4th column both read  \"dtye \".\nTherefore, it is a valid word square.\n\n**Example 2:**\n\n**Input:** words = \\[ \"abcd \", \"bnrt \", \"crm \", \"dt \"\\]\n**Output:** true\n**Explanation:**\nThe 1st row and 1st column both read  \"abcd \".\nThe 2nd row and 2nd column both read  \"bnrt \".\nThe 3rd row and 3rd column both read  \"crm \".\nThe 4th row and 4th column both read  \"dt \".\nTherefore, it is a valid word square.\n\n**Example 3:**\n\n**Input:** words = \\[ \"ball \", \"area \", \"read \", \"lady \"\\]\n**Output:** false\n**Explanation:**\nThe 3rd row reads  \"read \" while the 3rd column reads  \"lead \".\nTherefore, it is NOT a valid word square.\n\n**Constraints:**\n\n*   `1 <= words.length <= 500`\n*   `1 <= words[i].length <= 500`\n*   `words[i]` consists of only lowercase English letters."}}
{"434": {"title": "Number of Segments in a String", "difficulty": "Easy", "description": "Given a string `s`, return _the number of segments in the string_.\n\nA **segment** is defined to be a contiguous sequence of **non-space characters**.\n\n**Example 1:**\n\n**Input:** s =  \"Hello, my name is John \"\n**Output:** 5\n**Explanation:** The five segments are \\[ \"Hello, \",  \"my \",  \"name \",  \"is \",  \"John \"\\]\n\n**Example 2:**\n\n**Input:** s =  \"Hello \"\n**Output:** 1\n\n**Constraints:**\n\n*   `0 <= s.length <= 300`\n*   `s` consists of lowercase and uppercase English letters, digits, or one of the following characters `\"!@#$%^&*()_+-=',.: \"`.\n*   The only space character in `s` is `' '`."}}
{"441": {"title": "Arranging Coins", "difficulty": "Easy", "description": "You have `n` coins and you want to build a staircase with these coins. The staircase consists of `k` rows where the `ith` row has exactly `i` coins. The last row of the staircase **may be** incomplete.\n\nGiven the integer `n`, return _the number of **complete rows** of the staircase you will build_.\n\n**Example 1:**\n\n**Input:** n = 5\n**Output:** 2\n**Explanation:** Because the 3rd row is incomplete, we return 2.\n\n**Example 2:**\n\n**Input:** n = 8\n**Output:** 3\n**Explanation:** Because the 4th row is incomplete, we return 3.\n\n**Constraints:**\n\n*   `1 <= n <= 231 - 1`"}}
{"448": {"title": "Find All Numbers Disappeared in an Array", "difficulty": "Easy", "description": "Given an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return _an array of all the integers in the range_ `[1, n]` _that do not appear in_ `nums`.\n\n**Example 1:**\n\n**Input:** nums = \\[4,3,2,7,8,2,3,1\\]\n**Output:** \\[5,6\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1,1\\]\n**Output:** \\[2\\]\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 105`\n*   `1 <= nums[i] <= n`\n\n**Follow up:** Could you do it without extra space and in `O(n)` runtime? You may assume the returned list does not count as extra space."}}
{"455": {"title": "Assign Cookies", "difficulty": "Easy", "description": "Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\n\nEach child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to the child `i`, and the child `i` will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\n**Example 1:**\n\n**Input:** g = \\[1,2,3\\], s = \\[1,1\\]\n**Output:** 1\n**Explanation:** You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n\n**Example 2:**\n\n**Input:** g = \\[1,2\\], s = \\[1,2,3\\]\n**Output:** 2\n**Explanation:** You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\n\n**Constraints:**\n\n*   `1 <= g.length <= 3 * 104`\n*   `0 <= s.length <= 3 * 104`\n*   `1 <= g[i], s[j] <= 231 - 1`"}}
{"459": {"title": "Repeated Substring Pattern", "difficulty": "Easy", "description": "Given a string `s`, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\n\n**Example 1:**\n\n**Input:** s =  \"abab \"\n**Output:** true\n**Explanation:** It is the substring  \"ab \" twice.\n\n**Example 2:**\n\n**Input:** s =  \"aba \"\n**Output:** false\n\n**Example 3:**\n\n**Input:** s =  \"abcabcabcabc \"\n**Output:** true\n**Explanation:** It is the substring  \"abc \" four times or the substring  \"abcabc \" twice.\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s` consists of lowercase English letters."}}
{"461": {"title": "Hamming Distance", "difficulty": "Easy", "description": "The [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between two integers is the number of positions at which the corresponding bits are different.\n\nGiven two integers `x` and `y`, return _the **Hamming distance** between them_.\n\n**Example 1:**\n\n**Input:** x = 1, y = 4\n**Output:** 2\n**Explanation:**\n1   (0 0 0 1)\n4   (0 1 0 0)\n       ↑   ↑\nThe above arrows point to positions where the corresponding bits are different.\n\n**Example 2:**\n\n**Input:** x = 3, y = 1\n**Output:** 1\n\n**Constraints:**\n\n*   `0 <= x, y <= 231 - 1`"}}
{"463": {"title": "Island Perimeter", "difficulty": "Easy", "description": "You are given `row x col` `grid` representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water.\n\nGrid cells are connected **horizontally/vertically** (not diagonally). The `grid` is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\n\nThe island doesn't have \"lakes \", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.\n\n**Example 1:**\n\n**Input:** grid = \\[\\[0,1,0,0\\],\\[1,1,1,0\\],\\[0,1,0,0\\],\\[1,1,0,0\\]\\]\n**Output:** 16\n**Explanation:** The perimeter is the 16 yellow stripes in the image above.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1\\]\\]\n**Output:** 4\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,0\\]\\]\n**Output:** 4\n\n**Constraints:**\n\n*   `row == grid.length`\n*   `col == grid[i].length`\n*   `1 <= row, col <= 100`\n*   `grid[i][j]` is `0` or `1`.\n*   There is exactly one island in `grid`."}}
{"476": {"title": "Number Complement", "difficulty": "Easy", "description": "The **complement** of an integer is the integer you get when you flip all the `0`'s to `1`'s and all the `1`'s to `0`'s in its binary representation.\n\n*   For example, The integer `5` is `\"101 \"` in binary and its **complement** is `\"010 \"` which is the integer `2`.\n\nGiven an integer `num`, return _its complement_.\n\n**Example 1:**\n\n**Input:** num = 5\n**Output:** 2\n**Explanation:** The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n\n**Example 2:**\n\n**Input:** num = 1\n**Output:** 0\n**Explanation:** The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n\n**Constraints:**\n\n*   `1 <= num < 231`\n\n**Note:** This question is the same as 1009: [https://leetcode.com/problems/complement-of-base-10-integer/](https://leetcode.com/problems/complement-of-base-10-integer/)"}}
{"482": {"title": "License Key Formatting", "difficulty": "Easy", "description": "You are given a license key represented as a string `s` that consists of only alphanumeric characters and dashes. The string is separated into `n + 1` groups by `n` dashes. You are also given an integer `k`.\n\nWe want to reformat the string `s` such that each group contains exactly `k` characters, except for the first group, which could be shorter than `k` but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.\n\nReturn _the reformatted license key_.\n\n**Example 1:**\n\n**Input:** s =  \"5F3Z-2e-9-w \", k = 4\n**Output:**  \"5F3Z-2E9W \"\n**Explanation:** The string s has been split into two parts, each part has 4 characters.\nNote that the two extra dashes are not needed and can be removed.\n\n**Example 2:**\n\n**Input:** s =  \"2-5g-3-J \", k = 2\n**Output:**  \"2-5G-3J \"\n**Explanation:** The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of English letters, digits, and dashes `'-'`.\n*   `1 <= k <= 104`"}}
{"485": {"title": "Max Consecutive Ones", "difficulty": "Easy", "description": "Given a binary array `nums`, return _the maximum number of consecutive_ `1`_'s in the array_.\n\n**Example 1:**\n\n**Input:** nums = \\[1,1,0,1,1,1\\]\n**Output:** 3\n**Explanation:** The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\n\n**Example 2:**\n\n**Input:** nums = \\[1,0,1,1,0,1\\]\n**Output:** 2\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `nums[i]` is either `0` or `1`."}}
{"492": {"title": "Construct the Rectangle", "difficulty": "Easy", "description": "A web developer needs to know how to design a web page's size. So, given a specific rectangular web page's area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\n\n1.  The area of the rectangular web page you designed must equal to the given target area.\n2.  The width `W` should not be larger than the length `L`, which means `L >= W`.\n3.  The difference between length `L` and width `W` should be as small as possible.\n\nReturn _an array `[L, W]` where `L` and `W` are the length and width of the web page you designed in sequence._\n\n**Example 1:**\n\n**Input:** area = 4\n**Output:** \\[2,2\\]\n**Explanation:** The target area is 4, and all the possible ways to construct it are \\[1,4\\], \\[2,2\\], \\[4,1\\]. \nBut according to requirement 2, \\[1,4\\] is illegal; according to requirement 3,  \\[4,1\\] is not optimal compared to \\[2,2\\]. So the length L is 2, and the width W is 2.\n\n**Example 2:**\n\n**Input:** area = 37\n**Output:** \\[37,1\\]\n\n**Example 3:**\n\n**Input:** area = 122122\n**Output:** \\[427,286\\]\n\n**Constraints:**\n\n*   `1 <= area <= 107`"}}
{"495": {"title": "Teemo Attacking", "difficulty": "Easy", "description": "Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly `duration` seconds. More formally, an attack at second `t` will mean Ashe is poisoned during the **inclusive** time interval `[t, t + duration - 1]`. If Teemo attacks again **before** the poison effect ends, the timer for it is **reset**, and the poison effect will end `duration` seconds after the new attack.\n\nYou are given a **non-decreasing** integer array `timeSeries`, where `timeSeries[i]` denotes that Teemo attacks Ashe at second `timeSeries[i]`, and an integer `duration`.\n\nReturn _the **total** number of seconds that Ashe is poisoned_.\n\n**Example 1:**\n\n**Input:** timeSeries = \\[1,4\\], duration = 2\n**Output:** 4\n**Explanation:** Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.\n\n**Example 2:**\n\n**Input:** timeSeries = \\[1,2\\], duration = 2\n**Output:** 3\n**Explanation:** Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.\n\n**Constraints:**\n\n*   `1 <= timeSeries.length <= 104`\n*   `0 <= timeSeries[i], duration <= 107`\n*   `timeSeries` is sorted in **non-decreasing** order."}}
{"496": {"title": "Next Greater Element I", "difficulty": "Easy", "description": "The **next greater element** of some element `x` in an array is the **first greater** element that is **to the right** of `x` in the same array.\n\nYou are given two **distinct 0-indexed** integer arrays `nums1` and `nums2`, where `nums1` is a subset of `nums2`.\n\nFor each `0 <= i < nums1.length`, find the index `j` such that `nums1[i] == nums2[j]` and determine the **next greater element** of `nums2[j]` in `nums2`. If there is no next greater element, then the answer for this query is `-1`.\n\nReturn _an array_ `ans` _of length_ `nums1.length` _such that_ `ans[i]` _is the **next greater element** as described above._\n\n**Example 1:**\n\n**Input:** nums1 = \\[4,1,2\\], nums2 = \\[1,3,4,2\\]\n**Output:** \\[-1,3,-1\\]\n**Explanation:** The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = \\[1,3,4,2\\]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = \\[1,3,4,2\\]. The next greater element is 3.\n- 2 is underlined in nums2 = \\[1,3,4,2\\]. There is no next greater element, so the answer is -1.\n\n**Example 2:**\n\n**Input:** nums1 = \\[2,4\\], nums2 = \\[1,2,3,4\\]\n**Output:** \\[3,-1\\]\n**Explanation:** The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = \\[1,2,3,4\\]. The next greater element is 3.\n- 4 is underlined in nums2 = \\[1,2,3,4\\]. There is no next greater element, so the answer is -1.\n\n**Constraints:**\n\n*   `1 <= nums1.length <= nums2.length <= 1000`\n*   `0 <= nums1[i], nums2[i] <= 104`\n*   All integers in `nums1` and `nums2` are **unique**.\n*   All the integers of `nums1` also appear in `nums2`.\n\n**Follow up:** Could you find an `O(nums1.length + nums2.length)` solution?"}}
{"500": {"title": "Keyboard Row", "difficulty": "Easy", "description": "Given an array of strings `words`, return _the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below_.\n\nIn the **American keyboard**:\n\n*   the first row consists of the characters `\"qwertyuiop \"`,\n*   the second row consists of the characters `\"asdfghjkl \"`, and\n*   the third row consists of the characters `\"zxcvbnm \"`.\n\n**Example 1:**\n\n**Input:** words = \\[ \"Hello \", \"Alaska \", \"Dad \", \"Peace \"\\]\n**Output:** \\[ \"Alaska \", \"Dad \"\\]\n\n**Example 2:**\n\n**Input:** words = \\[ \"omk \"\\]\n**Output:** \\[\\]\n\n**Example 3:**\n\n**Input:** words = \\[ \"adsdf \", \"sfd \"\\]\n**Output:** \\[ \"adsdf \", \"sfd \"\\]\n\n**Constraints:**\n\n*   `1 <= words.length <= 20`\n*   `1 <= words[i].length <= 100`\n*   `words[i]` consists of English letters (both lowercase and uppercase)."}}
{"501": {"title": "Find Mode in Binary Search Tree", "difficulty": "Easy", "description": "Given the `root` of a binary search tree (BST) with duplicates, return _all the [mode(s)](https://en.wikipedia.org/wiki/Mode_(statistics)) (i.e., the most frequently occurred element) in it_.\n\nIf the tree has more than one mode, return them in **any order**.\n\nAssume a BST is defined as follows:\n\n*   The left subtree of a node contains only nodes with keys **less than or equal to** the node's key.\n*   The right subtree of a node contains only nodes with keys **greater than or equal to** the node's key.\n*   Both the left and right subtrees must also be binary search trees.\n\n**Example 1:**\n\n**Input:** root = \\[1,null,2,2\\]\n**Output:** \\[2\\]\n\n**Example 2:**\n\n**Input:** root = \\[0\\]\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-105 <= Node.val <= 105`\n\n**Follow up:** Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count)."}}
{"504": {"title": "Base 7", "difficulty": "Easy", "description": "Given an integer `num`, return _a string of its **base 7** representation_.\n\n**Example 1:**\n\n**Input:** num = 100\n**Output:** \"202\"\n\n**Example 2:**\n\n**Input:** num = -7\n**Output:** \"-10\"\n\n**Constraints:**\n\n*   `-107 <= num <= 107`"}}
{"506": {"title": "Relative Ranks", "difficulty": "Easy", "description": "You are given an integer array `score` of size `n`, where `score[i]` is the score of the `ith` athlete in a competition. All the scores are guaranteed to be **unique**.\n\nThe athletes are **placed** based on their scores, where the `1st` place athlete has the highest score, the `2nd` place athlete has the `2nd` highest score, and so on. The placement of each athlete determines their rank:\n\n*   The `1st` place athlete's rank is `\"Gold Medal \"`.\n*   The `2nd` place athlete's rank is `\"Silver Medal \"`.\n*   The `3rd` place athlete's rank is `\"Bronze Medal \"`.\n*   For the `4th` place to the `nth` place athlete, their rank is their placement number (i.e., the `xth` place athlete's rank is `\"x \"`).\n\nReturn an array `answer` of size `n` where `answer[i]` is the **rank** of the `ith` athlete.\n\n**Example 1:**\n\n**Input:** score = \\[5,4,3,2,1\\]\n**Output:** \\[ \"Gold Medal \", \"Silver Medal \", \"Bronze Medal \", \"4 \", \"5 \"\\]\n**Explanation:** The placements are \\[1st, 2nd, 3rd, 4th, 5th\\].\n\n**Example 2:**\n\n**Input:** score = \\[10,3,8,9,4\\]\n**Output:** \\[ \"Gold Medal \", \"5 \", \"Bronze Medal \", \"Silver Medal \", \"4 \"\\]\n**Explanation:** The placements are \\[1st, 5th, 3rd, 2nd, 4th\\].\n\n**Constraints:**\n\n*   `n == score.length`\n*   `1 <= n <= 104`\n*   `0 <= score[i] <= 106`\n*   All the values in `score` are **unique**."}}
{"507": {"title": "Perfect Number", "difficulty": "Easy", "description": "A [**perfect number**](https://en.wikipedia.org/wiki/Perfect_number) is a **positive integer** that is equal to the sum of its **positive divisors**, excluding the number itself. A **divisor** of an integer `x` is an integer that can divide `x` evenly.\n\nGiven an integer `n`, return `true` _if_ `n` _is a perfect number, otherwise return_ `false`.\n\n**Example 1:**\n\n**Input:** num = 28\n**Output:** true\n**Explanation:** 28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28.\n\n**Example 2:**\n\n**Input:** num = 7\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= num <= 108`"}}
{"509": {"title": "Fibonacci Number", "difficulty": "Easy", "description": "The **Fibonacci numbers**, commonly denoted `F(n)` form a sequence, called the **Fibonacci sequence**, such that each number is the sum of the two preceding ones, starting from `0` and `1`. That is,\n\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.\n\nGiven `n`, calculate `F(n)`.\n\n**Example 1:**\n\n**Input:** n = 2\n**Output:** 1\n**Explanation:** F(2) = F(1) + F(0) = 1 + 0 = 1.\n\n**Example 2:**\n\n**Input:** n = 3\n**Output:** 2\n**Explanation:** F(3) = F(2) + F(1) = 1 + 1 = 2.\n\n**Example 3:**\n\n**Input:** n = 4\n**Output:** 3\n**Explanation:** F(4) = F(3) + F(2) = 2 + 1 = 3.\n\n**Constraints:**\n\n*   `0 <= n <= 30`"}}
{"520": {"title": "Detect Capital", "difficulty": "Easy", "description": "We define the usage of capitals in a word to be right when one of the following cases holds:\n\n*   All letters in this word are capitals, like `\"USA \"`.\n*   All letters in this word are not capitals, like `\"leetcode \"`.\n*   Only the first letter in this word is capital, like `\"Google \"`.\n\nGiven a string `word`, return `true` if the usage of capitals in it is right.\n\n**Example 1:**\n\n**Input:** word = \"USA\"\n**Output:** true\n\n**Example 2:**\n\n**Input:** word = \"FlaG\"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= word.length <= 100`\n*   `word` consists of lowercase and uppercase English letters."}}
{"521": {"title": "Longest Uncommon Subsequence I", "difficulty": "Easy", "description": "Given two strings `a` and `b`, return _the length of the **longest uncommon subsequence** between_ `a` _and_ `b`. If the longest uncommon subsequence does not exist, return `-1`.\n\nAn **uncommon subsequence** between two strings is a string that is a **subsequence of one but not the other**.\n\nA **subsequence** of a string `s` is a string that can be obtained after deleting any number of characters from `s`.\n\n*   For example, `\"abc \"` is a subsequence of `\"aebdc \"` because you can delete the underlined characters in `\"aebdc \"` to get `\"abc \"`. Other subsequences of `\"aebdc \"` include `\"aebdc \"`, `\"aeb \"`, and `\" \"` (empty string).\n\n**Example 1:**\n\n**Input:** a =  \"aba \", b =  \"cdc \"\n**Output:** 3\n**Explanation:** One longest uncommon subsequence is  \"aba \" because  \"aba \" is a subsequence of  \"aba \" but not  \"cdc \".\nNote that  \"cdc \" is also a longest uncommon subsequence.\n\n**Example 2:**\n\n**Input:** a =  \"aaa \", b =  \"bbb \"\n**Output:** 3\n**Explanation:** The longest uncommon subsequences are  \"aaa \" and  \"bbb \".\n\n**Example 3:**\n\n**Input:** a =  \"aaa \", b =  \"aaa \"\n**Output:** -1\n**Explanation:** Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.\n\n**Constraints:**\n\n*   `1 <= a.length, b.length <= 100`\n*   `a` and `b` consist of lower-case English letters."}}
{"530": {"title": "Minimum Absolute Difference in BST", "difficulty": "Easy", "description": "Given the `root` of a Binary Search Tree (BST), return _the minimum absolute difference between the values of any two different nodes in the tree_.\n\n**Example 1:**\n\n**Input:** root = \\[4,2,6,1,3\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** root = \\[1,0,48,null,null,12,49\\]\n**Output:** 1\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[2, 104]`.\n*   `0 <= Node.val <= 105`\n\n**Note:** This question is the same as 783: [https://leetcode.com/problems/minimum-distance-between-bst-nodes/](https://leetcode.com/problems/minimum-distance-between-bst-nodes/)"}}
{"541": {"title": "Reverse String II", "difficulty": "Easy", "description": "Given a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string.\n\nIf there are fewer than `k` characters left, reverse all of them. If there are less than `2k` but greater than or equal to `k` characters, then reverse the first `k` characters and leave the other as original.\n\n**Example 1:**\n\n**Input:** s = \"abcdefg\", k = 2\n**Output:** \"bacdfeg\"\n\n**Example 2:**\n\n**Input:** s = \"abcd\", k = 2\n**Output:** \"bacd\"\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s` consists of only lowercase English letters.\n*   `1 <= k <= 104`"}}
{"543": {"title": "Diameter of Binary Tree", "difficulty": "Easy", "description": "Given the `root` of a binary tree, return _the length of the **diameter** of the tree_.\n\nThe **diameter** of a binary tree is the **length** of the longest path between any two nodes in a tree. This path may or may not pass through the `root`.\n\nThe **length** of a path between two nodes is represented by the number of edges between them.\n\n**Example 1:**\n\n**Input:** root = \\[1,2,3,4,5\\]\n**Output:** 3\n**Explanation:** 3 is the length of the path \\[4,2,1,3\\] or \\[5,2,1,3\\].\n\n**Example 2:**\n\n**Input:** root = \\[1,2\\]\n**Output:** 1\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-100 <= Node.val <= 100`"}}
{"551": {"title": "Student Attendance Record I", "difficulty": "Easy", "description": "You are given a string `s` representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n\n*   `'A'`: Absent.\n*   `'L'`: Late.\n*   `'P'`: Present.\n\nThe student is eligible for an attendance award if they meet **both** of the following criteria:\n\n*   The student was absent (`'A'`) for **strictly** fewer than 2 days **total**.\n*   The student was **never** late (`'L'`) for 3 or more **consecutive** days.\n\nReturn `true` _if the student is eligible for an attendance award, or_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** s =  \"PPALLP \"\n**Output:** true\n**Explanation:** The student has fewer than 2 absences and was never late 3 or more consecutive days.\n\n**Example 2:**\n\n**Input:** s =  \"PPALLL \"\n**Output:** false\n**Explanation:** The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s[i]` is either `'A'`, `'L'`, or `'P'`."}}
{"557": {"title": "Reverse Words in a String III", "difficulty": "Easy", "description": "Given a string `s`, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\n\n**Example 1:**\n\n**Input:** s = \"Let's take LeetCode contest\"\n**Output:** \"s'teL ekat edoCteeL tsetnoc\"\n\n**Example 2:**\n\n**Input:** s = \"God Ding\"\n**Output:** \"doG gniD\"\n\n**Constraints:**\n\n*   `1 <= s.length <= 5 * 104`\n*   `s` contains printable **ASCII** characters.\n*   `s` does not contain any leading or trailing spaces.\n*   There is **at least one** word in `s`.\n*   All the words in `s` are separated by a single space."}}
{"559": {"title": "Maximum Depth of N-ary Tree", "difficulty": "Easy", "description": "Given a n-ary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n\n_Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples)._\n\n**Example 1:**\n\n**Input:** root = \\[1,null,3,2,4,null,5,6\\]\n**Output:** 3\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n**Output:** 5\n\n**Constraints:**\n\n*   The total number of nodes is in the range `[0, 104]`.\n*   The depth of the n-ary tree is less than or equal to `1000`."}}
{"561": {"title": "Array Partition", "difficulty": "Easy", "description": "Given an integer array `nums` of `2n` integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is **maximized**. Return _the maximized sum_.\n\n**Example 1:**\n\n**Input:** nums = \\[1,4,3,2\\]\n**Output:** 4\n**Explanation:** All possible pairings (ignoring the ordering of elements) are:\n1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\nSo the maximum possible sum is 4.\n\n**Example 2:**\n\n**Input:** nums = \\[6,2,6,5,1,2\\]\n**Output:** 9\n**Explanation:** The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.\n\n**Constraints:**\n\n*   `1 <= n <= 104`\n*   `nums.length == 2 * n`\n*   `-104 <= nums[i] <= 104`"}}
{"563": {"title": "Binary Tree Tilt", "difficulty": "Easy", "description": "Given the `root` of a binary tree, return _the sum of every tree node's **tilt**._\n\nThe **tilt** of a tree node is the **absolute difference** between the sum of all left subtree node **values** and all right subtree node **values**. If a node does not have a left child, then the sum of the left subtree node **values** is treated as `0`. The rule is similar if the node does not have a right child.\n\n**Example 1:**\n\n**Input:** root = \\[1,2,3\\]\n**Output:** 1\n**Explanation:** \nTilt of node 2 : |0-0| = 0 (no children)\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\nSum of every tilt : 0 + 0 + 1 = 1\n\n**Example 2:**\n\n**Input:** root = \\[4,2,9,3,5,null,7\\]\n**Output:** 15\n**Explanation:** \nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 5 : |0-0| = 0 (no children)\nTilt of node 7 : |0-0| = 0 (no children)\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15\n\n**Example 3:**\n\n**Input:** root = \\[21,7,14,1,1,2,2,3,3\\]\n**Output:** 9\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `-1000 <= Node.val <= 1000`"}}
{"566": {"title": "Reshape the Matrix", "difficulty": "Easy", "description": "In MATLAB, there is a handy function called `reshape` which can reshape an `m x n` matrix into a new one with a different size `r x c` keeping its original data.\n\nYou are given an `m x n` matrix `mat` and two integers `r` and `c` representing the number of rows and the number of columns of the wanted reshaped matrix.\n\nThe reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\n\nIf the `reshape` operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\n\n**Example 1:**\n\n**Input:** mat = \\[\\[1,2\\],\\[3,4\\]\\], r = 1, c = 4\n**Output:** \\[\\[1,2,3,4\\]\\]\n\n**Example 2:**\n\n**Input:** mat = \\[\\[1,2\\],\\[3,4\\]\\], r = 2, c = 4\n**Output:** \\[\\[1,2\\],\\[3,4\\]\\]\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n <= 100`\n*   `-1000 <= mat[i][j] <= 1000`\n*   `1 <= r, c <= 300`"}}
{"572": {"title": "Subtree of Another Tree", "difficulty": "Easy", "description": "Given the roots of two binary trees `root` and `subRoot`, return `true` if there is a subtree of `root` with the same structure and node values of `subRoot` and `false` otherwise.\n\nA subtree of a binary tree `tree` is a tree that consists of a node in `tree` and all of this node's descendants. The tree `tree` could also be considered as a subtree of itself.\n\n**Example 1:**\n\n**Input:** root = \\[3,4,5,1,2\\], subRoot = \\[4,1,2\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** root = \\[3,4,5,1,2,null,null,null,null,0\\], subRoot = \\[4,1,2\\]\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in the `root` tree is in the range `[1, 2000]`.\n*   The number of nodes in the `subRoot` tree is in the range `[1, 1000]`.\n*   `-104 <= root.val <= 104`\n*   `-104 <= subRoot.val <= 104`"}}
{"575": {"title": "Distribute Candies", "difficulty": "Easy", "description": "Alice has `n` candies, where the `ith` candy is of type `candyType[i]`. Alice noticed that she started to gain weight, so she visited a doctor.\n\nThe doctor advised Alice to only eat `n / 2` of the candies she has (`n` is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\n\nGiven the integer array `candyType` of length `n`, return _the **maximum** number of different types of candies she can eat if she only eats_ `n / 2` _of them_.\n\n**Example 1:**\n\n**Input:** candyType = \\[1,1,2,2,3,3\\]\n**Output:** 3\n**Explanation:** Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.\n\n**Example 2:**\n\n**Input:** candyType = \\[1,1,2,3\\]\n**Output:** 2\n**Explanation:** Alice can only eat 4 / 2 = 2 candies. Whether she eats types \\[1,2\\], \\[1,3\\], or \\[2,3\\], she still can only eat 2 different types.\n\n**Example 3:**\n\n**Input:** candyType = \\[6,6,6,6\\]\n**Output:** 1\n**Explanation:** Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.\n\n**Constraints:**\n\n*   `n == candyType.length`\n*   `2 <= n <= 104`\n*   `n` is even.\n*   `-105 <= candyType[i] <= 105`"}}
{"589": {"title": "N-ary Tree Preorder Traversal", "difficulty": "Easy", "description": "Given the `root` of an n-ary tree, return _the preorder traversal of its nodes' values_.\n\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\n\n**Example 1:**\n\n**Input:** root = \\[1,null,3,2,4,null,5,6\\]\n**Output:** \\[1,3,5,6,2,4\\]\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n**Output:** \\[1,2,3,6,7,11,14,4,8,12,5,9,13,10\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `0 <= Node.val <= 104`\n*   The height of the n-ary tree is less than or equal to `1000`.\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?"}}
{"590": {"title": "N-ary Tree Postorder Traversal", "difficulty": "Easy", "description": "Given the `root` of an n-ary tree, return _the postorder traversal of its nodes' values_.\n\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\n\n**Example 1:**\n\n**Input:** root = \\[1,null,3,2,4,null,5,6\\]\n**Output:** \\[5,6,3,2,4,1\\]\n\n**Example 2:**\n\n**Input:** root = \\[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14\\]\n**Output:** \\[2,6,14,11,7,3,12,8,4,13,9,10,5,1\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[0, 104]`.\n*   `0 <= Node.val <= 104`\n*   The height of the n-ary tree is less than or equal to `1000`.\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?"}}
{"594": {"title": "Longest Harmonious Subsequence", "difficulty": "Easy", "description": "We define a harmonious array as an array where the difference between its maximum value and its minimum value is **exactly** `1`.\n\nGiven an integer array `nums`, return _the length of its longest harmonious subsequence among all its possible subsequences_.\n\nA **subsequence** of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.\n\n**Example 1:**\n\n**Input:** nums = \\[1,3,2,2,5,2,3,7\\]\n**Output:** 5\n**Explanation:** The longest harmonious subsequence is \\[3,2,2,2,3\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** 2\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,1,1\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2 * 104`\n*   `-109 <= nums[i] <= 109`"}}
{"598": {"title": "Range Addition II", "difficulty": "Easy", "description": "You are given an `m x n` matrix `M` initialized with all `0`'s and an array of operations `ops`, where `ops[i] = [ai, bi]` means `M[x][y]` should be incremented by one for all `0 <= x < ai` and `0 <= y < bi`.\n\nCount and return _the number of maximum integers in the matrix after performing all the operations_.\n\n**Example 1:**\n\n**Input:** m = 3, n = 3, ops = \\[\\[2,2\\],\\[3,3\\]\\]\n**Output:** 4\n**Explanation:** The maximum integer in M is 2, and there are four of it in M. So return 4.\n\n**Example 2:**\n\n**Input:** m = 3, n = 3, ops = \\[\\[2,2\\],\\[3,3\\],\\[3,3\\],\\[3,3\\],\\[2,2\\],\\[3,3\\],\\[3,3\\],\\[3,3\\],\\[2,2\\],\\[3,3\\],\\[3,3\\],\\[3,3\\]\\]\n**Output:** 4\n\n**Example 3:**\n\n**Input:** m = 3, n = 3, ops = \\[\\]\n**Output:** 9\n\n**Constraints:**\n\n*   `1 <= m, n <= 4 * 104`\n*   `0 <= ops.length <= 104`\n*   `ops[i].length == 2`\n*   `1 <= ai <= m`\n*   `1 <= bi <= n`"}}
{"599": {"title": "Minimum Index Sum of Two Lists", "difficulty": "Easy", "description": "Given two arrays of strings `list1` and `list2`, find the **common strings with the least index sum**.\n\nA **common string** is a string that appeared in both `list1` and `list2`.\n\nA **common string with the least index sum** is a common string such that if it appeared at `list1[i]` and `list2[j]` then `i + j` should be the minimum value among all the other **common strings**.\n\nReturn _all the **common strings with the least index sum**_. Return the answer in **any order**.\n\n**Example 1:**\n\n**Input:** list1 = \\[ \"Shogun \", \"Tapioca Express \", \"Burger King \", \"KFC \"\\], list2 = \\[ \"Piatti \", \"The Grill at Torrey Pines \", \"Hungry Hunter Steakhouse \", \"Shogun \"\\]\n**Output:** \\[ \"Shogun \"\\]\n**Explanation:** The only common string is  \"Shogun \".\n\n**Example 2:**\n\n**Input:** list1 = \\[ \"Shogun \", \"Tapioca Express \", \"Burger King \", \"KFC \"\\], list2 = \\[ \"KFC \", \"Shogun \", \"Burger King \"\\]\n**Output:** \\[ \"Shogun \"\\]\n**Explanation:** The common string with the least index sum is  \"Shogun \" with index sum = (0 + 1) = 1.\n\n**Example 3:**\n\n**Input:** list1 = \\[ \"happy \", \"sad \", \"good \"\\], list2 = \\[ \"sad \", \"happy \", \"good \"\\]\n**Output:** \\[ \"sad \", \"happy \"\\]\n**Explanation:** There are three common strings:\n \"happy \" with index sum = (0 + 1) = 1.\n \"sad \" with index sum = (1 + 0) = 1.\n \"good \" with index sum = (2 + 2) = 4.\nThe strings with the least index sum are  \"sad \" and  \"happy \".\n\n**Constraints:**\n\n*   `1 <= list1.length, list2.length <= 1000`\n*   `1 <= list1[i].length, list2[i].length <= 30`\n*   `list1[i]` and `list2[i]` consist of spaces `' '` and English letters.\n*   All the strings of `list1` are **unique**.\n*   All the strings of `list2` are **unique**.\n*   There is at least a common string between `list1` and `list2`."}}
{"604": {"title": "Design Compressed String Iterator", "difficulty": "Easy", "description": "Design and implement a data structure for a compressed string iterator. The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.\n\nImplement the StringIterator class:\n\n*   `next()` Returns **the next character** if the original string still has uncompressed characters, otherwise returns a **white space**.\n*   `hasNext()` Returns true if there is any letter needs to be uncompressed in the original string, otherwise returns `false`.\n\n**Example 1:**\n\n**Input**\n\\[ \"StringIterator \",  \"next \",  \"next \",  \"next \",  \"next \",  \"next \",  \"next \",  \"hasNext \",  \"next \",  \"hasNext \"\\]\n\\[\\[ \"L1e2t1C1o1d1e1 \"\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\], \\[\\]\\]\n**Output**\n\\[null,  \"L \",  \"e \",  \"e \",  \"t \",  \"C \",  \"o \", true,  \"d \", true\\]\n\n**Explanation**\nStringIterator stringIterator = new StringIterator( \"L1e2t1C1o1d1e1 \");\nstringIterator.next(); // return  \"L \"\nstringIterator.next(); // return  \"e \"\nstringIterator.next(); // return  \"e \"\nstringIterator.next(); // return  \"t \"\nstringIterator.next(); // return  \"C \"\nstringIterator.next(); // return  \"o \"\nstringIterator.hasNext(); // return True\nstringIterator.next(); // return  \"d \"\nstringIterator.hasNext(); // return True\n\n**Constraints:**\n\n*   `1 <= compressedString.length <= 1000`\n*   `compressedString` consists of lower-case an upper-case English letters and digits.\n*   The number of a single character repetitions in `compressedString` is in the range `[1, 10^9]`\n*   At most `100` calls will be made to `next` and `hasNext`."}}
{"605": {"title": "Can Place Flowers", "difficulty": "Easy", "description": "You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in **adjacent** plots.\n\nGiven an integer array `flowerbed` containing `0`'s and `1`'s, where `0` means empty and `1` means not empty, and an integer `n`, return `true` _if_ `n` _new flowers can be planted in the_ `flowerbed` _without violating the no-adjacent-flowers rule and_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** flowerbed = \\[1,0,0,0,1\\], n = 1\n**Output:** true\n\n**Example 2:**\n\n**Input:** flowerbed = \\[1,0,0,0,1\\], n = 2\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= flowerbed.length <= 2 * 104`\n*   `flowerbed[i]` is `0` or `1`.\n*   There are no two adjacent flowers in `flowerbed`.\n*   `0 <= n <= flowerbed.length`"}}
{"606": {"title": "Construct String from Binary Tree", "difficulty": "Easy", "description": "Given the `root` of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.\n\nOmit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.\n\n**Example 1:**\n\n**Input:** root = \\[1,2,3,4\\]\n**Output:**  \"1(2(4))(3) \"\n**Explanation:** Originally, it needs to be  \"1(2(4)())(3()()) \", but you need to omit all the unnecessary empty parenthesis pairs. And it will be  \"1(2(4))(3) \"\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3,null,4\\]\n**Output:**  \"1(2()(4))(3) \"\n**Explanation:** Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-1000 <= Node.val <= 1000`"}}
{"617": {"title": "Merge Two Binary Trees", "difficulty": "Easy", "description": "You are given two binary trees `root1` and `root2`.\n\nImagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.\n\nReturn _the merged tree_.\n\n**Note:** The merging process must start from the root nodes of both trees.\n\n**Example 1:**\n\n**Input:** root1 = \\[1,3,2,5\\], root2 = \\[2,1,3,null,4,null,7\\]\n**Output:** \\[3,4,5,5,4,null,7\\]\n\n**Example 2:**\n\n**Input:** root1 = \\[1\\], root2 = \\[1,2\\]\n**Output:** \\[2,2\\]\n\n**Constraints:**\n\n*   The number of nodes in both trees is in the range `[0, 2000]`.\n*   `-104 <= Node.val <= 104`"}}
{"628": {"title": "Maximum Product of Three Numbers", "difficulty": "Easy", "description": "Given an integer array `nums`, _find three numbers whose product is maximum and return the maximum product_.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** 6\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** 24\n\n**Example 3:**\n\n**Input:** nums = \\[-1,-2,-3\\]\n**Output:** -6\n\n**Constraints:**\n\n*   `3 <= nums.length <= 104`\n*   `-1000 <= nums[i] <= 1000`"}}
{"637": {"title": "Average of Levels in Binary Tree", "difficulty": "Easy", "description": "Given the `root` of a binary tree, return _the average value of the nodes on each level in the form of an array_. Answers within `10-5` of the actual answer will be accepted.\n\n**Example 1:**\n\n**Input:** root = \\[3,9,20,null,null,15,7\\]\n**Output:** \\[3.00000,14.50000,11.00000\\]\nExplanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\nHence return \\[3, 14.5, 11\\].\n\n**Example 2:**\n\n**Input:** root = \\[3,9,20,15,7\\]\n**Output:** \\[3.00000,14.50000,11.00000\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-231 <= Node.val <= 231 - 1`"}}
{"643": {"title": "Maximum Average Subarray I", "difficulty": "Easy", "description": "You are given an integer array `nums` consisting of `n` elements, and an integer `k`.\n\nFind a contiguous subarray whose **length is equal to** `k` that has the maximum average value and return _this value_. Any answer with a calculation error less than `10-5` will be accepted.\n\n**Example 1:**\n\n**Input:** nums = \\[1,12,-5,-6,50,3\\], k = 4\n**Output:** 12.75000\n**Explanation:** Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n\n**Example 2:**\n\n**Input:** nums = \\[5\\], k = 1\n**Output:** 5.00000\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= k <= n <= 105`\n*   `-104 <= nums[i] <= 104`"}}
{"645": {"title": "Set Mismatch", "difficulty": "Easy", "description": "You have a set of integers `s`, which originally contains all the numbers from `1` to `n`. Unfortunately, due to some error, one of the numbers in `s` got duplicated to another number in the set, which results in **repetition of one** number and **loss of another** number.\n\nYou are given an integer array `nums` representing the data status of this set after the error.\n\nFind the number that occurs twice and the number that is missing and return _them in the form of an array_.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,2,4\\]\n**Output:** \\[2,3\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1,1\\]\n**Output:** \\[1,2\\]\n\n**Constraints:**\n\n*   `2 <= nums.length <= 104`\n*   `1 <= nums[i] <= 104`"}}
{"653": {"title": "Two Sum IV - Input is a BST", "difficulty": "Easy", "description": "Given the `root` of a binary search tree and an integer `k`, return `true` _if there exist two elements in the BST such that their sum is equal to_ `k`, _or_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** root = \\[5,3,6,2,4,null,7\\], k = 9\n**Output:** true\n\n**Example 2:**\n\n**Input:** root = \\[5,3,6,2,4,null,7\\], k = 28\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 104]`.\n*   `-104 <= Node.val <= 104`\n*   `root` is guaranteed to be a **valid** binary search tree.\n*   `-105 <= k <= 105`"}}
{"657": {"title": "Robot Return to Origin", "difficulty": "Easy", "description": "There is a robot starting at the position `(0, 0)`, the origin, on a 2D plane. Given a sequence of its moves, judge if this robot **ends up at** `(0, 0)` after it completes its moves.\n\nYou are given a string `moves` that represents the move sequence of the robot where `moves[i]` represents its `ith` move. Valid moves are `'R'` (right), `'L'` (left), `'U'` (up), and `'D'` (down).\n\nReturn `true` _if the robot returns to the origin after it finishes all of its moves, or_ `false` _otherwise_.\n\n**Note**: The way that the robot is \"facing \" is irrelevant. `'R'` will always make the robot move to the right once, `'L'` will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.\n\n**Example 1:**\n\n**Input:** moves =  \"UD \"\n**Output:** true\n**Explanation**: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\n\n**Example 2:**\n\n**Input:** moves =  \"LL \"\n**Output:** false\n**Explanation**: The robot moves left twice. It ends up two  \"moves \" to the left of the origin. We return false because it is not at the origin at the end of its moves.\n\n**Constraints:**\n\n*   `1 <= moves.length <= 2 * 104`\n*   `moves` only contains the characters `'U'`, `'D'`, `'L'` and `'R'`."}}
{"661": {"title": "Image Smoother", "difficulty": "Easy", "description": "An **image smoother** is a filter of the size `3 x 3` that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).\n\nGiven an `m x n` integer matrix `img` representing the grayscale of an image, return _the image after applying the smoother on each cell of it_.\n\n**Example 1:**\n\n**Input:** img = \\[\\[1,1,1\\],\\[1,0,1\\],\\[1,1,1\\]\\]\n**Output:** \\[\\[0,0,0\\],\\[0,0,0\\],\\[0,0,0\\]\\]\n**Explanation:**\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\n\n**Example 2:**\n\n**Input:** img = \\[\\[100,200,100\\],\\[200,50,200\\],\\[100,200,100\\]\\]\n**Output:** \\[\\[137,141,137\\],\\[141,138,141\\],\\[137,141,137\\]\\]\n**Explanation:**\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138\n\n**Constraints:**\n\n*   `m == img.length`\n*   `n == img[i].length`\n*   `1 <= m, n <= 200`\n*   `0 <= img[i][j] <= 255`"}}
{"671": {"title": "Second Minimum Node In a Binary Tree", "difficulty": "Easy", "description": "Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly `two` or `zero` sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property `root.val = min(root.left.val, root.right.val)` always holds.\n\nGiven such a binary tree, you need to output the **second minimum** value in the set made of all the nodes' value in the whole tree.\n\nIf no such second minimum value exists, output -1 instead.\n\n**Example 1:**\n\n**Input:** root = \\[2,2,5,null,null,5,7\\]\n**Output:** 5\n**Explanation:** The smallest value is 2, the second smallest value is 5.\n\n**Example 2:**\n\n**Input:** root = \\[2,2,2\\]\n**Output:** -1\n**Explanation:** The smallest value is 2, but there isn't any second smallest value.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 25]`.\n*   `1 <= Node.val <= 231 - 1`\n*   `root.val == min(root.left.val, root.right.val)` for each internal node of the tree."}}
{"674": {"title": "Longest Continuous Increasing Subsequence", "difficulty": "Easy", "description": "Given an unsorted array of integers `nums`, return _the length of the longest **continuous increasing subsequence** (i.e. subarray)_. The subsequence must be **strictly** increasing.\n\nA **continuous increasing subsequence** is defined by two indices `l` and `r` (`l < r`) such that it is `[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]` and for each `l <= i < r`, `nums[i] < nums[i + 1]`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,3,5,4,7\\]\n**Output:** 3\n**Explanation:** The longest continuous increasing subsequence is \\[1,3,5\\] with length 3.\nEven though \\[1,3,5,7\\] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\n4.\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,2,2,2\\]\n**Output:** 1\n**Explanation:** The longest continuous increasing subsequence is \\[2\\] with length 1. Note that it must be strictly\nincreasing.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-109 <= nums[i] <= 109`"}}
{"680": {"title": "Valid Palindrome II", "difficulty": "Easy", "description": "Given a string `s`, return `true` _if the_ `s` _can be palindrome after deleting **at most one** character from it_.\n\n**Example 1:**\n\n**Input:** s =  \"aba \"\n**Output:** true\n\n**Example 2:**\n\n**Input:** s =  \"abca \"\n**Output:** true\n**Explanation:** You could delete the character 'c'.\n\n**Example 3:**\n\n**Input:** s =  \"abc \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of lowercase English letters."}}
{"682": {"title": "Baseball Game", "difficulty": "Easy", "description": "You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.\n\nYou are given a list of strings `operations`, where `operations[i]` is the `ith` operation you must apply to the record and is one of the following:\n\n*   An integer `x`.\n    *   Record a new score of `x`.\n*   `'+'`.\n    *   Record a new score that is the sum of the previous two scores.\n*   `'D'`.\n    *   Record a new score that is the double of the previous score.\n*   `'C'`.\n    *   Invalidate the previous score, removing it from the record.\n\nReturn _the sum of all the scores on the record after applying all the operations_.\n\nThe test cases are generated such that the answer and all intermediate calculations fit in a **32-bit** integer and that all operations are valid.\n\n**Example 1:**\n\n**Input:** ops = \\[ \"5 \", \"2 \", \"C \", \"D \", \"+ \"\\]\n**Output:** 30\n**Explanation:**\n \"5 \" - Add 5 to the record, record is now \\[5\\].\n \"2 \" - Add 2 to the record, record is now \\[5, 2\\].\n \"C \" - Invalidate and remove the previous score, record is now \\[5\\].\n \"D \" - Add 2 \\* 5 = 10 to the record, record is now \\[5, 10\\].\n \"+ \" - Add 5 + 10 = 15 to the record, record is now \\[5, 10, 15\\].\nThe total sum is 5 + 10 + 15 = 30.\n\n**Example 2:**\n\n**Input:** ops = \\[ \"5 \", \"-2 \", \"4 \", \"C \", \"D \", \"9 \", \"+ \", \"+ \"\\]\n**Output:** 27\n**Explanation:**\n \"5 \" - Add 5 to the record, record is now \\[5\\].\n \"-2 \" - Add -2 to the record, record is now \\[5, -2\\].\n \"4 \" - Add 4 to the record, record is now \\[5, -2, 4\\].\n \"C \" - Invalidate and remove the previous score, record is now \\[5, -2\\].\n \"D \" - Add 2 \\* -2 = -4 to the record, record is now \\[5, -2, -4\\].\n \"9 \" - Add 9 to the record, record is now \\[5, -2, -4, 9\\].\n \"+ \" - Add -4 + 9 = 5 to the record, record is now \\[5, -2, -4, 9, 5\\].\n \"+ \" - Add 9 + 5 = 14 to the record, record is now \\[5, -2, -4, 9, 5, 14\\].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.\n\n**Example 3:**\n\n**Input:** ops = \\[ \"1 \", \"C \"\\]\n**Output:** 0\n**Explanation:**\n \"1 \" - Add 1 to the record, record is now \\[1\\].\n \"C \" - Invalidate and remove the previous score, record is now \\[\\].\nSince the record is empty, the total sum is 0.\n\n**Constraints:**\n\n*   `1 <= operations.length <= 1000`\n*   `operations[i]` is `\"C \"`, `\"D \"`, `\"+ \"`, or a string representing an integer in the range `[-3 * 104, 3 * 104]`.\n*   For operation `\"+ \"`, there will always be at least two previous scores on the record.\n*   For operations `\"C \"` and `\"D \"`, there will always be at least one previous score on the record."}}
{"693": {"title": "Binary Number with Alternating Bits", "difficulty": "Easy", "description": "Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.\n\n**Example 1:**\n\n**Input:** n = 5\n**Output:** true\n**Explanation:** The binary representation of 5 is: 101\n\n**Example 2:**\n\n**Input:** n = 7\n**Output:** false\n**Explanation:** The binary representation of 7 is: 111.\n\n**Example 3:**\n\n**Input:** n = 11\n**Output:** false\n**Explanation:** The binary representation of 11 is: 1011.\n\n**Constraints:**\n\n*   `1 <= n <= 231 - 1`"}}
{"696": {"title": "Count Binary Substrings", "difficulty": "Easy", "description": "Given a binary string `s`, return the number of non-empty substrings that have the same number of `0`'s and `1`'s, and all the `0`'s and all the `1`'s in these substrings are grouped consecutively.\n\nSubstrings that occur multiple times are counted the number of times they occur.\n\n**Example 1:**\n\n**Input:** s =  \"00110011 \"\n**Output:** 6\n**Explanation:** There are 6 substrings that have equal number of consecutive 1's and 0's:  \"0011 \",  \"01 \",  \"1100 \",  \"10 \",  \"0011 \", and  \"01 \".\nNotice that some of these substrings repeat and are counted the number of times they occur.\nAlso,  \"00110011 \" is not a valid substring because all the 0's (and 1's) are not grouped together.\n\n**Example 2:**\n\n**Input:** s =  \"10101 \"\n**Output:** 4\n**Explanation:** There are 4 substrings:  \"10 \",  \"01 \",  \"10 \",  \"01 \" that have equal number of consecutive 1's and 0's.\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is either `'0'` or `'1'`."}}
{"697": {"title": "Degree of an Array", "difficulty": "Easy", "description": "Given a non-empty array of non-negative integers `nums`, the **degree** of this array is defined as the maximum frequency of any one of its elements.\n\nYour task is to find the smallest possible length of a (contiguous) subarray of `nums`, that has the same degree as `nums`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,2,3,1\\]\n**Output:** 2\n**Explanation:** \nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\nOf the subarrays that have the same degree:\n\\[1, 2, 2, 3, 1\\], \\[1, 2, 2, 3\\], \\[2, 2, 3, 1\\], \\[1, 2, 2\\], \\[2, 2, 3\\], \\[2, 2\\]\nThe shortest length is 2. So return 2.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,2,3,1,4,2\\]\n**Output:** 6\n**Explanation:** \nThe degree is 3 because the element 2 is repeated 3 times.\nSo \\[2,2,3,1,4,2\\] is the shortest subarray, therefore returning 6.\n\n**Constraints:**\n\n*   `nums.length` will be between 1 and 50,000.\n*   `nums[i]` will be an integer between 0 and 49,999."}}
{"700": {"title": "Search in a Binary Search Tree", "difficulty": "Easy", "description": "You are given the `root` of a binary search tree (BST) and an integer `val`.\n\nFind the node in the BST that the node's value equals `val` and return the subtree rooted with that node. If such a node does not exist, return `null`.\n\n**Example 1:**\n\n**Input:** root = \\[4,2,7,1,3\\], val = 2\n**Output:** \\[2,1,3\\]\n\n**Example 2:**\n\n**Input:** root = \\[4,2,7,1,3\\], val = 5\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 5000]`.\n*   `1 <= Node.val <= 107`\n*   `root` is a binary search tree.\n*   `1 <= val <= 107`"}}
{"703": {"title": "Kth Largest Element in a Stream", "difficulty": "Easy", "description": "Design a class to find the `kth` largest element in a stream. Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element.\n\nImplement `KthLargest` class:\n\n*   `KthLargest(int k, int[] nums)` Initializes the object with the integer `k` and the stream of integers `nums`.\n*   `int add(int val)` Appends the integer `val` to the stream and returns the element representing the `kth` largest element in the stream.\n\n**Example 1:**\n\n**Input**\n\\[ \"KthLargest \",  \"add \",  \"add \",  \"add \",  \"add \",  \"add \"\\]\n\\[\\[3, \\[4, 5, 8, 2\\]\\], \\[3\\], \\[5\\], \\[10\\], \\[9\\], \\[4\\]\\]\n**Output**\n\\[null, 4, 5, 5, 8, 8\\]\n\n**Explanation**\nKthLargest kthLargest = new KthLargest(3, \\[4, 5, 8, 2\\]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8\n\n**Constraints:**\n\n*   `1 <= k <= 104`\n*   `0 <= nums.length <= 104`\n*   `-104 <= nums[i] <= 104`\n*   `-104 <= val <= 104`\n*   At most `104` calls will be made to `add`.\n*   It is guaranteed that there will be at least `k` elements in the array when you search for the `kth` element."}}
{"704": {"title": "Binary Search", "difficulty": "Easy", "description": "Given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n**Example 1:**\n\n**Input:** nums = \\[-1,0,3,5,9,12\\], target = 9\n**Output:** 4\n**Explanation:** 9 exists in nums and its index is 4\n\n**Example 2:**\n\n**Input:** nums = \\[-1,0,3,5,9,12\\], target = 2\n**Output:** -1\n**Explanation:** 2 does not exist in nums so return -1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-104 < nums[i], target < 104`\n*   All the integers in `nums` are **unique**.\n*   `nums` is sorted in ascending order."}}
{"705": {"title": "Design HashSet", "difficulty": "Easy", "description": "Design a HashSet without using any built-in hash table libraries.\n\nImplement `MyHashSet` class:\n\n*   `void add(key)` Inserts the value `key` into the HashSet.\n*   `bool contains(key)` Returns whether the value `key` exists in the HashSet or not.\n*   `void remove(key)` Removes the value `key` in the HashSet. If `key` does not exist in the HashSet, do nothing.\n\n**Example 1:**\n\n**Input**\n\\[ \"MyHashSet \",  \"add \",  \"add \",  \"contains \",  \"contains \",  \"add \",  \"contains \",  \"remove \",  \"contains \"\\]\n\\[\\[\\], \\[1\\], \\[2\\], \\[1\\], \\[3\\], \\[2\\], \\[2\\], \\[2\\], \\[2\\]\\]\n**Output**\n\\[null, null, null, true, false, null, true, null, false\\]\n\n**Explanation**\nMyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = \\[1\\]\nmyHashSet.add(2);      // set = \\[1, 2\\]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2);      // set = \\[1, 2\\]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2);   // set = \\[1\\]\nmyHashSet.contains(2); // return False, (already removed)\n\n**Constraints:**\n\n*   `0 <= key <= 106`\n*   At most `104` calls will be made to `add`, `remove`, and `contains`."}}
{"706": {"title": "Design HashMap", "difficulty": "Easy", "description": "Design a HashMap without using any built-in hash table libraries.\n\nImplement the `MyHashMap` class:\n\n*   `MyHashMap()` initializes the object with an empty map.\n*   `void put(int key, int value)` inserts a `(key, value)` pair into the HashMap. If the `key` already exists in the map, update the corresponding `value`.\n*   `int get(int key)` returns the `value` to which the specified `key` is mapped, or `-1` if this map contains no mapping for the `key`.\n*   `void remove(key)` removes the `key` and its corresponding `value` if the map contains the mapping for the `key`.\n\n**Example 1:**\n\n**Input**\n\\[ \"MyHashMap \",  \"put \",  \"put \",  \"get \",  \"get \",  \"put \",  \"get \",  \"remove \",  \"get \"\\]\n\\[\\[\\], \\[1, 1\\], \\[2, 2\\], \\[1\\], \\[3\\], \\[2, 1\\], \\[2\\], \\[2\\], \\[2\\]\\]\n**Output**\n\\[null, null, null, 1, -1, null, 1, null, -1\\]\n\n**Explanation**\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now \\[\\[1,1\\]\\]\nmyHashMap.put(2, 2); // The map is now \\[\\[1,1\\], \\[2,2\\]\\]\nmyHashMap.get(1);    // return 1, The map is now \\[\\[1,1\\], \\[2,2\\]\\]\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now \\[\\[1,1\\], \\[2,2\\]\\]\nmyHashMap.put(2, 1); // The map is now \\[\\[1,1\\], \\[2,1\\]\\] (i.e., update the existing value)\nmyHashMap.get(2);    // return 1, The map is now \\[\\[1,1\\], \\[2,1\\]\\]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now \\[\\[1,1\\]\\]\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now \\[\\[1,1\\]\\]\n\n**Constraints:**\n\n*   `0 <= key, value <= 106`\n*   At most `104` calls will be made to `put`, `get`, and `remove`."}}
{"709": {"title": "To Lower Case", "difficulty": "Easy", "description": "Given a string `s`, return _the string after replacing every uppercase letter with the same lowercase letter_.\n\n**Example 1:**\n\n**Input:** s =  \"Hello \"\n**Output:**  \"hello \"\n\n**Example 2:**\n\n**Input:** s =  \"here \"\n**Output:**  \"here \"\n\n**Example 3:**\n\n**Input:** s =  \"LOVELY \"\n**Output:**  \"lovely \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists of printable ASCII characters."}}
{"717": {"title": "1-bit and 2-bit Characters", "difficulty": "Easy", "description": "We have two special characters:\n\n*   The first character can be represented by one bit `0`.\n*   The second character can be represented by two bits (`10` or `11`).\n\nGiven a binary array `bits` that ends with `0`, return `true` if the last character must be a one-bit character.\n\n**Example 1:**\n\n**Input:** bits = \\[1,0,0\\]\n**Output:** true\n**Explanation:** The only way to decode it is two-bit character and one-bit character.\nSo the last character is one-bit character.\n\n**Example 2:**\n\n**Input:** bits = \\[1,1,1,0\\]\n**Output:** false\n**Explanation:** The only way to decode it is two-bit character and two-bit character.\nSo the last character is not one-bit character.\n\n**Constraints:**\n\n*   `1 <= bits.length <= 1000`\n*   `bits[i]` is either `0` or `1`."}}
{"724": {"title": "Find Pivot Index", "difficulty": "Easy", "description": "Given an array of integers `nums`, calculate the **pivot index** of this array.\n\nThe **pivot index** is the index where the sum of all the numbers **strictly** to the left of the index is equal to the sum of all the numbers **strictly** to the index's right.\n\nIf the index is on the left edge of the array, then the left sum is `0` because there are no elements to the left. This also applies to the right edge of the array.\n\nReturn _the **leftmost pivot index**_. If no such index exists, return `-1`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,7,3,6,5,6\\]\n**Output:** 3\n**Explanation:**\nThe pivot index is 3.\nLeft sum = nums\\[0\\] + nums\\[1\\] + nums\\[2\\] = 1 + 7 + 3 = 11\nRight sum = nums\\[4\\] + nums\\[5\\] = 5 + 6 = 11\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** -1\n**Explanation:**\nThere is no index that satisfies the conditions in the problem statement.\n\n**Example 3:**\n\n**Input:** nums = \\[2,1,-1\\]\n**Output:** 0\n**Explanation:**\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums\\[1\\] + nums\\[2\\] = 1 + -1 = 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-1000 <= nums[i] <= 1000`\n\n**Note:** This question is the same as 1991: [https://leetcode.com/problems/find-the-middle-index-in-array/](https://leetcode.com/problems/find-the-middle-index-in-array/)"}}
{"728": {"title": "Self Dividing Numbers", "difficulty": "Easy", "description": "A **self-dividing number** is a number that is divisible by every digit it contains.\n\n*   For example, `128` is **a self-dividing number** because `128 % 1 == 0`, `128 % 2 == 0`, and `128 % 8 == 0`.\n\nA **self-dividing number** is not allowed to contain the digit zero.\n\nGiven two integers `left` and `right`, return _a list of all the **self-dividing numbers** in the range_ `[left, right]`.\n\n**Example 1:**\n\n**Input:** left = 1, right = 22\n**Output:** \\[1,2,3,4,5,6,7,8,9,11,12,15,22\\]\n\n**Example 2:**\n\n**Input:** left = 47, right = 85\n**Output:** \\[48,55,66,77\\]\n\n**Constraints:**\n\n*   `1 <= left <= right <= 104`"}}
{"733": {"title": "Flood Fill", "difficulty": "Easy", "description": "An image is represented by an `m x n` integer grid `image` where `image[i][j]` represents the pixel value of the image.\n\nYou are also given three integers `sr`, `sc`, and `color`. You should perform a **flood fill** on the image starting from the pixel `image[sr][sc]`.\n\nTo perform a **flood fill**, consider the starting pixel, plus any pixels connected **4-directionally** to the starting pixel of the same color as the starting pixel, plus any pixels connected **4-directionally** to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with `color`.\n\nReturn _the modified image after performing the flood fill_.\n\n**Example 1:**\n\n**Input:** image = \\[\\[1,1,1\\],\\[1,1,0\\],\\[1,0,1\\]\\], sr = 1, sc = 1, color = 2\n**Output:** \\[\\[2,2,2\\],\\[2,2,0\\],\\[2,0,1\\]\\]\n**Explanation:** From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.\n\n**Example 2:**\n\n**Input:** image = \\[\\[0,0,0\\],\\[0,0,0\\]\\], sr = 0, sc = 0, color = 0\n**Output:** \\[\\[0,0,0\\],\\[0,0,0\\]\\]\n**Explanation:** The starting pixel is already colored 0, so no changes are made to the image.\n\n**Constraints:**\n\n*   `m == image.length`\n*   `n == image[i].length`\n*   `1 <= m, n <= 50`\n*   `0 <= image[i][j], color < 216`\n*   `0 <= sr < m`\n*   `0 <= sc < n`"}}
{"734": {"title": "Sentence Similarity", "difficulty": "Easy", "description": "We can represent a sentence as an array of words, for example, the sentence `\"I am happy with leetcode \"` can be represented as `arr = [ \"I \", \"am \",happy \", \"with \", \"leetcode \"]`.\n\nGiven two sentences `sentence1` and `sentence2` each represented as a string array and given an array of string pairs `similarPairs` where `similarPairs[i] = [xi, yi]` indicates that the two words `xi` and `yi` are similar.\n\nReturn _`true` if `sentence1` and `sentence2` are similar, or `false` if they are not similar_.\n\nTwo sentences are similar if:\n\n*   They have **the same length** (i.e., the same number of words)\n*   `sentence1[i]` and `sentence2[i]` are similar.\n\nNotice that a word is always similar to itself, also notice that the similarity relation is not transitive. For example, if the words `a` and `b` are similar, and the words `b` and `c` are similar, `a` and `c` are **not necessarily similar**.\n\n**Example 1:**\n\n**Input:** sentence1 = \\[ \"great \", \"acting \", \"skills \"\\], sentence2 = \\[ \"fine \", \"drama \", \"talent \"\\], similarPairs = \\[\\[ \"great \", \"fine \"\\],\\[ \"drama \", \"acting \"\\],\\[ \"skills \", \"talent \"\\]\\]\n**Output:** true\n**Explanation:** The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2.\n\n**Example 2:**\n\n**Input:** sentence1 = \\[ \"great \"\\], sentence2 = \\[ \"great \"\\], similarPairs = \\[\\]\n**Output:** true\n**Explanation:** A word is similar to itself.\n\n**Example 3:**\n\n**Input:** sentence1 = \\[ \"great \"\\], sentence2 = \\[ \"doubleplus \", \"good \"\\], similarPairs = \\[\\[ \"great \", \"doubleplus \"\\]\\]\n**Output:** false\n**Explanation:** As they don't have the same length, we return false.\n\n**Constraints:**\n\n*   `1 <= sentence1.length, sentence2.length <= 1000`\n*   `1 <= sentence1[i].length, sentence2[i].length <= 20`\n*   `sentence1[i]` and `sentence2[i]` consist of English letters.\n*   `0 <= similarPairs.length <= 1000`\n*   `similarPairs[i].length == 2`\n*   `1 <= xi.length, yi.length <= 20`\n*   `xi` and `yi` consist of lower-case and upper-case English letters.\n*   All the pairs `(xi, yi)` are **distinct**."}}
{"744": {"title": "Find Smallest Letter Greater Than Target", "difficulty": "Easy", "description": "You are given an array of characters `letters` that is sorted in **non-decreasing order**, and a character `target`. There are **at least two different** characters in `letters`.\n\nReturn _the smallest character in_ `letters` _that is lexicographically greater than_ `target`. If such a character does not exist, return the first character in `letters`.\n\n**Example 1:**\n\n**Input:** letters = \\[ \"c \", \"f \", \"j \"\\], target =  \"a \"\n**Output:**  \"c \"\n**Explanation:** The smallest character that is lexicographically greater than 'a' in letters is 'c'.\n\n**Example 2:**\n\n**Input:** letters = \\[ \"c \", \"f \", \"j \"\\], target =  \"c \"\n**Output:**  \"f \"\n**Explanation:** The smallest character that is lexicographically greater than 'c' in letters is 'f'.\n\n**Example 3:**\n\n**Input:** letters = \\[ \"x \", \"x \", \"y \", \"y \"\\], target =  \"z \"\n**Output:**  \"x \"\n**Explanation:** There are no characters in letters that is lexicographically greater than 'z' so we return letters\\[0\\].\n\n**Constraints:**\n\n*   `2 <= letters.length <= 104`\n*   `letters[i]` is a lowercase English letter.\n*   `letters` is sorted in **non-decreasing** order.\n*   `letters` contains at least two different characters.\n*   `target` is a lowercase English letter."}}
{"746": {"title": "Min Cost Climbing Stairs", "difficulty": "Easy", "description": "You are given an integer array `cost` where `cost[i]` is the cost of `ith` step on a staircase. Once you pay the cost, you can either climb one or two steps.\n\nYou can either start from the step with index `0`, or the step with index `1`.\n\nReturn _the minimum cost to reach the top of the floor_.\n\n**Example 1:**\n\n**Input:** cost = \\[10,15,20\\]\n**Output:** 15\n**Explanation:** You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.\n\n**Example 2:**\n\n**Input:** cost = \\[1,100,1,1,1,100,1,1,100,1\\]\n**Output:** 6\n**Explanation:** You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.\n\n**Constraints:**\n\n*   `2 <= cost.length <= 1000`\n*   `0 <= cost[i] <= 999`"}}
{"747": {"title": "Largest Number At Least Twice of Others", "difficulty": "Easy", "description": "You are given an integer array `nums` where the largest integer is **unique**.\n\nDetermine whether the largest element in the array is **at least twice** as much as every other number in the array. If it is, return _the **index** of the largest element, or return_ `-1` _otherwise_.\n\n**Example 1:**\n\n**Input:** nums = \\[3,6,1,0\\]\n**Output:** 1\n**Explanation:** 6 is the largest integer.\nFor every other number in the array x, 6 is at least twice as big as x.\nThe index of value 6 is 1, so we return 1.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** -1\n**Explanation:** 4 is less than twice the value of 3, so we return -1.\n\n**Constraints:**\n\n*   `2 <= nums.length <= 50`\n*   `0 <= nums[i] <= 100`\n*   The largest element in `nums` is unique."}}
{"748": {"title": "Shortest Completing Word", "difficulty": "Easy", "description": "Given a string `licensePlate` and an array of strings `words`, find the **shortest completing** word in `words`.\n\nA **completing** word is a word that **contains all the letters** in `licensePlate`. **Ignore numbers and spaces** in `licensePlate`, and treat letters as **case insensitive**. If a letter appears more than once in `licensePlate`, then it must appear in the word the same number of times or more.\n\nFor example, if `licensePlate` `= \"aBc 12c \"`, then it contains letters `'a'`, `'b'` (ignoring case), and `'c'` twice. Possible **completing** words are `\"abccdef \"`, `\"caaacab \"`, and `\"cbca \"`.\n\nReturn _the shortest **completing** word in_ `words`_._ It is guaranteed an answer exists. If there are multiple shortest **completing** words, return the **first** one that occurs in `words`.\n\n**Example 1:**\n\n**Input:** licensePlate =  \"1s3 PSt \", words = \\[ \"step \", \"steps \", \"stripe \", \"stepple \"\\]\n**Output:**  \"steps \"\n**Explanation:** licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.\n \"step \" contains 't' and 'p', but only contains 1 's'.\n \"steps \" contains 't', 'p', and both 's' characters.\n \"stripe \" is missing an 's'.\n \"stepple \" is missing an 's'.\nSince  \"steps \" is the only word containing all the letters, that is the answer.\n\n**Example 2:**\n\n**Input:** licensePlate =  \"1s3 456 \", words = \\[ \"looks \", \"pest \", \"stew \", \"show \"\\]\n**Output:**  \"pest \"\n**Explanation:** licensePlate only contains the letter 's'. All the words contain 's', but among these  \"pest \",  \"stew \", and  \"show \" are shortest. The answer is  \"pest \" because it is the word that appears earliest of the 3.\n\n**Constraints:**\n\n*   `1 <= licensePlate.length <= 7`\n*   `licensePlate` contains digits, letters (uppercase or lowercase), or space `' '`.\n*   `1 <= words.length <= 1000`\n*   `1 <= words[i].length <= 15`\n*   `words[i]` consists of lower case English letters."}}
{"760": {"title": "Find Anagram Mappings", "difficulty": "Easy", "description": "You are given two integer arrays `nums1` and `nums2` where `nums2` is **an anagram** of `nums1`. Both arrays may contain duplicates.\n\nReturn _an index mapping array_ `mapping` _from_ `nums1` _to_ `nums2` _where_ `mapping[i] = j` _means the_ `ith` _element in_ `nums1` _appears in_ `nums2` _at index_ `j`. If there are multiple answers, return **any of them**.\n\nAn array `a` is **an anagram** of an array `b` means `b` is made by randomizing the order of the elements in `a`.\n\n**Example 1:**\n\n**Input:** nums1 = \\[12,28,46,32,50\\], nums2 = \\[50,12,32,46,28\\]\n**Output:** \\[1,4,3,2,0\\]\n**Explanation:** As mapping\\[0\\] = 1 because the 0th element of nums1 appears at nums2\\[1\\], and mapping\\[1\\] = 4 because the 1st element of nums1 appears at nums2\\[4\\], and so on.\n\n**Example 2:**\n\n**Input:** nums1 = \\[84,46\\], nums2 = \\[84,46\\]\n**Output:** \\[0,1\\]\n\n**Constraints:**\n\n*   `1 <= nums1.length <= 100`\n*   `nums2.length == nums1.length`\n*   `0 <= nums1[i], nums2[i] <= 105`\n*   `nums2` is an anagram of `nums1`."}}
{"762": {"title": "Prime Number of Set Bits in Binary Representation", "difficulty": "Easy", "description": "Given two integers `left` and `right`, return _the **count** of numbers in the **inclusive** range_ `[left, right]` _having a **prime number of set bits** in their binary representation_.\n\nRecall that the **number of set bits** an integer has is the number of `1`'s present when written in binary.\n\n*   For example, `21` written in binary is `10101`, which has `3` set bits.\n\n**Example 1:**\n\n**Input:** left = 6, right = 10\n**Output:** 4\n**Explanation:**\n6  -> 110 (2 set bits, 2 is prime)\n7  -> 111 (3 set bits, 3 is prime)\n8  -> 1000 (1 set bit, 1 is not prime)\n9  -> 1001 (2 set bits, 2 is prime)\n10 -> 1010 (2 set bits, 2 is prime)\n4 numbers have a prime number of set bits.\n\n**Example 2:**\n\n**Input:** left = 10, right = 15\n**Output:** 5\n**Explanation:**\n10 -> 1010 (2 set bits, 2 is prime)\n11 -> 1011 (3 set bits, 3 is prime)\n12 -> 1100 (2 set bits, 2 is prime)\n13 -> 1101 (3 set bits, 3 is prime)\n14 -> 1110 (3 set bits, 3 is prime)\n15 -> 1111 (4 set bits, 4 is not prime)\n5 numbers have a prime number of set bits.\n\n**Constraints:**\n\n*   `1 <= left <= right <= 106`\n*   `0 <= right - left <= 104`"}}
{"766": {"title": "Toeplitz Matrix", "difficulty": "Easy", "description": "Given an `m x n` `matrix`, return _`true` if the matrix is Toeplitz. Otherwise, return `false`._\n\nA matrix is **Toeplitz** if every diagonal from top-left to bottom-right has the same elements.\n\n**Example 1:**\n\n**Input:** matrix = \\[\\[1,2,3,4\\],\\[5,1,2,3\\],\\[9,5,1,2\\]\\]\n**Output:** true\n**Explanation:**\nIn the above grid, the diagonals are:\n \"\\[9\\] \",  \"\\[5, 5\\] \",  \"\\[1, 1, 1\\] \",  \"\\[2, 2, 2\\] \",  \"\\[3, 3\\] \",  \"\\[4\\] \".\nIn each diagonal all elements are the same, so the answer is True.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[1,2\\],\\[2,2\\]\\]\n**Output:** false\n**Explanation:**\nThe diagonal  \"\\[1, 2\\] \" has different elements.\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m, n <= 20`\n*   `0 <= matrix[i][j] <= 99`\n\n**Follow up:**\n\n*   What if the `matrix` is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?\n*   What if the `matrix` is so large that you can only load up a partial row into the memory at once?"}}
{"771": {"title": "Jewels and Stones", "difficulty": "Easy", "description": "You're given strings `jewels` representing the types of stones that are jewels, and `stones` representing the stones you have. Each character in `stones` is a type of stone you have. You want to know how many of the stones you have are also jewels.\n\nLetters are case sensitive, so `\"a \"` is considered a different type of stone from `\"A \"`.\n\n**Example 1:**\n\n**Input:** jewels = \"aA\", stones = \"aAAbbbb\"\n**Output:** 3\n\n**Example 2:**\n\n**Input:** jewels = \"z\", stones = \"ZZ\"\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= jewels.length, stones.length <= 50`\n*   `jewels` and `stones` consist of only English letters.\n*   All the characters of `jewels` are **unique**."}}
{"783": {"title": "Minimum Distance Between BST Nodes", "difficulty": "Easy", "description": "Given the `root` of a Binary Search Tree (BST), return _the minimum difference between the values of any two different nodes in the tree_.\n\n**Example 1:**\n\n**Input:** root = \\[4,2,6,1,3\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** root = \\[1,0,48,null,null,12,49\\]\n**Output:** 1\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[2, 100]`.\n*   `0 <= Node.val <= 105`\n\n**Note:** This question is the same as 530: [https://leetcode.com/problems/minimum-absolute-difference-in-bst/](https://leetcode.com/problems/minimum-absolute-difference-in-bst/)"}}
{"796": {"title": "Rotate String", "difficulty": "Easy", "description": "Given two strings `s` and `goal`, return `true` _if and only if_ `s` _can become_ `goal` _after some number of **shifts** on_ `s`.\n\nA **shift** on `s` consists of moving the leftmost character of `s` to the rightmost position.\n\n*   For example, if `s = \"abcde \"`, then it will be `\"bcdea \"` after one shift.\n\n**Example 1:**\n\n**Input:** s = \"abcde\", goal = \"cdeab\"\n**Output:** true\n\n**Example 2:**\n\n**Input:** s = \"abcde\", goal = \"abced\"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= s.length, goal.length <= 100`\n*   `s` and `goal` consist of lowercase English letters."}}
{"800": {"title": "Similar RGB Color", "difficulty": "Easy", "description": "The red-green-blue color `\"#AABBCC \"` can be written as `\"#ABC \"` in shorthand.\n\n*   For example, `\"#15c \"` is shorthand for the color `\"#1155cc \"`.\n\nThe similarity between the two colors `\"#ABCDEF \"` and `\"#UVWXYZ \"` is `-(AB - UV)2 - (CD - WX)2 - (EF - YZ)2`.\n\nGiven a string `color` that follows the format `\"#ABCDEF \"`, return a string represents the color that is most similar to the given color and has a shorthand (i.e., it can be represented as some `\"#XYZ \"`).\n\n**Any answer** which has the same highest similarity as the best answer will be accepted.\n\n**Example 1:**\n\n**Input:** color =  \"#09f166 \"\n**Output:**  \"#11ee66 \"\n**Explanation:** \nThe similarity is -(0x09 - 0x11)2 -(0xf1 - 0xee)2 - (0x66 - 0x66)2 = -64 -9 -0 = -73.\nThis is the highest among any shorthand color.\n\n**Example 2:**\n\n**Input:** color =  \"#4e3fe1 \"\n**Output:**  \"#5544dd \"\n\n**Constraints:**\n\n*   `color.length == 7`\n*   `color[0] == '#'`\n*   `color[i]` is either digit or character in the range `['a', 'f']` for `i > 0`."}}
{"804": {"title": "Unique Morse Code Words", "difficulty": "Easy", "description": "International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:\n\n*   `'a'` maps to `\".- \"`,\n*   `'b'` maps to `\"-... \"`,\n*   `'c'` maps to `\"-.-. \"`, and so on.\n\nFor convenience, the full table for the `26` letters of the English alphabet is given below:\n\n\\[ \".- \", \"-... \", \"-.-. \", \"-.. \", \". \", \"..-. \", \"--. \", \".... \", \".. \", \".--- \", \"-.- \", \".-.. \", \"-- \", \"-. \", \"--- \", \".--. \", \"--.- \", \".-. \", \"... \", \"- \", \"..- \", \"...- \", \".-- \", \"-..- \", \"-.-- \", \"--.. \"\\]\n\nGiven an array of strings `words` where each word can be written as a concatenation of the Morse code of each letter.\n\n*   For example, `\"cab \"` can be written as `\"-.-..--... \"`, which is the concatenation of `\"-.-. \"`, `\".- \"`, and `\"-... \"`. We will call such a concatenation the **transformation** of a word.\n\nReturn _the number of different **transformations** among all words we have_.\n\n**Example 1:**\n\n**Input:** words = \\[ \"gin \", \"zen \", \"gig \", \"msg \"\\]\n**Output:** 2\n**Explanation:** The transformation of each word is:\n \"gin \" ->  \"--...-. \"\n \"zen \" ->  \"--...-. \"\n \"gig \" ->  \"--...--. \"\n \"msg \" ->  \"--...--. \"\nThere are 2 different transformations:  \"--...-. \" and  \"--...--. \".\n\n**Example 2:**\n\n**Input:** words = \\[ \"a \"\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 12`\n*   `words[i]` consists of lowercase English letters."}}
{"806": {"title": "Number of Lines To Write String", "difficulty": "Easy", "description": "You are given a string `s` of lowercase English letters and an array `widths` denoting **how many pixels wide** each lowercase English letter is. Specifically, `widths[0]` is the width of `'a'`, `widths[1]` is the width of `'b'`, and so on.\n\nYou are trying to write `s` across several lines, where **each line is no longer than** `100` **pixels**. Starting at the beginning of `s`, write as many letters on the first line such that the total width does not exceed `100` pixels. Then, from where you stopped in `s`, continue writing as many letters as you can on the second line. Continue this process until you have written all of `s`.\n\nReturn _an array_ `result` _of length 2 where:_\n\n*   `result[0]` _is the total number of lines._\n*   `result[1]` _is the width of the last line in pixels._\n\n**Example 1:**\n\n**Input:** widths = \\[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10\\], s =  \"abcdefghijklmnopqrstuvwxyz \"\n**Output:** \\[3,60\\]\n**Explanation:** You can write s as follows:\nabcdefghij  // 100 pixels wide\nklmnopqrst  // 100 pixels wide\nuvwxyz      // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide.\n\n**Example 2:**\n\n**Input:** widths = \\[4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10\\], s =  \"bbbcccdddaaa \"\n**Output:** \\[2,4\\]\n**Explanation:** You can write s as follows:\nbbbcccdddaa  // 98 pixels wide\na            // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide.\n\n**Constraints:**\n\n*   `widths.length == 26`\n*   `2 <= widths[i] <= 10`\n*   `1 <= s.length <= 1000`\n*   `s` contains only lowercase English letters."}}
{"812": {"title": "Largest Triangle Area", "difficulty": "Easy", "description": "Given an array of points on the **X-Y** plane `points` where `points[i] = [xi, yi]`, return _the area of the largest triangle that can be formed by any three different points_. Answers within `10-5` of the actual answer will be accepted.\n\n**Example 1:**\n\n**Input:** points = \\[\\[0,0\\],\\[0,1\\],\\[1,0\\],\\[0,2\\],\\[2,0\\]\\]\n**Output:** 2.00000\n**Explanation:** The five points are shown in the above figure. The red triangle is the largest.\n\n**Example 2:**\n\n**Input:** points = \\[\\[1,0\\],\\[0,0\\],\\[0,1\\]\\]\n**Output:** 0.50000\n\n**Constraints:**\n\n*   `3 <= points.length <= 50`\n*   `-50 <= xi, yi <= 50`\n*   All the given points are **unique**."}}
{"819": {"title": "Most Common Word", "difficulty": "Easy", "description": "Given a string `paragraph` and a string array of the banned words `banned`, return _the most frequent word that is not banned_. It is **guaranteed** there is **at least one word** that is not banned, and that the answer is **unique**.\n\nThe words in `paragraph` are **case-insensitive** and the answer should be returned in **lowercase**.\n\n**Example 1:**\n\n**Input:** paragraph =  \"Bob hit a ball, the hit BALL flew far after it was hit. \", banned = \\[ \"hit \"\\]\n**Output:**  \"ball \"\n**Explanation:** \n \"hit \" occurs 3 times, but it is a banned word.\n \"ball \" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as  \"ball, \"), \nand that  \"hit \" isn't the answer even though it occurs more because it is banned.\n\n**Example 2:**\n\n**Input:** paragraph =  \"a. \", banned = \\[\\]\n**Output:**  \"a \"\n\n**Constraints:**\n\n*   `1 <= paragraph.length <= 1000`\n*   paragraph consists of English letters, space `' '`, or one of the symbols: `\"!?',;. \"`.\n*   `0 <= banned.length <= 100`\n*   `1 <= banned[i].length <= 10`\n*   `banned[i]` consists of only lowercase English letters."}}
{"821": {"title": "Shortest Distance to a Character", "difficulty": "Easy", "description": "Given a string `s` and a character `c` that occurs in `s`, return _an array of integers_ `answer` _where_ `answer.length == s.length` _and_ `answer[i]` _is the **distance** from index_ `i` _to the **closest** occurrence of character_ `c` _in_ `s`.\n\nThe **distance** between two indices `i` and `j` is `abs(i - j)`, where `abs` is the absolute value function.\n\n**Example 1:**\n\n**Input:** s =  \"loveleetcode \", c =  \"e \"\n**Output:** \\[3,2,1,0,1,0,0,1,2,2,1,0\\]\n**Explanation:** The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\nThe closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\nThe closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\nFor index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\nThe closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.\n\n**Example 2:**\n\n**Input:** s =  \"aaab \", c =  \"b \"\n**Output:** \\[3,2,1,0\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s[i]` and `c` are lowercase English letters.\n*   It is guaranteed that `c` occurs at least once in `s`."}}
{"824": {"title": "Goat Latin", "difficulty": "Easy", "description": "You are given a string `sentence` that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.\n\nWe would like to convert the sentence to \"Goat Latin \" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:\n\n*   If a word begins with a vowel (`'a'`, `'e'`, `'i'`, `'o'`, or `'u'`), append `\"ma \"` to the end of the word.\n    *   For example, the word `\"apple \"` becomes `\"applema \"`.\n*   If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add `\"ma \"`.\n    *   For example, the word `\"goat \"` becomes `\"oatgma \"`.\n*   Add one letter `'a'` to the end of each word per its word index in the sentence, starting with `1`.\n    *   For example, the first word gets `\"a \"` added to the end, the second word gets `\"aa \"` added to the end, and so on.\n\nReturn _the final sentence representing the conversion from sentence to Goat Latin_.\n\n**Example 1:**\n\n**Input:** sentence = \"I speak Goat Latin\"\n**Output:** \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"\n\n**Example 2:**\n\n**Input:** sentence = \"The quick brown fox jumped over the lazy dog\"\n**Output:** \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"\n\n**Constraints:**\n\n*   `1 <= sentence.length <= 150`\n*   `sentence` consists of English letters and spaces.\n*   `sentence` has no leading or trailing spaces.\n*   All the words in `sentence` are separated by a single space."}}
{"830": {"title": "Positions of Large Groups", "difficulty": "Easy", "description": "In a string `s` of lowercase letters, these letters form consecutive groups of the same character.\n\nFor example, a string like `s = \"abbxxxxzyy \"` has the groups `\"a \"`, `\"bb \"`, `\"xxxx \"`, `\"z \"`, and `\"yy \"`.\n\nA group is identified by an interval `[start, end]`, where `start` and `end` denote the start and end indices (inclusive) of the group. In the above example, `\"xxxx \"` has the interval `[3,6]`.\n\nA group is considered **large** if it has 3 or more characters.\n\nReturn _the intervals of every **large** group sorted in **increasing order by start index**_.\n\n**Example 1:**\n\n**Input:** s =  \"abbxxxxzzy \"\n**Output:** \\[\\[3,6\\]\\]\n**Explanation:** `\"xxxx \" is the only` large group with start index 3 and end index 6.\n\n**Example 2:**\n\n**Input:** s =  \"abc \"\n**Output:** \\[\\]\n**Explanation:** We have groups  \"a \",  \"b \", and  \"c \", none of which are large groups.\n\n**Example 3:**\n\n**Input:** s =  \"abcdddeeeeaabbbcd \"\n**Output:** \\[\\[3,5\\],\\[6,9\\],\\[12,14\\]\\]\n**Explanation:** The large groups are  \"ddd \",  \"eeee \", and  \"bbb \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` contains lowercase English letters only."}}
{"832": {"title": "Flipping an Image", "difficulty": "Easy", "description": "Given an `n x n` binary matrix `image`, flip the image **horizontally**, then invert it, and return _the resulting image_.\n\nTo flip an image horizontally means that each row of the image is reversed.\n\n*   For example, flipping `[1,1,0]` horizontally results in `[0,1,1]`.\n\nTo invert an image means that each `0` is replaced by `1`, and each `1` is replaced by `0`.\n\n*   For example, inverting `[0,1,1]` results in `[1,0,0]`.\n\n**Example 1:**\n\n**Input:** image = \\[\\[1,1,0\\],\\[1,0,1\\],\\[0,0,0\\]\\]\n**Output:** \\[\\[1,0,0\\],\\[0,1,0\\],\\[1,1,1\\]\\]\n**Explanation:** First reverse each row: \\[\\[0,1,1\\],\\[1,0,1\\],\\[0,0,0\\]\\].\nThen, invert the image: \\[\\[1,0,0\\],\\[0,1,0\\],\\[1,1,1\\]\\]\n\n**Example 2:**\n\n**Input:** image = \\[\\[1,1,0,0\\],\\[1,0,0,1\\],\\[0,1,1,1\\],\\[1,0,1,0\\]\\]\n**Output:** \\[\\[1,1,0,0\\],\\[0,1,1,0\\],\\[0,0,0,1\\],\\[1,0,1,0\\]\\]\n**Explanation:** First reverse each row: \\[\\[0,0,1,1\\],\\[1,0,0,1\\],\\[1,1,1,0\\],\\[0,1,0,1\\]\\].\nThen invert the image: \\[\\[1,1,0,0\\],\\[0,1,1,0\\],\\[0,0,0,1\\],\\[1,0,1,0\\]\\]\n\n**Constraints:**\n\n*   `n == image.length`\n*   `n == image[i].length`\n*   `1 <= n <= 20`\n*   `images[i][j]` is either `0` or `1`."}}
{"836": {"title": "Rectangle Overlap", "difficulty": "Easy", "description": "An axis-aligned rectangle is represented as a list `[x1, y1, x2, y2]`, where `(x1, y1)` is the coordinate of its bottom-left corner, and `(x2, y2)` is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.\n\nTwo rectangles overlap if the area of their intersection is **positive**. To be clear, two rectangles that only touch at the corner or edges do not overlap.\n\nGiven two axis-aligned rectangles `rec1` and `rec2`, return `true` _if they overlap, otherwise return_ `false`.\n\n**Example 1:**\n\n**Input:** rec1 = \\[0,0,2,2\\], rec2 = \\[1,1,3,3\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** rec1 = \\[0,0,1,1\\], rec2 = \\[1,0,2,1\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** rec1 = \\[0,0,1,1\\], rec2 = \\[2,2,3,3\\]\n**Output:** false\n\n**Constraints:**\n\n*   `rec1.length == 4`\n*   `rec2.length == 4`\n*   `-109 <= rec1[i], rec2[i] <= 109`\n*   `rec1` and `rec2` represent a valid rectangle with a non-zero area."}}
{"844": {"title": "Backspace String Compare", "difficulty": "Easy", "description": "Given two strings `s` and `t`, return `true` _if they are equal when both are typed into empty text editors_. `'#'` means a backspace character.\n\nNote that after backspacing an empty text, the text will continue empty.\n\n**Example 1:**\n\n**Input:** s =  \"ab#c \", t =  \"ad#c \"\n**Output:** true\n**Explanation:** Both s and t become  \"ac \".\n\n**Example 2:**\n\n**Input:** s =  \"ab## \", t =  \"c#d# \"\n**Output:** true\n**Explanation:** Both s and t become  \" \".\n\n**Example 3:**\n\n**Input:** s =  \"a#c \", t =  \"b \"\n**Output:** false\n**Explanation:** s becomes  \"c \" while t becomes  \"b \".\n\n**Constraints:**\n\n*   `1 <= s.length, t.length <= 200`\n*   `s` and `t` only contain lowercase letters and `'#'` characters.\n\n**Follow up:** Can you solve it in `O(n)` time and `O(1)` space?"}}
{"859": {"title": "Buddy Strings", "difficulty": "Easy", "description": "Given two strings `s` and `goal`, return `true` _if you can swap two letters in_ `s` _so the result is equal to_ `goal`_, otherwise, return_ `false`_._\n\nSwapping letters is defined as taking two indices `i` and `j` (0-indexed) such that `i != j` and swapping the characters at `s[i]` and `s[j]`.\n\n*   For example, swapping at indices `0` and `2` in `\"abcd \"` results in `\"cbad \"`.\n\n**Example 1:**\n\n**Input:** s =  \"ab \", goal =  \"ba \"\n**Output:** true\n**Explanation:** You can swap s\\[0\\] = 'a' and s\\[1\\] = 'b' to get  \"ba \", which is equal to goal.\n\n**Example 2:**\n\n**Input:** s =  \"ab \", goal =  \"ab \"\n**Output:** false\n**Explanation:** The only letters you can swap are s\\[0\\] = 'a' and s\\[1\\] = 'b', which results in  \"ba \" != goal.\n\n**Example 3:**\n\n**Input:** s =  \"aa \", goal =  \"aa \"\n**Output:** true\n**Explanation:** You can swap s\\[0\\] = 'a' and s\\[1\\] = 'a' to get  \"aa \", which is equal to goal.\n\n**Constraints:**\n\n*   `1 <= s.length, goal.length <= 2 * 104`\n*   `s` and `goal` consist of lowercase letters."}}
{"860": {"title": "Lemonade Change", "difficulty": "Easy", "description": "At a lemonade stand, each lemonade costs `$5`. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a `$5`, `$10`, or `$20` bill. You must provide the correct change to each customer so that the net transaction is that the customer pays `$5`.\n\nNote that you do not have any change in hand at first.\n\nGiven an integer array `bills` where `bills[i]` is the bill the `ith` customer pays, return `true` _if you can provide every customer with the correct change, or_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** bills = \\[5,5,5,10,20\\]\n**Output:** true\n**Explanation:** \nFrom the first 3 customers, we collect three $5 bills in order.\nFrom the fourth customer, we collect a $10 bill and give back a $5.\nFrom the fifth customer, we give a $10 bill and a $5 bill.\nSince all customers got correct change, we output true.\n\n**Example 2:**\n\n**Input:** bills = \\[5,5,10,10,20\\]\n**Output:** false\n**Explanation:** \nFrom the first two customers in order, we collect two $5 bills.\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\nFor the last customer, we can not give the change of $15 back because we only have two $10 bills.\nSince not every customer received the correct change, the answer is false.\n\n**Constraints:**\n\n*   `1 <= bills.length <= 105`\n*   `bills[i]` is either `5`, `10`, or `20`."}}
{"867": {"title": "Transpose Matrix", "difficulty": "Easy", "description": "Given a 2D integer array `matrix`, return _the **transpose** of_ `matrix`.\n\nThe **transpose** of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.\n\n**Example 1:**\n\n**Input:** matrix = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]\n**Output:** \\[\\[1,4,7\\],\\[2,5,8\\],\\[3,6,9\\]\\]\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[1,2,3\\],\\[4,5,6\\]\\]\n**Output:** \\[\\[1,4\\],\\[2,5\\],\\[3,6\\]\\]\n\n**Constraints:**\n\n*   `m == matrix.length`\n*   `n == matrix[i].length`\n*   `1 <= m, n <= 1000`\n*   `1 <= m * n <= 105`\n*   `-109 <= matrix[i][j] <= 109`"}}
{"868": {"title": "Binary Gap", "difficulty": "Easy", "description": "Given a positive integer `n`, find and return _the **longest distance** between any two **adjacent**_ `1`_'s in the binary representation of_ `n`_. If there are no two adjacent_ `1`_'s, return_ `0`_._\n\nTwo `1`'s are **adjacent** if there are only `0`'s separating them (possibly no `0`'s). The **distance** between two `1`'s is the absolute difference between their bit positions. For example, the two `1`'s in `\"1001 \"` have a distance of 3.\n\n**Example 1:**\n\n**Input:** n = 22\n**Output:** 2\n**Explanation:** 22 in binary is  \"10110 \".\nThe first adjacent pair of 1's is  \"10110 \" with a distance of 2.\nThe second adjacent pair of 1's is  \"10110 \" with a distance of 1.\nThe answer is the largest of these two distances, which is 2.\nNote that  \"10110 \" is not a valid pair since there is a 1 separating the two 1's underlined.\n\n**Example 2:**\n\n**Input:** n = 8\n**Output:** 0\n**Explanation:** 8 in binary is  \"1000 \".\nThere are not any adjacent pairs of 1's in the binary representation of 8, so we return 0.\n\n**Example 3:**\n\n**Input:** n = 5\n**Output:** 2\n**Explanation:** 5 in binary is  \"101 \".\n\n**Constraints:**\n\n*   `1 <= n <= 109`"}}
{"872": {"title": "Leaf-Similar Trees", "difficulty": "Easy", "description": "Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a **leaf value sequence**_._\n\nFor example, in the given tree above, the leaf value sequence is `(6, 7, 4, 9, 8)`.\n\nTwo binary trees are considered _leaf-similar_ if their leaf value sequence is the same.\n\nReturn `true` if and only if the two given trees with head nodes `root1` and `root2` are leaf-similar.\n\n**Example 1:**\n\n**Input:** root1 = \\[3,5,1,6,2,9,8,null,null,7,4\\], root2 = \\[3,5,1,6,7,4,2,null,null,null,null,null,null,9,8\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** root1 = \\[1,2,3\\], root2 = \\[1,3,2\\]\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in each tree will be in the range `[1, 200]`.\n*   Both of the given trees will have values in the range `[0, 200]`."}}
{"876": {"title": "Middle of the Linked List", "difficulty": "Easy", "description": "Given the `head` of a singly linked list, return _the middle node of the linked list_.\n\nIf there are two middle nodes, return **the second middle** node.\n\n**Example 1:**\n\n**Input:** head = \\[1,2,3,4,5\\]\n**Output:** \\[3,4,5\\]\n**Explanation:** The middle node of the list is node 3.\n\n**Example 2:**\n\n**Input:** head = \\[1,2,3,4,5,6\\]\n**Output:** \\[4,5,6\\]\n**Explanation:** Since the list has two middle nodes with values 3 and 4, we return the second one.\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[1, 100]`.\n*   `1 <= Node.val <= 100`"}}
{"883": {"title": "Projection Area of 3D Shapes", "difficulty": "Easy", "description": "You are given an `n x n` `grid` where we place some `1 x 1 x 1` cubes that are axis-aligned with the `x`, `y`, and `z` axes.\n\nEach value `v = grid[i][j]` represents a tower of `v` cubes placed on top of the cell `(i, j)`.\n\nWe view the projection of these cubes onto the `xy`, `yz`, and `zx` planes.\n\nA **projection** is like a shadow, that maps our **3-dimensional** figure to a **2-dimensional** plane. We are viewing the \"shadow \" when looking at the cubes from the top, the front, and the side.\n\nReturn _the total area of all three projections_.\n\n**Example 1:**\n\n**Input:** grid = \\[\\[1,2\\],\\[3,4\\]\\]\n**Output:** 17\n**Explanation:** Here are the three projections ( \"shadows \") of the shape made with each axis-aligned plane.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[2\\]\\]\n**Output:** 5\n\n**Example 3:**\n\n**Input:** grid = \\[\\[1,0\\],\\[0,2\\]\\]\n**Output:** 8\n\n**Constraints:**\n\n*   `n == grid.length == grid[i].length`\n*   `1 <= n <= 50`\n*   `0 <= grid[i][j] <= 50`"}}
{"884": {"title": "Uncommon Words from Two Sentences", "difficulty": "Easy", "description": "A **sentence** is a string of single-space separated words where each word consists only of lowercase letters.\n\nA word is **uncommon** if it appears exactly once in one of the sentences, and **does not appear** in the other sentence.\n\nGiven two **sentences** `s1` and `s2`, return _a list of all the **uncommon words**_. You may return the answer in **any order**.\n\n**Example 1:**\n\n**Input:** s1 = \"this apple is sweet\", s2 = \"this apple is sour\"\n**Output:** \\[\"sweet\",\"sour\"\\]\n\n**Example 2:**\n\n**Input:** s1 = \"apple apple\", s2 = \"banana\"\n**Output:** \\[\"banana\"\\]\n\n**Constraints:**\n\n*   `1 <= s1.length, s2.length <= 200`\n*   `s1` and `s2` consist of lowercase English letters and spaces.\n*   `s1` and `s2` do not have leading or trailing spaces.\n*   All the words in `s1` and `s2` are separated by a single space."}}
{"888": {"title": "Fair Candy Swap", "difficulty": "Easy", "description": "Alice and Bob have a different total number of candies. You are given two integer arrays `aliceSizes` and `bobSizes` where `aliceSizes[i]` is the number of candies of the `ith` box of candy that Alice has and `bobSizes[j]` is the number of candies of the `jth` box of candy that Bob has.\n\nSince they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.\n\nReturn a_n integer array_ `answer` _where_ `answer[0]` _is the number of candies in the box that Alice must exchange, and_ `answer[1]` _is the number of candies in the box that Bob must exchange_. If there are multiple answers, you may **return any** one of them. It is guaranteed that at least one answer exists.\n\n**Example 1:**\n\n**Input:** aliceSizes = \\[1,1\\], bobSizes = \\[2,2\\]\n**Output:** \\[1,2\\]\n\n**Example 2:**\n\n**Input:** aliceSizes = \\[1,2\\], bobSizes = \\[2,3\\]\n**Output:** \\[1,2\\]\n\n**Example 3:**\n\n**Input:** aliceSizes = \\[2\\], bobSizes = \\[1,3\\]\n**Output:** \\[2,3\\]\n\n**Constraints:**\n\n*   `1 <= aliceSizes.length, bobSizes.length <= 104`\n*   `1 <= aliceSizes[i], bobSizes[j] <= 105`\n*   Alice and Bob have a different total number of candies.\n*   There will be at least one valid answer for the given input."}}
{"892": {"title": "Surface Area of 3D Shapes", "difficulty": "Easy", "description": "You are given an `n x n` `grid` where you have placed some `1 x 1 x 1` cubes. Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of cell `(i, j)`.\n\nAfter placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.\n\nReturn _the total surface area of the resulting shapes_.\n\n**Note:** The bottom face of each shape counts toward its surface area.\n\n**Example 1:**\n\n**Input:** grid = \\[\\[1,2\\],\\[3,4\\]\\]\n**Output:** 34\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1,1\\],\\[1,0,1\\],\\[1,1,1\\]\\]\n**Output:** 32\n\n**Example 3:**\n\n**Input:** grid = \\[\\[2,2,2\\],\\[2,1,2\\],\\[2,2,2\\]\\]\n**Output:** 46\n\n**Constraints:**\n\n*   `n == grid.length == grid[i].length`\n*   `1 <= n <= 50`\n*   `0 <= grid[i][j] <= 50`"}}
{"896": {"title": "Monotonic Array", "difficulty": "Easy", "description": "An array is **monotonic** if it is either monotone increasing or monotone decreasing.\n\nAn array `nums` is monotone increasing if for all `i <= j`, `nums[i] <= nums[j]`. An array `nums` is monotone decreasing if for all `i <= j`, `nums[i] >= nums[j]`.\n\nGiven an integer array `nums`, return `true` _if the given array is monotonic, or_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,2,3\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** nums = \\[6,5,4,4\\]\n**Output:** true\n\n**Example 3:**\n\n**Input:** nums = \\[1,3,2\\]\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `-105 <= nums[i] <= 105`"}}
{"897": {"title": "Increasing Order Search Tree", "difficulty": "Easy", "description": "Given the `root` of a binary search tree, rearrange the tree in **in-order** so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.\n\n**Example 1:**\n\n**Input:** root = \\[5,3,6,2,4,null,8,1,null,null,null,7,9\\]\n**Output:** \\[1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9\\]\n\n**Example 2:**\n\n**Input:** root = \\[5,1,7\\]\n**Output:** \\[1,null,5,null,7\\]\n\n**Constraints:**\n\n*   The number of nodes in the given tree will be in the range `[1, 100]`.\n*   `0 <= Node.val <= 1000`"}}
{"905": {"title": "Sort Array By Parity", "difficulty": "Easy", "description": "Given an integer array `nums`, move all the even integers at the beginning of the array followed by all the odd integers.\n\nReturn _**any array** that satisfies this condition_.\n\n**Example 1:**\n\n**Input:** nums = \\[3,1,2,4\\]\n**Output:** \\[2,4,3,1\\]\n**Explanation:** The outputs \\[4,2,3,1\\], \\[2,4,1,3\\], and \\[4,2,1,3\\] would also be accepted.\n\n**Example 2:**\n\n**Input:** nums = \\[0\\]\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5000`\n*   `0 <= nums[i] <= 5000`"}}
{"908": {"title": "Smallest Range I", "difficulty": "Easy", "description": "You are given an integer array `nums` and an integer `k`.\n\nIn one operation, you can choose any index `i` where `0 <= i < nums.length` and change `nums[i]` to `nums[i] + x` where `x` is an integer from the range `[-k, k]`. You can apply this operation **at most once** for each index `i`.\n\nThe **score** of `nums` is the difference between the maximum and minimum elements in `nums`.\n\nReturn _the minimum **score** of_ `nums` _after applying the mentioned operation at most once for each index in it_.\n\n**Example 1:**\n\n**Input:** nums = \\[1\\], k = 0\n**Output:** 0\n**Explanation:** The score is max(nums) - min(nums) = 1 - 1 = 0.\n\n**Example 2:**\n\n**Input:** nums = \\[0,10\\], k = 2\n**Output:** 6\n**Explanation:** Change nums to be \\[2, 8\\]. The score is max(nums) - min(nums) = 8 - 2 = 6.\n\n**Example 3:**\n\n**Input:** nums = \\[1,3,6\\], k = 3\n**Output:** 0\n**Explanation:** Change nums to be \\[4, 4, 4\\]. The score is max(nums) - min(nums) = 4 - 4 = 0.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `0 <= nums[i] <= 104`\n*   `0 <= k <= 104`"}}
{"914": {"title": "X of a Kind in a Deck of Cards", "difficulty": "Easy", "description": "You are given an integer array `deck` where `deck[i]` represents the number written on the `ith` card.\n\nPartition the cards into **one or more groups** such that:\n\n*   Each group has **exactly** `x` cards where `x > 1`, and\n*   All the cards in one group have the same integer written on them.\n\nReturn `true` _if such partition is possible, or_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** deck = \\[1,2,3,4,4,3,2,1\\]\n**Output:** true\n**Explanation**: Possible partition \\[1,1\\],\\[2,2\\],\\[3,3\\],\\[4,4\\].\n\n**Example 2:**\n\n**Input:** deck = \\[1,1,1,2,2,2,3,3\\]\n**Output:** false\n**Explanation**: No possible partition.\n\n**Constraints:**\n\n*   `1 <= deck.length <= 104`\n*   `0 <= deck[i] < 104`"}}
{"917": {"title": "Reverse Only Letters", "difficulty": "Easy", "description": "Given a string `s`, reverse the string according to the following rules:\n\n*   All the characters that are not English letters remain in the same position.\n*   All the English letters (lowercase or uppercase) should be reversed.\n\nReturn `s` _after reversing it_.\n\n**Example 1:**\n\n**Input:** s = \"ab-cd\"\n**Output:** \"dc-ba\"\n\n**Example 2:**\n\n**Input:** s = \"a-bC-dEf-ghIj\"\n**Output:** \"j-Ih-gfE-dCba\"\n\n**Example 3:**\n\n**Input:** s = \"Test1ng-Leet=code-Q!\"\n**Output:** \"Qedo1ct-eeLg=ntse-T!\"\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists of characters with ASCII values in the range `[33, 122]`.\n*   `s` does not contain `'\\ \"'` or `'\\\\'`."}}
{"922": {"title": "Sort Array By Parity II", "difficulty": "Easy", "description": "Given an array of integers `nums`, half of the integers in `nums` are **odd**, and the other half are **even**.\n\nSort the array so that whenever `nums[i]` is odd, `i` is **odd**, and whenever `nums[i]` is even, `i` is **even**.\n\nReturn _any answer array that satisfies this condition_.\n\n**Example 1:**\n\n**Input:** nums = \\[4,2,5,7\\]\n**Output:** \\[4,5,2,7\\]\n**Explanation:** \\[4,7,2,5\\], \\[2,5,4,7\\], \\[2,7,4,5\\] would also have been accepted.\n\n**Example 2:**\n\n**Input:** nums = \\[2,3\\]\n**Output:** \\[2,3\\]\n\n**Constraints:**\n\n*   `2 <= nums.length <= 2 * 104`\n*   `nums.length` is even.\n*   Half of the integers in `nums` are even.\n*   `0 <= nums[i] <= 1000`\n\n**Follow Up:** Could you solve it in-place?"}}
{"925": {"title": "Long Pressed Name", "difficulty": "Easy", "description": "Your friend is typing his `name` into a keyboard. Sometimes, when typing a character `c`, the key might get _long pressed_, and the character will be typed 1 or more times.\n\nYou examine the `typed` characters of the keyboard. Return `True` if it is possible that it was your friends name, with some characters (possibly none) being long pressed.\n\n**Example 1:**\n\n**Input:** name =  \"alex \", typed =  \"aaleex \"\n**Output:** true\n**Explanation:** 'a' and 'e' in 'alex' were long pressed.\n\n**Example 2:**\n\n**Input:** name =  \"saeed \", typed =  \"ssaaedd \"\n**Output:** false\n**Explanation:** 'e' must have been pressed twice, but it was not in the typed output.\n\n**Constraints:**\n\n*   `1 <= name.length, typed.length <= 1000`\n*   `name` and `typed` consist of only lowercase English letters."}}
{"929": {"title": "Unique Email Addresses", "difficulty": "Easy", "description": "Every **valid email** consists of a **local name** and a **domain name**, separated by the `'@'` sign. Besides lowercase letters, the email may contain one or more `'.'` or `'+'`.\n\n*   For example, in `\"alice@leetcode.com \"`, `\"alice \"` is the **local name**, and `\"leetcode.com \"` is the **domain name**.\n\nIf you add periods `'.'` between some characters in the **local name** part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule **does not apply** to **domain names**.\n\n*   For example, `\"alice.z@leetcode.com \"` and `\"alicez@leetcode.com \"` forward to the same email address.\n\nIf you add a plus `'+'` in the **local name**, everything after the first plus sign **will be ignored**. This allows certain emails to be filtered. Note that this rule **does not apply** to **domain names**.\n\n*   For example, `\"m.y+name@email.com \"` will be forwarded to `\"my@email.com \"`.\n\nIt is possible to use both of these rules at the same time.\n\nGiven an array of strings `emails` where we send one email to each `emails[i]`, return _the number of different addresses that actually receive mails_.\n\n**Example 1:**\n\n**Input:** emails = \\[ \"test.email+alex@leetcode.com \", \"test.e.mail+bob.cathy@leetcode.com \", \"testemail+david@lee.tcode.com \"\\]\n**Output:** 2\n**Explanation:**  \"testemail@leetcode.com \" and  \"testemail@lee.tcode.com \" actually receive mails.\n\n**Example 2:**\n\n**Input:** emails = \\[ \"a@leetcode.com \", \"b@leetcode.com \", \"c@leetcode.com \"\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= emails.length <= 100`\n*   `1 <= emails[i].length <= 100`\n*   `emails[i]` consist of lowercase English letters, `'+'`, `'.'` and `'@'`.\n*   Each `emails[i]` contains exactly one `'@'` character.\n*   All local and domain names are non-empty.\n*   Local names do not start with a `'+'` character.\n*   Domain names end with the `\".com \"` suffix."}}
{"933": {"title": "Number of Recent Calls", "difficulty": "Easy", "description": "You have a `RecentCounter` class which counts the number of recent requests within a certain time frame.\n\nImplement the `RecentCounter` class:\n\n*   `RecentCounter()` Initializes the counter with zero recent requests.\n*   `int ping(int t)` Adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`.\n\nIt is **guaranteed** that every call to `ping` uses a strictly larger value of `t` than the previous call.\n\n**Example 1:**\n\n**Input**\n\\[ \"RecentCounter \",  \"ping \",  \"ping \",  \"ping \",  \"ping \"\\]\n\\[\\[\\], \\[1\\], \\[100\\], \\[3001\\], \\[3002\\]\\]\n**Output**\n\\[null, 1, 2, 3, 3\\]\n\n**Explanation**\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1);     // requests = \\[1\\], range is \\[-2999,1\\], return 1\nrecentCounter.ping(100);   // requests = \\[1, 100\\], range is \\[-2900,100\\], return 2\nrecentCounter.ping(3001);  // requests = \\[1, 100, 3001\\], range is \\[1,3001\\], return 3\nrecentCounter.ping(3002);  // requests = \\[1, 100, 3001, 3002\\], range is \\[2,3002\\], return 3\n\n**Constraints:**\n\n*   `1 <= t <= 109`\n*   Each test case will call `ping` with **strictly increasing** values of `t`.\n*   At most `104` calls will be made to `ping`."}}
{"938": {"title": "Range Sum of BST", "difficulty": "Easy", "description": "Given the `root` node of a binary search tree and two integers `low` and `high`, return _the sum of values of all nodes with a value in the **inclusive** range_ `[low, high]`.\n\n**Example 1:**\n\n**Input:** root = \\[10,5,15,3,7,null,18\\], low = 7, high = 15\n**Output:** 32\n**Explanation:** Nodes 7, 10, and 15 are in the range \\[7, 15\\]. 7 + 10 + 15 = 32.\n\n**Example 2:**\n\n**Input:** root = \\[10,5,15,3,7,13,18,1,null,6\\], low = 6, high = 10\n**Output:** 23\n**Explanation:** Nodes 6, 7, and 10 are in the range \\[6, 10\\]. 6 + 7 + 10 = 23.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 2 * 104]`.\n*   `1 <= Node.val <= 105`\n*   `1 <= low <= high <= 105`\n*   All `Node.val` are **unique**."}}
{"941": {"title": "Valid Mountain Array", "difficulty": "Easy", "description": "Given an array of integers `arr`, return _`true` if and only if it is a valid mountain array_.\n\nRecall that arr is a mountain array if and only if:\n\n*   `arr.length >= 3`\n*   There exists some `i` with `0 < i < arr.length - 1` such that:\n    *   `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n    *   `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\n**Example 1:**\n\n**Input:** arr = \\[2,1\\]\n**Output:** false\n\n**Example 2:**\n\n**Input:** arr = \\[3,5,5\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** arr = \\[0,3,2,1\\]\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= arr.length <= 104`\n*   `0 <= arr[i] <= 104`"}}
{"942": {"title": "DI String Match", "difficulty": "Easy", "description": "A permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` can be represented as a string `s` of length `n` where:\n\n*   `s[i] == 'I'` if `perm[i] < perm[i + 1]`, and\n*   `s[i] == 'D'` if `perm[i] > perm[i + 1]`.\n\nGiven a string `s`, reconstruct the permutation `perm` and return it. If there are multiple valid permutations perm, return **any of them**.\n\n**Example 1:**\n\n**Input:** s = \"IDID\"\n**Output:** \\[0,4,1,3,2\\]\n\n**Example 2:**\n\n**Input:** s = \"III\"\n**Output:** \\[0,1,2,3\\]\n\n**Example 3:**\n\n**Input:** s = \"DDI\"\n**Output:** \\[3,2,0,1\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is either `'I'` or `'D'`."}}
{"944": {"title": "Delete Columns to Make Sorted", "difficulty": "Easy", "description": "You are given an array of `n` strings `strs`, all of the same length.\n\nThe strings can be arranged such that there is one on each line, making a grid.\n\n*   For example, `strs = [ \"abc \", \"bce \", \"cae \"]` can be arranged as follows:\n\nabc\nbce\ncae\n\nYou want to **delete** the columns that are **not sorted lexicographically**. In the above example (**0-indexed**), columns 0 (`'a'`, `'b'`, `'c'`) and 2 (`'c'`, `'e'`, `'e'`) are sorted, while column 1 (`'b'`, `'c'`, `'a'`) is not, so you would delete column 1.\n\nReturn _the number of columns that you will delete_.\n\n**Example 1:**\n\n**Input:** strs = \\[ \"cba \", \"daf \", \"ghi \"\\]\n**Output:** 1\n**Explanation:** The grid looks as follows:\n  cba\n  daf\n  ghi\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.\n\n**Example 2:**\n\n**Input:** strs = \\[ \"a \", \"b \"\\]\n**Output:** 0\n**Explanation:** The grid looks as follows:\n  a\n  b\nColumn 0 is the only column and is sorted, so you will not delete any columns.\n\n**Example 3:**\n\n**Input:** strs = \\[ \"zyx \", \"wvu \", \"tsr \"\\]\n**Output:** 3\n**Explanation:** The grid looks as follows:\n  zyx\n  wvu\n  tsr\nAll 3 columns are not sorted, so you will delete all 3.\n\n**Constraints:**\n\n*   `n == strs.length`\n*   `1 <= n <= 100`\n*   `1 <= strs[i].length <= 1000`\n*   `strs[i]` consists of lowercase English letters."}}
{"953": {"title": "Verifying an Alien Dictionary", "difficulty": "Easy", "description": "In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different `order`. The `order` of the alphabet is some permutation of lowercase letters.\n\nGiven a sequence of `words` written in the alien language, and the `order` of the alphabet, return `true` if and only if the given `words` are sorted lexicographically in this alien language.\n\n**Example 1:**\n\n**Input:** words = \\[ \"hello \", \"leetcode \"\\], order =  \"hlabcdefgijkmnopqrstuvwxyz \"\n**Output:** true\n**Explanation:** As 'h' comes before 'l' in this language, then the sequence is sorted.\n\n**Example 2:**\n\n**Input:** words = \\[ \"word \", \"world \", \"row \"\\], order =  \"worldabcefghijkmnpqstuvxyz \"\n**Output:** false\n**Explanation:** As 'd' comes after 'l' in this language, then words\\[0\\] > words\\[1\\], hence the sequence is unsorted.\n\n**Example 3:**\n\n**Input:** words = \\[ \"apple \", \"app \"\\], order =  \"abcdefghijklmnopqrstuvwxyz \"\n**Output:** false\n**Explanation:** The first three characters  \"app \" match, and the second string is shorter (in size.) According to lexicographical rules  \"apple \" >  \"app \", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character ([More info](https://en.wikipedia.org/wiki/Lexicographical_order)).\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 20`\n*   `order.length == 26`\n*   All characters in `words[i]` and `order` are English lowercase letters."}}
{"961": {"title": "N-Repeated Element in Size 2N Array", "difficulty": "Easy", "description": "You are given an integer array `nums` with the following properties:\n\n*   `nums.length == 2 * n`.\n*   `nums` contains `n + 1` **unique** elements.\n*   Exactly one element of `nums` is repeated `n` times.\n\nReturn _the element that is repeated_ `n` _times_.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,3,3\\]\n**Output:** 3\n\n**Example 2:**\n\n**Input:** nums = \\[2,1,2,5,3,2\\]\n**Output:** 2\n\n**Example 3:**\n\n**Input:** nums = \\[5,1,5,2,5,3,5,4\\]\n**Output:** 5\n\n**Constraints:**\n\n*   `2 <= n <= 5000`\n*   `nums.length == 2 * n`\n*   `0 <= nums[i] <= 104`\n*   `nums` contains `n + 1` **unique** elements and one of them is repeated exactly `n` times."}}
{"965": {"title": "Univalued Binary Tree", "difficulty": "Easy", "description": "A binary tree is **uni-valued** if every node in the tree has the same value.\n\nGiven the `root` of a binary tree, return `true` _if the given tree is **uni-valued**, or_ `false` _otherwise._\n\n**Example 1:**\n\n**Input:** root = \\[1,1,1,1,1,null,1\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** root = \\[2,2,2,5,2\\]\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 100]`.\n*   `0 <= Node.val < 100`"}}
{"976": {"title": "Largest Perimeter Triangle", "difficulty": "Easy", "description": "Given an integer array `nums`, return _the largest perimeter of a triangle with a non-zero area, formed from three of these lengths_. If it is impossible to form any triangle of a non-zero area, return `0`.\n\n**Example 1:**\n\n**Input:** nums = \\[2,1,2\\]\n**Output:** 5\n**Explanation:** You can form a triangle with three side lengths: 1, 2, and 2.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,1,10\\]\n**Output:** 0\n**Explanation:** \nYou cannot use the side lengths 1, 1, and 2 to form a triangle.\nYou cannot use the side lengths 1, 1, and 10 to form a triangle.\nYou cannot use the side lengths 1, 2, and 10 to form a triangle.\nAs we cannot use any three side lengths to form a triangle of non-zero area, we return 0.\n\n**Constraints:**\n\n*   `3 <= nums.length <= 104`\n*   `1 <= nums[i] <= 106`"}}
{"977": {"title": "Squares of a Sorted Array", "difficulty": "Easy", "description": "Given an integer array `nums` sorted in **non-decreasing** order, return _an array of **the squares of each number** sorted in non-decreasing order_.\n\n**Example 1:**\n\n**Input:** nums = \\[-4,-1,0,3,10\\]\n**Output:** \\[0,1,9,16,100\\]\n**Explanation:** After squaring, the array becomes \\[16,1,0,9,100\\].\nAfter sorting, it becomes \\[0,1,9,16,100\\].\n\n**Example 2:**\n\n**Input:** nums = \\[-7,-3,2,3,11\\]\n**Output:** \\[4,9,9,49,121\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-104 <= nums[i] <= 104`\n*   `nums` is sorted in **non-decreasing** order.\n\n**Follow up:** Squaring each element and sorting the new array is very trivial, could you find an `O(n)` solution using a different approach?"}}
{"989": {"title": "Add to Array-Form of Integer", "difficulty": "Easy", "description": "The **array-form** of an integer `num` is an array representing its digits in left to right order.\n\n*   For example, for `num = 1321`, the array form is `[1,3,2,1]`.\n\nGiven `num`, the **array-form** of an integer, and an integer `k`, return _the **array-form** of the integer_ `num + k`.\n\n**Example 1:**\n\n**Input:** num = \\[1,2,0,0\\], k = 34\n**Output:** \\[1,2,3,4\\]\n**Explanation:** 1200 + 34 = 1234\n\n**Example 2:**\n\n**Input:** num = \\[2,7,4\\], k = 181\n**Output:** \\[4,5,5\\]\n**Explanation:** 274 + 181 = 455\n\n**Example 3:**\n\n**Input:** num = \\[2,1,5\\], k = 806\n**Output:** \\[1,0,2,1\\]\n**Explanation:** 215 + 806 = 1021\n\n**Constraints:**\n\n*   `1 <= num.length <= 104`\n*   `0 <= num[i] <= 9`\n*   `num` does not contain any leading zeros except for the zero itself.\n*   `1 <= k <= 104`"}}
{"993": {"title": "Cousins in Binary Tree", "difficulty": "Easy", "description": "Given the `root` of a binary tree with unique values and the values of two different nodes of the tree `x` and `y`, return `true` _if the nodes corresponding to the values_ `x` _and_ `y` _in the tree are **cousins**, or_ `false` _otherwise._\n\nTwo nodes of a binary tree are **cousins** if they have the same depth with different parents.\n\nNote that in a binary tree, the root node is at the depth `0`, and children of each depth `k` node are at the depth `k + 1`.\n\n**Example 1:**\n\n**Input:** root = \\[1,2,3,4\\], x = 4, y = 3\n**Output:** false\n\n**Example 2:**\n\n**Input:** root = \\[1,2,3,null,4,null,5\\], x = 5, y = 4\n**Output:** true\n\n**Example 3:**\n\n**Input:** root = \\[1,2,3,null,4\\], x = 2, y = 3\n**Output:** false\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[2, 100]`.\n*   `1 <= Node.val <= 100`\n*   Each node has a **unique** value.\n*   `x != y`\n*   `x` and `y` are exist in the tree."}}
{"997": {"title": "Find the Town Judge", "difficulty": "Easy", "description": "In a town, there are `n` people labeled from `1` to `n`. There is a rumor that one of these people is secretly the town judge.\n\nIf the town judge exists, then:\n\n1.  The town judge trusts nobody.\n2.  Everybody (except for the town judge) trusts the town judge.\n3.  There is exactly one person that satisfies properties **1** and **2**.\n\nYou are given an array `trust` where `trust[i] = [ai, bi]` representing that the person labeled `ai` trusts the person labeled `bi`. If a trust relationship does not exist in `trust` array, then such a trust relationship does not exist.\n\nReturn _the label of the town judge if the town judge exists and can be identified, or return_ `-1` _otherwise_.\n\n**Example 1:**\n\n**Input:** n = 2, trust = \\[\\[1,2\\]\\]\n**Output:** 2\n\n**Example 2:**\n\n**Input:** n = 3, trust = \\[\\[1,3\\],\\[2,3\\]\\]\n**Output:** 3\n\n**Example 3:**\n\n**Input:** n = 3, trust = \\[\\[1,3\\],\\[2,3\\],\\[3,1\\]\\]\n**Output:** -1\n\n**Constraints:**\n\n*   `1 <= n <= 1000`\n*   `0 <= trust.length <= 104`\n*   `trust[i].length == 2`\n*   All the pairs of `trust` are **unique**.\n*   `ai != bi`\n*   `1 <= ai, bi <= n`"}}
{"999": {"title": "Available Captures for Rook", "difficulty": "Easy", "description": "On an `8 x 8` chessboard, there is **exactly one** white rook `'R'` and some number of white bishops `'B'`, black pawns `'p'`, and empty squares `'.'`.\n\nWhen the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered **attacking** a pawn if the rook can capture the pawn on the rook's turn. The **number of available captures** for the white rook is the number of pawns that the rook is **attacking**.\n\nReturn _the **number of available captures** for the white rook_.\n\n**Example 1:**\n\n**Input:** board = \\[\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"R \", \". \", \". \", \". \", \"p \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\]\\]\n**Output:** 3\n**Explanation:** In this example, the rook is attacking all the pawns.\n\n**Example 2:**\n\n**Input:** board = \\[\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \"p \", \"p \", \"p \", \"p \", \"p \", \". \", \". \"\\],\\[ \". \", \"p \", \"p \", \"B \", \"p \", \"p \", \". \", \". \"\\],\\[ \". \", \"p \", \"B \", \"R \", \"B \", \"p \", \". \", \". \"\\],\\[ \". \", \"p \", \"p \", \"B \", \"p \", \"p \", \". \", \". \"\\],\\[ \". \", \"p \", \"p \", \"p \", \"p \", \"p \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\]\\]\n**Output:** 0\n**Explanation:** The bishops are blocking the rook from attacking any of the pawns.\n\n**Example 3:**\n\n**Input:** board = \\[\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \"p \", \"p \", \". \", \"R \", \". \", \"p \", \"B \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"B \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \"p \", \". \", \". \", \". \", \". \"\\],\\[ \". \", \". \", \". \", \". \", \". \", \". \", \". \", \". \"\\]\\]\n**Output:** 3\n**Explanation:** The rook is attacking the pawns at positions b5, d6, and f5.\n\n**Constraints:**\n\n*   `board.length == 8`\n*   `board[i].length == 8`\n*   `board[i][j]` is either `'R'`, `'.'`, `'B'`, or `'p'`\n*   There is exactly one cell with `board[i][j] == 'R'`"}}
{"1002": {"title": "Find Common Characters", "difficulty": "Easy", "description": "Given a string array `words`, return _an array of all characters that show up in all strings within the_ `words` _(including duplicates)_. You may return the answer in **any order**.\n\n**Example 1:**\n\n**Input:** words = \\[\"bella\",\"label\",\"roller\"\\]\n**Output:** \\[\"e\",\"l\",\"l\"\\]\n\n**Example 2:**\n\n**Input:** words = \\[\"cool\",\"lock\",\"cook\"\\]\n**Output:** \\[\"c\",\"o\"\\]\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 100`\n*   `words[i]` consists of lowercase English letters."}}
{"1005": {"title": "Maximize Sum Of Array After K Negations", "difficulty": "Easy", "description": "Given an integer array `nums` and an integer `k`, modify the array in the following way:\n\n*   choose an index `i` and replace `nums[i]` with `-nums[i]`.\n\nYou should apply this process exactly `k` times. You may choose the same index `i` multiple times.\n\nReturn _the largest possible sum of the array after modifying it in this way_.\n\n**Example 1:**\n\n**Input:** nums = \\[4,2,3\\], k = 1\n**Output:** 5\n**Explanation:** Choose index 1 and nums becomes \\[4,-2,3\\].\n\n**Example 2:**\n\n**Input:** nums = \\[3,-1,0,2\\], k = 3\n**Output:** 6\n**Explanation:** Choose indices (1, 2, 2) and nums becomes \\[3,1,0,2\\].\n\n**Example 3:**\n\n**Input:** nums = \\[2,-3,-1,5,-4\\], k = 2\n**Output:** 13\n**Explanation:** Choose indices (1, 4) and nums becomes \\[2,3,-1,5,4\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 104`\n*   `-100 <= nums[i] <= 100`\n*   `1 <= k <= 104`"}}
{"1009": {"title": "Complement of Base 10 Integer", "difficulty": "Easy", "description": "The **complement** of an integer is the integer you get when you flip all the `0`'s to `1`'s and all the `1`'s to `0`'s in its binary representation.\n\n*   For example, The integer `5` is `\"101 \"` in binary and its **complement** is `\"010 \"` which is the integer `2`.\n\nGiven an integer `n`, return _its complement_.\n\n**Example 1:**\n\n**Input:** n = 5\n**Output:** 2\n**Explanation:** 5 is  \"101 \" in binary, with complement  \"010 \" in binary, which is 2 in base-10.\n\n**Example 2:**\n\n**Input:** n = 7\n**Output:** 0\n**Explanation:** 7 is  \"111 \" in binary, with complement  \"000 \" in binary, which is 0 in base-10.\n\n**Example 3:**\n\n**Input:** n = 10\n**Output:** 5\n**Explanation:** 10 is  \"1010 \" in binary, with complement  \"0101 \" in binary, which is 5 in base-10.\n\n**Constraints:**\n\n*   `0 <= n < 109`\n\n**Note:** This question is the same as 476: [https://leetcode.com/problems/number-complement/](https://leetcode.com/problems/number-complement/)"}}
{"1013": {"title": "Partition Array Into Three Parts With Equal Sum", "difficulty": "Easy", "description": "Given an array of integers `arr`, return `true` if we can partition the array into three **non-empty** parts with equal sums.\n\nFormally, we can partition the array if we can find indexes `i + 1 < j` with `(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])`\n\n**Example 1:**\n\n**Input:** arr = \\[0,2,1,-6,6,-7,9,1,2,0,1\\]\n**Output:** true\n**Explanation:** 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n\n**Example 2:**\n\n**Input:** arr = \\[0,2,1,-6,6,7,9,-1,2,0,1\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** arr = \\[3,3,6,5,-2,2,5,1,-9,4\\]\n**Output:** true\n**Explanation:** 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n\n**Constraints:**\n\n*   `3 <= arr.length <= 5 * 104`\n*   `-104 <= arr[i] <= 104`"}}
{"1018": {"title": "Binary Prefix Divisible By 5", "difficulty": "Easy", "description": "You are given a binary array `nums` (**0-indexed**).\n\nWe define `xi` as the number whose binary representation is the subarray `nums[0..i]` (from most-significant-bit to least-significant-bit).\n\n*   For example, if `nums = [1,0,1]`, then `x0 = 1`, `x1 = 2`, and `x2 = 5`.\n\nReturn _an array of booleans_ `answer` _where_ `answer[i]` _is_ `true` _if_ `xi` _is divisible by_ `5`.\n\n**Example 1:**\n\n**Input:** nums = \\[0,1,1\\]\n**Output:** \\[true,false,false\\]\n**Explanation:** The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.\nOnly the first number is divisible by 5, so answer\\[0\\] is true.\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1\\]\n**Output:** \\[false,false,false\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `nums[i]` is either `0` or `1`."}}
{"1021": {"title": "Remove Outermost Parentheses", "difficulty": "Easy", "description": "A valid parentheses string is either empty `\" \"`, `\"( \" + A + \") \"`, or `A + B`, where `A` and `B` are valid parentheses strings, and `+` represents string concatenation.\n\n*   For example, `\" \"`, `\"() \"`, `\"(())() \"`, and `\"(()(())) \"` are all valid parentheses strings.\n\nA valid parentheses string `s` is primitive if it is nonempty, and there does not exist a way to split it into `s = A + B`, with `A` and `B` nonempty valid parentheses strings.\n\nGiven a valid parentheses string `s`, consider its primitive decomposition: `s = P1 + P2 + ... + Pk`, where `Pi` are primitive valid parentheses strings.\n\nReturn `s` _after removing the outermost parentheses of every primitive string in the primitive decomposition of_ `s`.\n\n**Example 1:**\n\n**Input:** s =  \"(()())(()) \"\n**Output:**  \"()()() \"\n**Explanation:** \nThe input string is  \"(()())(()) \", with primitive decomposition  \"(()()) \" +  \"(()) \".\nAfter removing outer parentheses of each part, this is  \"()() \" +  \"() \" =  \"()()() \".\n\n**Example 2:**\n\n**Input:** s =  \"(()())(())(()(())) \"\n**Output:**  \"()()()()(()) \"\n**Explanation:** \nThe input string is  \"(()())(())(()(())) \", with primitive decomposition  \"(()()) \" +  \"(()) \" +  \"(()(())) \".\nAfter removing outer parentheses of each part, this is  \"()() \" +  \"() \" +  \"()(()) \" =  \"()()()()(()) \".\n\n**Example 3:**\n\n**Input:** s =  \"()() \"\n**Output:**  \" \"\n**Explanation:** \nThe input string is  \"()() \", with primitive decomposition  \"() \" +  \"() \".\nAfter removing outer parentheses of each part, this is  \" \" +  \" \" =  \" \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s[i]` is either `'('` or `')'`.\n*   `s` is a valid parentheses string."}}
{"1022": {"title": "Sum of Root To Leaf Binary Numbers", "difficulty": "Easy", "description": "You are given the `root` of a binary tree where each node has a value `0` or `1`. Each root-to-leaf path represents a binary number starting with the most significant bit.\n\n*   For example, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then this could represent `01101` in binary, which is `13`.\n\nFor all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return _the sum of these numbers_.\n\nThe test cases are generated so that the answer fits in a **32-bits** integer.\n\n**Example 1:**\n\n**Input:** root = \\[1,0,1,0,1,0,1\\]\n**Output:** 22\n**Explanation:** (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\n\n**Example 2:**\n\n**Input:** root = \\[0\\]\n**Output:** 0\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 1000]`.\n*   `Node.val` is `0` or `1`."}}
{"1025": {"title": "Divisor Game", "difficulty": "Easy", "description": "Alice and Bob take turns playing a game, with Alice starting first.\n\nInitially, there is a number `n` on the chalkboard. On each player's turn, that player makes a move consisting of:\n\n*   Choosing any `x` with `0 < x < n` and `n % x == 0`.\n*   Replacing the number `n` on the chalkboard with `n - x`.\n\nAlso, if a player cannot make a move, they lose the game.\n\nReturn `true` _if and only if Alice wins the game, assuming both players play optimally_.\n\n**Example 1:**\n\n**Input:** n = 2\n**Output:** true\n**Explanation:** Alice chooses 1, and Bob has no more moves.\n\n**Example 2:**\n\n**Input:** n = 3\n**Output:** false\n**Explanation:** Alice chooses 1, Bob chooses 1, and Alice has no more moves.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`"}}
{"1030": {"title": "Matrix Cells in Distance Order", "difficulty": "Easy", "description": "You are given four integers `row`, `cols`, `rCenter`, and `cCenter`. There is a `rows x cols` matrix and you are on the cell with the coordinates `(rCenter, cCenter)`.\n\nReturn _the coordinates of all cells in the matrix, sorted by their **distance** from_ `(rCenter, cCenter)` _from the smallest distance to the largest distance_. You may return the answer in **any order** that satisfies this condition.\n\nThe **distance** between two cells `(r1, c1)` and `(r2, c2)` is `|r1 - r2| + |c1 - c2|`.\n\n**Example 1:**\n\n**Input:** rows = 1, cols = 2, rCenter = 0, cCenter = 0\n**Output:** \\[\\[0,0\\],\\[0,1\\]\\]\n**Explanation:** The distances from (0, 0) to other cells are: \\[0,1\\]\n\n**Example 2:**\n\n**Input:** rows = 2, cols = 2, rCenter = 0, cCenter = 1\n**Output:** \\[\\[0,1\\],\\[0,0\\],\\[1,1\\],\\[1,0\\]\\]\n**Explanation:** The distances from (0, 1) to other cells are: \\[0,1,1,2\\]\nThe answer \\[\\[0,1\\],\\[1,1\\],\\[0,0\\],\\[1,0\\]\\] would also be accepted as correct.\n\n**Example 3:**\n\n**Input:** rows = 2, cols = 3, rCenter = 1, cCenter = 2\n**Output:** \\[\\[1,2\\],\\[0,2\\],\\[1,1\\],\\[0,1\\],\\[1,0\\],\\[0,0\\]\\]\n**Explanation:** The distances from (1, 2) to other cells are: \\[0,1,1,2,2,3\\]\nThere are other answers that would also be accepted as correct, such as \\[\\[1,2\\],\\[1,1\\],\\[0,2\\],\\[1,0\\],\\[0,1\\],\\[0,0\\]\\].\n\n**Constraints:**\n\n*   `1 <= rows, cols <= 100`\n*   `0 <= rCenter < rows`\n*   `0 <= cCenter < cols`"}}
{"1037": {"title": "Valid Boomerang", "difficulty": "Easy", "description": "Given an array `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane, return `true` _if these points are a **boomerang**_.\n\nA **boomerang** is a set of three points that are **all distinct** and **not in a straight line**.\n\n**Example 1:**\n\n**Input:** points = \\[\\[1,1\\],\\[2,3\\],\\[3,2\\]\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** points = \\[\\[1,1\\],\\[2,2\\],\\[3,3\\]\\]\n**Output:** false\n\n**Constraints:**\n\n*   `points.length == 3`\n*   `points[i].length == 2`\n*   `0 <= xi, yi <= 100`"}}
{"1046": {"title": "Last Stone Weight", "difficulty": "Easy", "description": "You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone.\n\nWe are playing a game with the stones. On each turn, we choose the **heaviest two stones** and smash them together. Suppose the heaviest two stones have weights `x` and `y` with `x <= y`. The result of this smash is:\n\n*   If `x == y`, both stones are destroyed, and\n*   If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`.\n\nAt the end of the game, there is **at most one** stone left.\n\nReturn _the weight of the last remaining stone_. If there are no stones left, return `0`.\n\n**Example 1:**\n\n**Input:** stones = \\[2,7,4,1,8,1\\]\n**Output:** 1\n**Explanation:** \nWe combine 7 and 8 to get 1 so the array converts to \\[2,4,1,1,1\\] then,\nwe combine 2 and 4 to get 2 so the array converts to \\[2,1,1,1\\] then,\nwe combine 2 and 1 to get 1 so the array converts to \\[1,1,1\\] then,\nwe combine 1 and 1 to get 0 so the array converts to \\[1\\] then that's the value of the last stone.\n\n**Example 2:**\n\n**Input:** stones = \\[1\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= stones.length <= 30`\n*   `1 <= stones[i] <= 1000`"}}
{"1047": {"title": "Remove All Adjacent Duplicates In String", "difficulty": "Easy", "description": "You are given a string `s` consisting of lowercase English letters. A **duplicate removal** consists of choosing two **adjacent** and **equal** letters and removing them.\n\nWe repeatedly make **duplicate removals** on `s` until we no longer can.\n\nReturn _the final string after all such duplicate removals have been made_. It can be proven that the answer is **unique**.\n\n**Example 1:**\n\n**Input:** s =  \"abbaca \"\n**Output:**  \"ca \"\n**Explanation:** \nFor example, in  \"abbaca \" we could remove  \"bb \" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is  \"aaca \", of which only  \"aa \" is possible, so the final string is  \"ca \".\n\n**Example 2:**\n\n**Input:** s =  \"azxxzy \"\n**Output:**  \"ay \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists of lowercase English letters."}}
{"1051": {"title": "Height Checker", "difficulty": "Easy", "description": "A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in **non-decreasing order** by height. Let this ordering be represented by the integer array `expected` where `expected[i]` is the expected height of the `ith` student in line.\n\nYou are given an integer array `heights` representing the **current order** that the students are standing in. Each `heights[i]` is the height of the `ith` student in line (**0-indexed**).\n\nReturn _the **number of indices** where_ `heights[i] != expected[i]`.\n\n**Example 1:**\n\n**Input:** heights = \\[1,1,4,2,1,3\\]\n**Output:** 3\n**Explanation:** \nheights:  \\[1,1,4,2,1,3\\]\nexpected: \\[1,1,1,2,3,4\\]\nIndices 2, 4, and 5 do not match.\n\n**Example 2:**\n\n**Input:** heights = \\[5,1,2,3,4\\]\n**Output:** 5\n**Explanation:**\nheights:  \\[5,1,2,3,4\\]\nexpected: \\[1,2,3,4,5\\]\nAll indices do not match.\n\n**Example 3:**\n\n**Input:** heights = \\[1,2,3,4,5\\]\n**Output:** 0\n**Explanation:**\nheights:  \\[1,2,3,4,5\\]\nexpected: \\[1,2,3,4,5\\]\nAll indices match.\n\n**Constraints:**\n\n*   `1 <= heights.length <= 100`\n*   `1 <= heights[i] <= 100`"}}
{"1056": {"title": "Confusing Number", "difficulty": "Easy", "description": "A **confusing number** is a number that when rotated `180` degrees becomes a different number with **each digit valid**.\n\nWe can rotate digits of a number by `180` degrees to form new digits.\n\n*   When `0`, `1`, `6`, `8`, and `9` are rotated `180` degrees, they become `0`, `1`, `9`, `8`, and `6` respectively.\n*   When `2`, `3`, `4`, `5`, and `7` are rotated `180` degrees, they become **invalid**.\n\nNote that after rotating a number, we can ignore leading zeros.\n\n*   For example, after rotating `8000`, we have `0008` which is considered as just `8`.\n\nGiven an integer `n`, return `true` _if it is a **confusing number**, or_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** n = 6\n**Output:** true\n**Explanation:** We get 9 after rotating 6, 9 is a valid number, and 9 != 6.\n\n**Example 2:**\n\n**Input:** n = 89\n**Output:** true\n**Explanation:** We get 68 after rotating 89, 68 is a valid number and 68 != 89.\n\n**Example 3:**\n\n**Input:** n = 11\n**Output:** false\n**Explanation:** We get 11 after rotating 11, 11 is a valid number but the value remains the same, thus 11 is not a confusing number\n\n**Constraints:**\n\n*   `0 <= n <= 109`"}}
{"1064": {"title": "Fixed Point", "difficulty": "Easy", "description": "Given an array of distinct integers `arr`, where `arr` is sorted in **ascending order**, return the smallest index `i` that satisfies `arr[i] == i`. If there is no such index, return `-1`.\n\n**Example 1:**\n\n**Input:** arr = \\[-10,-5,0,3,7\\]\n**Output:** 3\n**Explanation:** For the given array, `arr[0] = -10, arr[1] = -5, arr[2] = 0, arr[3] = 3`, thus the output is 3.\n\n**Example 2:**\n\n**Input:** arr = \\[0,2,5,8,17\\]\n**Output:** 0\n**Explanation:** `arr[0] = 0`, thus the output is 0.\n\n**Example 3:**\n\n**Input:** arr = \\[-10,-5,3,4,7,9\\]\n**Output:** -1\n**Explanation:** There is no such `i` that `arr[i] == i`, thus the output is -1.\n\n**Constraints:**\n\n*   `1 <= arr.length < 104`\n*   `-109 <= arr[i] <= 109`\n\n**Follow up:** The `O(n)` solution is very straightforward. Can we do better?"}}
{"1065": {"title": "Index Pairs of a String", "difficulty": "Easy", "description": "Given a string `text` and an array of strings `words`, return _an array of all index pairs_ `[i, j]` _so that the substring_ `text[i...j]` _is in `words`_.\n\nReturn the pairs `[i, j]` in sorted order (i.e., sort them by their first coordinate, and in case of ties sort them by their second coordinate).\n\n**Example 1:**\n\n**Input:** text =  \"thestoryofleetcodeandme \", words = \\[ \"story \", \"fleet \", \"leetcode \"\\]\n**Output:** \\[\\[3,7\\],\\[9,13\\],\\[10,17\\]\\]\n\n**Example 2:**\n\n**Input:** text =  \"ababa \", words = \\[ \"aba \", \"ab \"\\]\n**Output:** \\[\\[0,1\\],\\[0,2\\],\\[2,3\\],\\[2,4\\]\\]\n**Explanation:** Notice that matches can overlap, see  \"aba \" is found in \\[0,2\\] and \\[2,4\\].\n\n**Constraints:**\n\n*   `1 <= text.length <= 100`\n*   `1 <= words.length <= 20`\n*   `1 <= words[i].length <= 50`\n*   `text` and `words[i]` consist of lowercase English letters.\n*   All the strings of `words` are **unique**."}}
{"1071": {"title": "Greatest Common Divisor of Strings", "difficulty": "Easy", "description": "For two strings `s` and `t`, we say \"`t` divides `s` \" if and only if `s = t + ... + t` (i.e., `t` is concatenated with itself one or more times).\n\nGiven two strings `str1` and `str2`, return _the largest string_ `x` _such that_ `x` _divides both_ `str1` _and_ `str2`.\n\n**Example 1:**\n\n**Input:** str1 =  \"ABCABC \", str2 =  \"ABC \"\n**Output:**  \"ABC \"\n\n**Example 2:**\n\n**Input:** str1 =  \"ABABAB \", str2 =  \"ABAB \"\n**Output:**  \"AB \"\n\n**Example 3:**\n\n**Input:** str1 =  \"LEET \", str2 =  \"CODE \"\n**Output:**  \" \"\n\n**Constraints:**\n\n*   `1 <= str1.length, str2.length <= 1000`\n*   `str1` and `str2` consist of English uppercase letters."}}
{"1078": {"title": "Occurrences After Bigram", "difficulty": "Easy", "description": "Given two strings `first` and `second`, consider occurrences in some text of the form `\"first second third \"`, where `second` comes immediately after `first`, and `third` comes immediately after `second`.\n\nReturn _an array of all the words_ `third` _for each occurrence of_ `\"first second third \"`.\n\n**Example 1:**\n\n**Input:** text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"\n**Output:** \\[\"girl\",\"student\"\\]\n\n**Example 2:**\n\n**Input:** text = \"we will we will rock you\", first = \"we\", second = \"will\"\n**Output:** \\[\"we\",\"rock\"\\]\n\n**Constraints:**\n\n*   `1 <= text.length <= 1000`\n*   `text` consists of lowercase English letters and spaces.\n*   All the words in `text` a separated by **a single space**.\n*   `1 <= first.length, second.length <= 10`\n*   `first` and `second` consist of lowercase English letters."}}
{"1085": {"title": "Sum of Digits in the Minimum Number", "difficulty": "Easy", "description": "Given an integer array `nums`, return `0` _if the sum of the digits of the minimum integer in_ `nums` _is odd, or_ `1` _otherwise_.\n\n**Example 1:**\n\n**Input:** nums = \\[34,23,1,24,75,33,54,8\\]\n**Output:** 0\n**Explanation:** The minimal element is 1, and the sum of those digits is 1 which is odd, so the answer is 0.\n\n**Example 2:**\n\n**Input:** nums = \\[99,77,33,66,55\\]\n**Output:** 1\n**Explanation:** The minimal element is 33, and the sum of those digits is 3 + 3 = 6 which is even, so the answer is 1.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 100`"}}
{"1086": {"title": "High Five", "difficulty": "Easy", "description": "Given a list of the scores of different students, `items`, where `items[i] = [IDi, scorei]` represents one score from a student with `IDi`, calculate each student's **top five average**.\n\nReturn _the answer as an array of pairs_ `result`_, where_ `result[j] = [IDj, topFiveAveragej]` _represents the student with_ `IDj` _and their **top five average**. Sort_ `result` _by_ `IDj` _in **increasing order**._\n\nA student's **top five average** is calculated by taking the sum of their top five scores and dividing it by `5` using **integer division**.\n\n**Example 1:**\n\n**Input:** items = \\[\\[1,91\\],\\[1,92\\],\\[2,93\\],\\[2,97\\],\\[1,60\\],\\[2,77\\],\\[1,65\\],\\[1,87\\],\\[1,100\\],\\[2,100\\],\\[2,76\\]\\]\n**Output:** \\[\\[1,87\\],\\[2,88\\]\\]\n**Explanation:** \nThe student with ID = 1 got scores 91, 92, 60, 65, 87, and 100. Their top five average is (100 + 92 + 91 + 87 + 65) / 5 = 87.\nThe student with ID = 2 got scores 93, 97, 77, 100, and 76. Their top five average is (100 + 97 + 93 + 77 + 76) / 5 = 88.6, but with integer division their average converts to 88.\n\n**Example 2:**\n\n**Input:** items = \\[\\[1,100\\],\\[7,100\\],\\[1,100\\],\\[7,100\\],\\[1,100\\],\\[7,100\\],\\[1,100\\],\\[7,100\\],\\[1,100\\],\\[7,100\\]\\]\n**Output:** \\[\\[1,100\\],\\[7,100\\]\\]\n\n**Constraints:**\n\n*   `1 <= items.length <= 1000`\n*   `items[i].length == 2`\n*   `1 <= IDi <= 1000`\n*   `0 <= scorei <= 100`\n*   For each `IDi`, there will be **at least** five scores."}}
{"1089": {"title": "Duplicate Zeros", "difficulty": "Easy", "description": "Given a fixed-length integer array `arr`, duplicate each occurrence of zero, shifting the remaining elements to the right.\n\n**Note** that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.\n\n**Example 1:**\n\n**Input:** arr = \\[1,0,2,3,0,4,5,0\\]\n**Output:** \\[1,0,0,2,3,0,0,4\\]\n**Explanation:** After calling your function, the input array is modified to: \\[1,0,0,2,3,0,0,4\\]\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,3\\]\n**Output:** \\[1,2,3\\]\n**Explanation:** After calling your function, the input array is modified to: \\[1,2,3\\]\n\n**Constraints:**\n\n*   `1 <= arr.length <= 104`\n*   `0 <= arr[i] <= 9`"}}
{"1099": {"title": "Two Sum Less Than K", "difficulty": "Easy", "description": "Given an array `nums` of integers and integer `k`, return the maximum `sum` such that there exists `i < j` with `nums[i] + nums[j] = sum` and `sum < k`. If no `i`, `j` exist satisfying this equation, return `-1`.\n\n**Example 1:**\n\n**Input:** nums = \\[34,23,1,24,75,33,54,8\\], k = 60\n**Output:** 58\n**Explanation:** We can use 34 and 24 to sum 58 which is less than 60.\n\n**Example 2:**\n\n**Input:** nums = \\[10,20,30\\], k = 15\n**Output:** -1\n**Explanation:** In this case it is not possible to get a pair sum less that 15.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 1000`\n*   `1 <= k <= 2000`"}}
{"1103": {"title": "Distribute Candies to People", "difficulty": "Easy", "description": "We distribute some number of `candies`, to a row of **`n = num_people`** people in the following way:\n\nWe then give 1 candy to the first person, 2 candies to the second person, and so on until we give `n` candies to the last person.\n\nThen, we go back to the start of the row, giving `n + 1` candies to the first person, `n + 2` candies to the second person, and so on until we give `2 * n` candies to the last person.\n\nThis process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies. The last person will receive all of our remaining candies (not necessarily one more than the previous gift).\n\nReturn an array (of length `num_people` and sum `candies`) that represents the final distribution of candies.\n\n**Example 1:**\n\n**Input:** candies = 7, num\\_people = 4\n**Output:** \\[1,2,3,1\\]\n**Explanation:**\nOn the first turn, ans\\[0\\] += 1, and the array is \\[1,0,0,0\\].\nOn the second turn, ans\\[1\\] += 2, and the array is \\[1,2,0,0\\].\nOn the third turn, ans\\[2\\] += 3, and the array is \\[1,2,3,0\\].\nOn the fourth turn, ans\\[3\\] += 1 (because there is only one candy left), and the final array is \\[1,2,3,1\\].\n\n**Example 2:**\n\n**Input:** candies = 10, num\\_people = 3\n**Output:** \\[5,2,3\\]\n**Explanation:** \nOn the first turn, ans\\[0\\] += 1, and the array is \\[1,0,0\\].\nOn the second turn, ans\\[1\\] += 2, and the array is \\[1,2,0\\].\nOn the third turn, ans\\[2\\] += 3, and the array is \\[1,2,3\\].\nOn the fourth turn, ans\\[0\\] += 4, and the final array is \\[5,2,3\\].\n\n**Constraints:**\n\n*   1 <= candies <= 10^9\n*   1 <= num\\_people <= 1000"}}
{"1108": {"title": "Defanging an IP Address", "difficulty": "Easy", "description": "Given a valid (IPv4) IP `address`, return a defanged version of that IP address.\n\nA _defanged IP address_ replaces every period `\". \"` with `\"[.] \"`.\n\n**Example 1:**\n\n**Input:** address = \"1.1.1.1\"\n**Output:** \"1\\[.\\]1\\[.\\]1\\[.\\]1\"\n\n**Example 2:**\n\n**Input:** address = \"255.100.50.0\"\n**Output:** \"255\\[.\\]100\\[.\\]50\\[.\\]0\"\n\n**Constraints:**\n\n*   The given `address` is a valid IPv4 address."}}
{"1118": {"title": "Number of Days in a Month", "difficulty": "Easy", "description": "Given a year `year` and a month `month`, return _the number of days of that month_.\n\n**Example 1:**\n\n**Input:** year = 1992, month = 7\n**Output:** 31\n\n**Example 2:**\n\n**Input:** year = 2000, month = 2\n**Output:** 29\n\n**Example 3:**\n\n**Input:** year = 1900, month = 2\n**Output:** 28\n\n**Constraints:**\n\n*   `1583 <= year <= 2100`\n*   `1 <= month <= 12`"}}
{"1119": {"title": "Remove Vowels from a String", "difficulty": "Easy", "description": "Given a string `s`, remove the vowels `'a'`, `'e'`, `'i'`, `'o'`, and `'u'` from it, and return the new string.\n\n**Example 1:**\n\n**Input:** s =  \"leetcodeisacommunityforcoders \"\n**Output:**  \"ltcdscmmntyfrcdrs \"\n\n**Example 2:**\n\n**Input:** s =  \"aeiou \"\n**Output:**  \" \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of only lowercase English letters."}}
{"1122": {"title": "Relative Sort Array", "difficulty": "Easy", "description": "Given two arrays `arr1` and `arr2`, the elements of `arr2` are distinct, and all elements in `arr2` are also in `arr1`.\n\nSort the elements of `arr1` such that the relative ordering of items in `arr1` are the same as in `arr2`. Elements that do not appear in `arr2` should be placed at the end of `arr1` in **ascending** order.\n\n**Example 1:**\n\n**Input:** arr1 = \\[2,3,1,3,2,4,6,7,9,2,19\\], arr2 = \\[2,1,4,3,9,6\\]\n**Output:** \\[2,2,2,1,4,3,3,9,6,7,19\\]\n\n**Example 2:**\n\n**Input:** arr1 = \\[28,6,22,8,44,17\\], arr2 = \\[22,28,8,6\\]\n**Output:** \\[22,28,8,6,17,44\\]\n\n**Constraints:**\n\n*   `1 <= arr1.length, arr2.length <= 1000`\n*   `0 <= arr1[i], arr2[i] <= 1000`\n*   All the elements of `arr2` are **distinct**.\n*   Each `arr2[i]` is in `arr1`."}}
{"1128": {"title": "Number of Equivalent Domino Pairs", "difficulty": "Easy", "description": "Given a list of `dominoes`, `dominoes[i] = [a, b]` is **equivalent to** `dominoes[j] = [c, d]` if and only if either (`a == c` and `b == d`), or (`a == d` and `b == c`) - that is, one domino can be rotated to be equal to another domino.\n\nReturn _the number of pairs_ `(i, j)` _for which_ `0 <= i < j < dominoes.length`_, and_ `dominoes[i]` _is **equivalent to**_ `dominoes[j]`.\n\n**Example 1:**\n\n**Input:** dominoes = \\[\\[1,2\\],\\[2,1\\],\\[3,4\\],\\[5,6\\]\\]\n**Output:** 1\n\n**Example 2:**\n\n**Input:** dominoes = \\[\\[1,2\\],\\[1,2\\],\\[1,1\\],\\[1,2\\],\\[2,2\\]\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= dominoes.length <= 4 * 104`\n*   `dominoes[i].length == 2`\n*   `1 <= dominoes[i][j] <= 9`"}}
{"1133": {"title": "Largest Unique Number", "difficulty": "Easy", "description": "Given an integer array `nums`, return _the largest integer that only occurs once_. If no integer occurs once, return `-1`.\n\n**Example 1:**\n\n**Input:** nums = \\[5,7,3,9,4,9,8,3,1\\]\n**Output:** 8\n**Explanation:** The maximum integer in the array is 9 but it is repeated. The number 8 occurs only once, so it is the answer.\n\n**Example 2:**\n\n**Input:** nums = \\[9,9,8,8\\]\n**Output:** -1\n**Explanation:** There is no number that occurs only once.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2000`\n*   `0 <= nums[i] <= 1000`"}}
{"1134": {"title": "Armstrong Number", "difficulty": "Easy", "description": "Given an integer `n`, return `true` _if and only if it is an **Armstrong number**_.\n\nThe `k`\\-digit number `n` is an Armstrong number if and only if the `kth` power of each digit sums to `n`.\n\n**Example 1:**\n\n**Input:** n = 153\n**Output:** true\n**Explanation:** 153 is a 3-digit number, and 153 = 13 + 53 + 33.\n\n**Example 2:**\n\n**Input:** n = 123\n**Output:** false\n**Explanation:** 123 is a 3-digit number, and 123 != 13 + 23 + 33 = 36.\n\n**Constraints:**\n\n*   `1 <= n <= 108`"}}
{"1137": {"title": "N-th Tribonacci Number", "difficulty": "Easy", "description": "The Tribonacci sequence Tn is defined as follows:\n\nT0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\n\nGiven `n`, return the value of Tn.\n\n**Example 1:**\n\n**Input:** n = 4\n**Output:** 4\n**Explanation:**\nT\\_3 = 0 + 1 + 1 = 2\nT\\_4 = 1 + 1 + 2 = 4\n\n**Example 2:**\n\n**Input:** n = 25\n**Output:** 1389537\n\n**Constraints:**\n\n*   `0 <= n <= 37`\n*   The answer is guaranteed to fit within a 32-bit integer, ie. `answer <= 2^31 - 1`."}}
{"1150": {"title": "Check If a Number Is Majority Element in a Sorted Array", "difficulty": "Easy", "description": "Given an integer array `nums` sorted in non-decreasing order and an integer `target`, return `true` _if_ `target` _is a **majority** element, or_ `false` _otherwise_.\n\nA **majority** element in an array `nums` is an element that appears more than `nums.length / 2` times in the array.\n\n**Example 1:**\n\n**Input:** nums = \\[2,4,5,5,5,5,5,6,6\\], target = 5\n**Output:** true\n**Explanation:** The value 5 appears 5 times and the length of the array is 9.\nThus, 5 is a majority element because 5 > 9/2 is true.\n\n**Example 2:**\n\n**Input:** nums = \\[10,100,101,101\\], target = 101\n**Output:** false\n**Explanation:** The value 101 appears 2 times and the length of the array is 4.\nThus, 101 is not a majority element because 2 > 4/2 is false.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i], target <= 109`\n*   `nums` is sorted in non-decreasing order."}}
{"1154": {"title": "Day of the Year", "difficulty": "Easy", "description": "Given a string `date` representing a [Gregorian calendar](https://en.wikipedia.org/wiki/Gregorian_calendar) date formatted as `YYYY-MM-DD`, return _the day number of the year_.\n\n**Example 1:**\n\n**Input:** date =  \"2019-01-09 \"\n**Output:** 9\n**Explanation:** Given date is the 9th day of the year in 2019.\n\n**Example 2:**\n\n**Input:** date =  \"2019-02-10 \"\n**Output:** 41\n\n**Constraints:**\n\n*   `date.length == 10`\n*   `date[4] == date[7] == '-'`, and all other `date[i]`'s are digits\n*   `date` represents a calendar date between Jan 1st, 1900 and Dec 31th, 2019."}}
{"1160": {"title": "Find Words That Can Be Formed by Characters", "difficulty": "Easy", "description": "You are given an array of strings `words` and a string `chars`.\n\nA string is **good** if it can be formed by characters from chars (each character can only be used once).\n\nReturn _the sum of lengths of all good strings in words_.\n\n**Example 1:**\n\n**Input:** words = \\[ \"cat \", \"bt \", \"hat \", \"tree \"\\], chars =  \"atach \"\n**Output:** 6\n**Explanation:** The strings that can be formed are  \"cat \" and  \"hat \" so the answer is 3 + 3 = 6.\n\n**Example 2:**\n\n**Input:** words = \\[ \"hello \", \"world \", \"leetcode \"\\], chars =  \"welldonehoneyr \"\n**Output:** 10\n**Explanation:** The strings that can be formed are  \"hello \" and  \"world \" so the answer is 5 + 5 = 10.\n\n**Constraints:**\n\n*   `1 <= words.length <= 1000`\n*   `1 <= words[i].length, chars.length <= 100`\n*   `words[i]` and `chars` consist of lowercase English letters."}}
{"1165": {"title": "Single-Row Keyboard", "difficulty": "Easy", "description": "There is a special keyboard with **all keys in a single row**.\n\nGiven a string `keyboard` of length `26` indicating the layout of the keyboard (indexed from `0` to `25`). Initially, your finger is at index `0`. To type a character, you have to move your finger to the index of the desired character. The time taken to move your finger from index `i` to index `j` is `|i - j|`.\n\nYou want to type a string `word`. Write a function to calculate how much time it takes to type it with one finger.\n\n**Example 1:**\n\n**Input:** keyboard =  \"abcdefghijklmnopqrstuvwxyz \", word =  \"cba \"\n**Output:** 4\n**Explanation:** The index moves from 0 to 2 to write 'c' then to 1 to write 'b' then to 0 again to write 'a'.\nTotal time = 2 + 1 + 1 = 4. \n\n**Example 2:**\n\n**Input:** keyboard =  \"pqrstuvwxyzabcdefghijklmno \", word =  \"leetcode \"\n**Output:** 73\n\n**Constraints:**\n\n*   `keyboard.length == 26`\n*   `keyboard` contains each English lowercase letter exactly once in some order.\n*   `1 <= word.length <= 104`\n*   `word[i]` is an English lowercase letter."}}
{"1175": {"title": "Prime Arrangements", "difficulty": "Easy", "description": "Return the number of permutations of 1 to `n` so that prime numbers are at prime indices (1-indexed.)\n\n_(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)_\n\nSince the answer may be large, return the answer **modulo `10^9 + 7`**.\n\n**Example 1:**\n\n**Input:** n = 5\n**Output:** 12\n**Explanation:** For example \\[1,2,5,4,3\\] is a valid permutation, but \\[5,2,3,4,1\\] is not because the prime number 5 is at index 1.\n\n**Example 2:**\n\n**Input:** n = 100\n**Output:** 682289015\n\n**Constraints:**\n\n*   `1 <= n <= 100`"}}
{"1176": {"title": "Diet Plan Performance", "difficulty": "Easy", "description": "A dieter consumes `calories[i]` calories on the `i`\\-th day.\n\nGiven an integer `k`, for **every** consecutive sequence of `k` days (`calories[i], calories[i+1], ..., calories[i+k-1]` for all `0 <= i <= n-k`), they look at _T_, the total calories consumed during that sequence of `k` days (`calories[i] + calories[i+1] + ... + calories[i+k-1]`):\n\n*   If `T < lower`, they performed poorly on their diet and lose 1 point;\n*   If `T > upper`, they performed well on their diet and gain 1 point;\n*   Otherwise, they performed normally and there is no change in points.\n\nInitially, the dieter has zero points. Return the total number of points the dieter has after dieting for `calories.length` days.\n\nNote that the total points can be negative.\n\n**Example 1:**\n\n**Input:** calories = \\[1,2,3,4,5\\], k = 1, lower = 3, upper = 3\n**Output:** 0\n**Explanation**: Since k = 1, we consider each element of the array separately and compare it to lower and upper.\ncalories\\[0\\] and calories\\[1\\] are less than lower so 2 points are lost.\ncalories\\[3\\] and calories\\[4\\] are greater than upper so 2 points are gained.\n\n**Example 2:**\n\n**Input:** calories = \\[3,2\\], k = 2, lower = 0, upper = 1\n**Output:** 1\n**Explanation**: Since k = 2, we consider subarrays of length 2.\ncalories\\[0\\] + calories\\[1\\] > upper so 1 point is gained.\n\n**Example 3:**\n\n**Input:** calories = \\[6,5,0,0\\], k = 2, lower = 1, upper = 5\n**Output:** 0\n**Explanation**:\ncalories\\[0\\] + calories\\[1\\] > upper so 1 point is gained.\nlower <= calories\\[1\\] + calories\\[2\\] <= upper so no change in points.\ncalories\\[2\\] + calories\\[3\\] < lower so 1 point is lost.\n\n**Constraints:**\n\n*   `1 <= k <= calories.length <= 10^5`\n*   `0 <= calories[i] <= 20000`\n*   `0 <= lower <= upper`"}}
{"1180": {"title": "Count Substrings with Only One Distinct Letter", "difficulty": "Easy", "description": "Given a string `s`, return _the number of substrings that have only **one distinct** letter_.\n\n**Example 1:**\n\n**Input:** s =  \"aaaba \"\n**Output:** 8\n**Explanation:** The substrings with one distinct letter are  \"aaa \",  \"aa \",  \"a \",  \"b \".\n \"aaa \" occurs 1 time.\n \"aa \" occurs 2 times.\n \"a \" occurs 4 times.\n \"b \" occurs 1 time.\nSo the answer is 1 + 2 + 4 + 1 = 8.\n\n**Example 2:**\n\n**Input:** s =  \"aaaaaaaaaa \"\n**Output:** 55\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s[i]` consists of only lowercase English letters."}}
{"1184": {"title": "Distance Between Bus Stops", "difficulty": "Easy", "description": "A bus has `n` stops numbered from `0` to `n - 1` that form a circle. We know the distance between all pairs of neighboring stops where `distance[i]` is the distance between the stops number `i` and `(i + 1) % n`.\n\nThe bus goes along both directions i.e. clockwise and counterclockwise.\n\nReturn the shortest distance between the given `start` and `destination` stops.\n\n**Example 1:**\n\n**Input:** distance = \\[1,2,3,4\\], start = 0, destination = 1\n**Output:** 1\n**Explanation:** Distance between 0 and 1 is 1 or 9, minimum is 1.\n\n**Example 2:**\n\n**Input:** distance = \\[1,2,3,4\\], start = 0, destination = 2\n**Output:** 3\n**Explanation:** Distance between 0 and 2 is 3 or 7, minimum is 3.\n\n**Example 3:**\n\n**Input:** distance = \\[1,2,3,4\\], start = 0, destination = 3\n**Output:** 4\n**Explanation:** Distance between 0 and 3 is 6 or 4, minimum is 4.\n\n**Constraints:**\n\n*   `1 <= n <= 10^4`\n*   `distance.length == n`\n*   `0 <= start, destination < n`\n*   `0 <= distance[i] <= 10^4`"}}
{"1185": {"title": "Day of the Week", "difficulty": "Easy", "description": "Given a date, return the corresponding day of the week for that date.\n\nThe input is given as three integers representing the `day`, `month` and `year` respectively.\n\nReturn the answer as one of the following values `{ \"Sunday \", \"Monday \", \"Tuesday \", \"Wednesday \", \"Thursday \", \"Friday \", \"Saturday \"}`.\n\n**Example 1:**\n\n**Input:** day = 31, month = 8, year = 2019\n**Output:**  \"Saturday \"\n\n**Example 2:**\n\n**Input:** day = 18, month = 7, year = 1999\n**Output:**  \"Sunday \"\n\n**Example 3:**\n\n**Input:** day = 15, month = 8, year = 1993\n**Output:**  \"Sunday \"\n\n**Constraints:**\n\n*   The given dates are valid dates between the years `1971` and `2100`."}}
{"1189": {"title": "Maximum Number of Balloons", "difficulty": "Easy", "description": "Given a string `text`, you want to use the characters of `text` to form as many instances of the word **\"balloon \"** as possible.\n\nYou can use each character in `text` **at most once**. Return the maximum number of instances that can be formed.\n\n**Example 1:**\n\n**Input:** text =  \"nlaebolko \"\n**Output:** 1\n\n**Example 2:**\n\n**Input:** text =  \"loonbalxballpoon \"\n**Output:** 2\n\n**Example 3:**\n\n**Input:** text =  \"leetcode \"\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= text.length <= 104`\n*   `text` consists of lower case English letters only."}}
{"1196": {"title": "How Many Apples Can You Put into the Basket", "difficulty": "Easy", "description": "You have some apples and a basket that can carry up to `5000` units of weight.\n\nGiven an integer array `weight` where `weight[i]` is the weight of the `ith` apple, return _the maximum number of apples you can put in the basket_.\n\n**Example 1:**\n\n**Input:** weight = \\[100,200,150,1000\\]\n**Output:** 4\n**Explanation:** All 4 apples can be carried by the basket since their sum of weights is 1450.\n\n**Example 2:**\n\n**Input:** weight = \\[900,950,800,1000,700,800\\]\n**Output:** 5\n**Explanation:** The sum of weights of the 6 apples exceeds 5000 so we choose any 5 of them.\n\n**Constraints:**\n\n*   `1 <= weight.length <= 103`\n*   `1 <= weight[i] <= 103`"}}
{"1200": {"title": "Minimum Absolute Difference", "difficulty": "Easy", "description": "Given an array of **distinct** integers `arr`, find all pairs of elements with the minimum absolute difference of any two elements.\n\nReturn a list of pairs in ascending order(with respect to pairs), each pair `[a, b]` follows\n\n*   `a, b` are from `arr`\n*   `a < b`\n*   `b - a` equals to the minimum absolute difference of any two elements in `arr`\n\n**Example 1:**\n\n**Input:** arr = \\[4,2,1,3\\]\n**Output:** \\[\\[1,2\\],\\[2,3\\],\\[3,4\\]\\]\n**Explanation:** The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.\n\n**Example 2:**\n\n**Input:** arr = \\[1,3,6,10,15\\]\n**Output:** \\[\\[1,3\\]\\]\n\n**Example 3:**\n\n**Input:** arr = \\[3,8,-10,23,19,-4,-14,27\\]\n**Output:** \\[\\[-14,-10\\],\\[19,23\\],\\[23,27\\]\\]\n\n**Constraints:**\n\n*   `2 <= arr.length <= 105`\n*   `-106 <= arr[i] <= 106`"}}
{"1207": {"title": "Unique Number of Occurrences", "difficulty": "Easy", "description": "Given an array of integers `arr`, return `true` _if the number of occurrences of each value in the array is **unique** or_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** arr = \\[1,2,2,1,1,3\\]\n**Output:** true\n**Explanation:** The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.\n\n**Example 2:**\n\n**Input:** arr = \\[1,2\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** arr = \\[-3,0,1,-3,1,1,1,-3,10,0\\]\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= arr.length <= 1000`\n*   `-1000 <= arr[i] <= 1000`"}}
{"1213": {"title": "Intersection of Three Sorted Arrays", "difficulty": "Easy", "description": "Given three integer arrays `arr1`, `arr2` and `arr3` **sorted** in **strictly increasing** order, return a sorted array of **only** the integers that appeared in **all** three arrays.\n\n**Example 1:**\n\n**Input:** arr1 = \\[1,2,3,4,5\\], arr2 = \\[1,2,5,7,9\\], arr3 = \\[1,3,4,5,8\\]\n**Output:** \\[1,5\\]\n**Explanation:** Only 1 and 5 appeared in the three arrays.\n\n**Example 2:**\n\n**Input:** arr1 = \\[197,418,523,876,1356\\], arr2 = \\[501,880,1593,1710,1870\\], arr3 = \\[521,682,1337,1395,1764\\]\n**Output:** \\[\\]\n\n**Constraints:**\n\n*   `1 <= arr1.length, arr2.length, arr3.length <= 1000`\n*   `1 <= arr1[i], arr2[i], arr3[i] <= 2000`"}}
{"1217": {"title": "Minimum Cost to Move Chips to The Same Position", "difficulty": "Easy", "description": "We have `n` chips, where the position of the `ith` chip is `position[i]`.\n\nWe need to move all the chips to **the same position**. In one step, we can change the position of the `ith` chip from `position[i]` to:\n\n*   `position[i] + 2` or `position[i] - 2` with `cost = 0`.\n*   `position[i] + 1` or `position[i] - 1` with `cost = 1`.\n\nReturn _the minimum cost_ needed to move all the chips to the same position.\n\n**Example 1:**\n\n**Input:** position = \\[1,2,3\\]\n**Output:** 1\n**Explanation:** First step: Move the chip at position 3 to position 1 with cost = 0.\nSecond step: Move the chip at position 2 to position 1 with cost = 1.\nTotal cost is 1.\n\n**Example 2:**\n\n**Input:** position = \\[2,2,2,3,3\\]\n**Output:** 2\n**Explanation:** We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.\n\n**Example 3:**\n\n**Input:** position = \\[1,1000000000\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= position.length <= 100`\n*   `1 <= position[i] <= 10^9`"}}
{"1221": {"title": "Split a String in Balanced Strings", "difficulty": "Easy", "description": "**Balanced** strings are those that have an equal quantity of `'L'` and `'R'` characters.\n\nGiven a **balanced** string `s`, split it into some number of substrings such that:\n\n*   Each substring is balanced.\n\nReturn _the **maximum** number of balanced strings you can obtain._\n\n**Example 1:**\n\n**Input:** s =  \"RLRRLLRLRL \"\n**Output:** 4\n**Explanation:** s can be split into  \"RL \",  \"RRLL \",  \"RL \",  \"RL \", each substring contains same number of 'L' and 'R'.\n\n**Example 2:**\n\n**Input:** s =  \"RLRRRLLRLL \"\n**Output:** 2\n**Explanation:** s can be split into  \"RL \",  \"RRRLLRLL \", each substring contains same number of 'L' and 'R'.\nNote that s cannot be split into  \"RL \",  \"RR \",  \"RL \",  \"LR \",  \"LL \", because the 2nd and 5th substrings are not balanced.\n\n**Example 3:**\n\n**Input:** s =  \"LLLLRRRR \"\n**Output:** 1\n**Explanation:** s can be split into  \"LLLLRRRR \".\n\n**Constraints:**\n\n*   `2 <= s.length <= 1000`\n*   `s[i]` is either `'L'` or `'R'`.\n*   `s` is a **balanced** string."}}
{"1228": {"title": "Missing Number In Arithmetic Progression", "difficulty": "Easy", "description": "In some array `arr`, the values were in arithmetic progression: the values `arr[i + 1] - arr[i]` are all equal for every `0 <= i < arr.length - 1`.\n\nA value from `arr` was removed that **was not the first or last value in the array**.\n\nGiven `arr`, return _the removed value_.\n\n**Example 1:**\n\n**Input:** arr = \\[5,7,11,13\\]\n**Output:** 9\n**Explanation:** The previous array was \\[5,7,**9**,11,13\\].\n\n**Example 2:**\n\n**Input:** arr = \\[15,13,12\\]\n**Output:** 14\n**Explanation:** The previous array was \\[15,**14**,13,12\\].\n\n**Constraints:**\n\n*   `3 <= arr.length <= 1000`\n*   `0 <= arr[i] <= 105`\n*   The given array is **guaranteed** to be a valid array."}}
{"1232": {"title": "Check If It Is a Straight Line", "difficulty": "Easy", "description": "You are given an array `coordinates`, `coordinates[i] = [x, y]`, where `[x, y]` represents the coordinate of a point. Check if these points make a straight line in the XY plane.\n\n**Example 1:**\n\n**Input:** coordinates = \\[\\[1,2\\],\\[2,3\\],\\[3,4\\],\\[4,5\\],\\[5,6\\],\\[6,7\\]\\]\n**Output:** true\n\n**Example 2:**\n\n**Input:** coordinates = \\[\\[1,1\\],\\[2,2\\],\\[3,4\\],\\[4,5\\],\\[5,6\\],\\[7,7\\]\\]\n**Output:** false\n\n**Constraints:**\n\n*   `2 <= coordinates.length <= 1000`\n*   `coordinates[i].length == 2`\n*   `-10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4`\n*   `coordinates` contains no duplicate point."}}
{"1243": {"title": "Array Transformation", "difficulty": "Easy", "description": "Given an initial array `arr`, every day you produce a new array using the array of the previous day.\n\nOn the `i`\\-th day, you do the following operations on the array of day `i-1` to produce the array of day `i`:\n\n1.  If an element is smaller than both its left neighbor and its right neighbor, then this element is incremented.\n2.  If an element is bigger than both its left neighbor and its right neighbor, then this element is decremented.\n3.  The first and last elements never change.\n\nAfter some days, the array does not change. Return that final array.\n\n**Example 1:**\n\n**Input:** arr = \\[6,2,3,4\\]\n**Output:** \\[6,3,3,4\\]\n**Explanation:** \nOn the first day, the array is changed from \\[6,2,3,4\\] to \\[6,3,3,4\\].\nNo more operations can be done to this array.\n\n**Example 2:**\n\n**Input:** arr = \\[1,6,3,4,3,5\\]\n**Output:** \\[1,4,4,4,4,5\\]\n**Explanation:** \nOn the first day, the array is changed from \\[1,6,3,4,3,5\\] to \\[1,5,4,3,4,5\\].\nOn the second day, the array is changed from \\[1,5,4,3,4,5\\] to \\[1,4,4,4,4,5\\].\nNo more operations can be done to this array.\n\n**Constraints:**\n\n*   `3 <= arr.length <= 100`\n*   `1 <= arr[i] <= 100`"}}
{"1252": {"title": "Cells with Odd Values in a Matrix", "difficulty": "Easy", "description": "There is an `m x n` matrix that is initialized to all `0`'s. There is also a 2D array `indices` where each `indices[i] = [ri, ci]` represents a **0-indexed location** to perform some increment operations on the matrix.\n\nFor each location `indices[i]`, do **both** of the following:\n\n1.  Increment **all** the cells on row `ri`.\n2.  Increment **all** the cells on column `ci`.\n\nGiven `m`, `n`, and `indices`, return _the **number of odd-valued cells** in the matrix after applying the increment to all locations in_ `indices`.\n\n**Example 1:**\n\n**Input:** m = 2, n = 3, indices = \\[\\[0,1\\],\\[1,1\\]\\]\n**Output:** 6\n**Explanation:** Initial matrix = \\[\\[0,0,0\\],\\[0,0,0\\]\\].\nAfter applying first increment it becomes \\[\\[1,2,1\\],\\[0,1,0\\]\\].\nThe final matrix is \\[\\[1,3,1\\],\\[1,3,1\\]\\], which contains 6 odd numbers.\n\n**Example 2:**\n\n**Input:** m = 2, n = 2, indices = \\[\\[1,1\\],\\[0,0\\]\\]\n**Output:** 0\n**Explanation:** Final matrix = \\[\\[2,2\\],\\[2,2\\]\\]. There are no odd numbers in the final matrix.\n\n**Constraints:**\n\n*   `1 <= m, n <= 50`\n*   `1 <= indices.length <= 100`\n*   `0 <= ri < m`\n*   `0 <= ci < n`\n\n**Follow up:** Could you solve this in `O(n + m + indices.length)` time with only `O(n + m)` extra space?"}}
{"1260": {"title": "Shift 2D Grid", "difficulty": "Easy", "description": "Given a 2D `grid` of size `m x n` and an integer `k`. You need to shift the `grid` `k` times.\n\nIn one shift operation:\n\n*   Element at `grid[i][j]` moves to `grid[i][j + 1]`.\n*   Element at `grid[i][n - 1]` moves to `grid[i + 1][0]`.\n*   Element at `grid[m - 1][n - 1]` moves to `grid[0][0]`.\n\nReturn the _2D grid_ after applying shift operation `k` times.\n\n**Example 1:**\n\n**Input:** `grid` = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\], k = 1\n**Output:** \\[\\[9,1,2\\],\\[3,4,5\\],\\[6,7,8\\]\\]\n\n**Example 2:**\n\n**Input:** `grid` = \\[\\[3,8,1,9\\],\\[19,7,2,5\\],\\[4,6,11,10\\],\\[12,0,21,13\\]\\], k = 4\n**Output:** \\[\\[12,0,21,13\\],\\[3,8,1,9\\],\\[19,7,2,5\\],\\[4,6,11,10\\]\\]\n\n**Example 3:**\n\n**Input:** `grid` = \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\], k = 9\n**Output:** \\[\\[1,2,3\\],\\[4,5,6\\],\\[7,8,9\\]\\]\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m <= 50`\n*   `1 <= n <= 50`\n*   `-1000 <= grid[i][j] <= 1000`\n*   `0 <= k <= 100`"}}
{"1266": {"title": "Minimum Time Visiting All Points", "difficulty": "Easy", "description": "On a 2D plane, there are `n` points with integer coordinates `points[i] = [xi, yi]`. Return _the **minimum time** in seconds to visit all the points in the order given by_ `points`.\n\nYou can move according to these rules:\n\n*   In `1` second, you can either:\n    *   move vertically by one unit,\n    *   move horizontally by one unit, or\n    *   move diagonally `sqrt(2)` units (in other words, move one unit vertically then one unit horizontally in `1` second).\n*   You have to visit the points in the same order as they appear in the array.\n*   You are allowed to pass through points that appear later in the order, but these do not count as visits.\n\n**Example 1:**\n\n**Input:** points = \\[\\[1,1\\],\\[3,4\\],\\[-1,0\\]\\]\n**Output:** 7\n**Explanation:** One optimal path is **\\[1,1\\]** -> \\[2,2\\] -> \\[3,3\\] -> **\\[3,4\\]** \\-> \\[2,3\\] -> \\[1,2\\] -> \\[0,1\\] -> **\\[-1,0\\]**   \nTime from \\[1,1\\] to \\[3,4\\] = 3 seconds \nTime from \\[3,4\\] to \\[-1,0\\] = 4 seconds\nTotal time = 7 seconds\n\n**Example 2:**\n\n**Input:** points = \\[\\[3,2\\],\\[-2,2\\]\\]\n**Output:** 5\n\n**Constraints:**\n\n*   `points.length == n`\n*   `1 <= n <= 100`\n*   `points[i].length == 2`\n*   `-1000 <= points[i][0], points[i][1] <= 1000`"}}
{"1271": {"title": "Hexspeak", "difficulty": "Easy", "description": "A decimal number can be converted to its **Hexspeak representation** by first converting it to an uppercase hexadecimal string, then replacing all occurrences of the digit `'0'` with the letter `'O'`, and the digit `'1'` with the letter `'I'`. Such a representation is valid if and only if it consists only of the letters in the set `{'A', 'B', 'C', 'D', 'E', 'F', 'I', 'O'}`.\n\nGiven a string `num` representing a decimal integer `n`, _return the **Hexspeak representation** of_ `n` _if it is valid, otherwise return_ `\"ERROR \"`.\n\n**Example 1:**\n\n**Input:** num =  \"257 \"\n**Output:**  \"IOI \"\n**Explanation:** 257 is 101 in hexadecimal.\n\n**Example 2:**\n\n**Input:** num =  \"3 \"\n**Output:**  \"ERROR \"\n\n**Constraints:**\n\n*   `1 <= num.length <= 12`\n*   `num` does not contain leading zeros.\n*   num represents an integer in the range `[1, 1012]`."}}
{"1275": {"title": "Find Winner on a Tic Tac Toe Game", "difficulty": "Easy", "description": "**Tic-tac-toe** is played by two players `A` and `B` on a `3 x 3` grid. The rules of Tic-Tac-Toe are:\n\n*   Players take turns placing characters into empty squares `' '`.\n*   The first player `A` always places `'X'` characters, while the second player `B` always places `'O'` characters.\n*   `'X'` and `'O'` characters are always placed into empty squares, never on filled ones.\n*   The game ends when there are **three** of the same (non-empty) character filling any row, column, or diagonal.\n*   The game also ends if all squares are non-empty.\n*   No more moves can be played if the game is over.\n\nGiven a 2D integer array `moves` where `moves[i] = [rowi, coli]` indicates that the `ith` move will be played on `grid[rowi][coli]`. return _the winner of the game if it exists_ (`A` or `B`). In case the game ends in a draw return `\"Draw \"`. If there are still movements to play return `\"Pending \"`.\n\nYou can assume that `moves` is valid (i.e., it follows the rules of **Tic-Tac-Toe**), the grid is initially empty, and `A` will play first.\n\n**Example 1:**\n\n**Input:** moves = \\[\\[0,0\\],\\[2,0\\],\\[1,1\\],\\[2,1\\],\\[2,2\\]\\]\n**Output:**  \"A \"\n**Explanation:** A wins, they always play first.\n\n**Example 2:**\n\n**Input:** moves = \\[\\[0,0\\],\\[1,1\\],\\[0,1\\],\\[0,2\\],\\[1,0\\],\\[2,0\\]\\]\n**Output:**  \"B \"\n**Explanation:** B wins.\n\n**Example 3:**\n\n**Input:** moves = \\[\\[0,0\\],\\[1,1\\],\\[2,0\\],\\[1,0\\],\\[1,2\\],\\[2,1\\],\\[0,1\\],\\[0,2\\],\\[2,2\\]\\]\n**Output:**  \"Draw \"\n**Explanation:** The game ends in a draw since there are no moves to make.\n\n**Constraints:**\n\n*   `1 <= moves.length <= 9`\n*   `moves[i].length == 2`\n*   `0 <= rowi, coli <= 2`\n*   There are no repeated elements on `moves`.\n*   `moves` follow the rules of tic tac toe."}}
{"1281": {"title": "Subtract the Product and Sum of Digits of an Integer", "difficulty": "Easy", "description": "Given an integer number `n`, return the difference between the product of its digits and the sum of its digits.\n\n**Example 1:**\n\n**Input:** n = 234\n**Output:** 15 \n**Explanation:** \nProduct of digits = 2 \\* 3 \\* 4 = 24 \nSum of digits = 2 + 3 + 4 = 9 \nResult = 24 - 9 = 15\n\n**Example 2:**\n\n**Input:** n = 4421\n**Output:** 21\n**Explanation:** \nProduct of digits = 4 \\* 4 \\* 2 \\* 1 = 32 \nSum of digits = 4 + 4 + 2 + 1 = 11 \nResult = 32 - 11 = 21\n\n**Constraints:**\n\n*   `1 <= n <= 10^5`"}}
{"1287": {"title": "Element Appearing More Than 25% In Sorted Array", "difficulty": "Easy", "description": "Given an integer array **sorted** in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.\n\n**Example 1:**\n\n**Input:** arr = \\[1,2,2,6,6,6,6,7,10\\]\n**Output:** 6\n\n**Example 2:**\n\n**Input:** arr = \\[1,1\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= arr.length <= 104`\n*   `0 <= arr[i] <= 105`"}}
{"1290": {"title": "Convert Binary Number in a Linked List to Integer", "difficulty": "Easy", "description": "Given `head` which is a reference node to a singly-linked list. The value of each node in the linked list is either `0` or `1`. The linked list holds the binary representation of a number.\n\nReturn the _decimal value_ of the number in the linked list.\n\nThe **most significant bit** is at the head of the linked list.\n\n**Example 1:**\n\n**Input:** head = \\[1,0,1\\]\n**Output:** 5\n**Explanation:** (101) in base 2 = (5) in base 10\n\n**Example 2:**\n\n**Input:** head = \\[0\\]\n**Output:** 0\n\n**Constraints:**\n\n*   The Linked List is not empty.\n*   Number of nodes will not exceed `30`.\n*   Each node's value is either `0` or `1`."}}
{"1295": {"title": "Find Numbers with Even Number of Digits", "difficulty": "Easy", "description": "Given an array `nums` of integers, return how many of them contain an **even number** of digits.\n\n**Example 1:**\n\n**Input:** nums = \\[12,345,2,6,7896\\]\n**Output:** 2\n**Explanation:** \n12 contains 2 digits (even number of digits). \n345 contains 3 digits (odd number of digits). \n2 contains 1 digit (odd number of digits). \n6 contains 1 digit (odd number of digits). \n7896 contains 4 digits (even number of digits). \nTherefore only 12 and 7896 contain an even number of digits.\n\n**Example 2:**\n\n**Input:** nums = \\[555,901,482,1771\\]\n**Output:** 1 \n**Explanation:** \nOnly 1771 contains an even number of digits.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 500`\n*   `1 <= nums[i] <= 105`"}}
{"1299": {"title": "Replace Elements with Greatest Element on Right Side", "difficulty": "Easy", "description": "Given an array `arr`, replace every element in that array with the greatest element among the elements to its right, and replace the last element with `-1`.\n\nAfter doing so, return the array.\n\n**Example 1:**\n\n**Input:** arr = \\[17,18,5,4,6,1\\]\n**Output:** \\[18,6,6,6,1,-1\\]\n**Explanation:** \n- index 0 --> the greatest element to the right of index 0 is index 1 (18).\n- index 1 --> the greatest element to the right of index 1 is index 4 (6).\n- index 2 --> the greatest element to the right of index 2 is index 4 (6).\n- index 3 --> the greatest element to the right of index 3 is index 4 (6).\n- index 4 --> the greatest element to the right of index 4 is index 5 (1).\n- index 5 --> there are no elements to the right of index 5, so we put -1.\n\n**Example 2:**\n\n**Input:** arr = \\[400\\]\n**Output:** \\[-1\\]\n**Explanation:** There are no elements to the right of index 0.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 104`\n*   `1 <= arr[i] <= 105`"}}
{"1304": {"title": "Find N Unique Integers Sum up to Zero", "difficulty": "Easy", "description": "Given an integer `n`, return **any** array containing `n` **unique** integers such that they add up to `0`.\n\n**Example 1:**\n\n**Input:** n = 5\n**Output:** \\[-7,-1,1,3,4\\]\n**Explanation:** These arrays also are accepted \\[-5,-1,1,2,3\\] , \\[-3,-1,2,-2,4\\].\n\n**Example 2:**\n\n**Input:** n = 3\n**Output:** \\[-1,0,1\\]\n\n**Example 3:**\n\n**Input:** n = 1\n**Output:** \\[0\\]\n\n**Constraints:**\n\n*   `1 <= n <= 1000`"}}
{"1309": {"title": "Decrypt String from Alphabet to Integer Mapping", "difficulty": "Easy", "description": "You are given a string `s` formed by digits and `'#'`. We want to map `s` to English lowercase characters as follows:\n\n*   Characters (`'a'` to `'i'`) are represented by (`'1'` to `'9'`) respectively.\n*   Characters (`'j'` to `'z'`) are represented by (`'10#'` to `'26#'`) respectively.\n\nReturn _the string formed after mapping_.\n\nThe test cases are generated so that a unique mapping will always exist.\n\n**Example 1:**\n\n**Input:** s =  \"10#11#12 \"\n**Output:**  \"jkab \"\n**Explanation:**  \"j \" ->  \"10# \" ,  \"k \" ->  \"11# \" ,  \"a \" ->  \"1 \" ,  \"b \" ->  \"2 \".\n\n**Example 2:**\n\n**Input:** s =  \"1326# \"\n**Output:**  \"acz \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of digits and the `'#'` letter.\n*   `s` will be a valid string such that mapping is always possible."}}
{"1313": {"title": "Decompress Run-Length Encoded List", "difficulty": "Easy", "description": "We are given a list `nums` of integers representing a list compressed with run-length encoding.\n\nConsider each adjacent pair of elements `[freq, val] = [nums[2*i], nums[2*i+1]]` (with `i >= 0`). For each such pair, there are `freq` elements with value `val` concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.\n\nReturn the decompressed list.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** \\[2,4,4,4\\]\n**Explanation:** The first pair \\[1,2\\] means we have freq = 1 and val = 2 so we generate the array \\[2\\].\nThe second pair \\[3,4\\] means we have freq = 3 and val = 4 so we generate \\[4,4,4\\].\nAt the end the concatenation \\[2\\] + \\[4,4,4\\] is \\[2,4,4,4\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,2,3\\]\n**Output:** \\[1,3,3\\]\n\n**Constraints:**\n\n*   `2 <= nums.length <= 100`\n*   `nums.length % 2 == 0`\n*   `1 <= nums[i] <= 100`"}}
{"1317": {"title": "Convert Integer to the Sum of Two No-Zero Integers", "difficulty": "Easy", "description": "**No-Zero integer** is a positive integer that **does not contain any `0`** in its decimal representation.\n\nGiven an integer `n`, return _a list of two integers_ `[a, b]` _where_:\n\n*   `a` and `b` are **No-Zero integers**.\n*   `a + b = n`\n\nThe test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.\n\n**Example 1:**\n\n**Input:** n = 2\n**Output:** \\[1,1\\]\n**Explanation:** Let a = 1 and b = 1.\nBoth a and b are no-zero integers, and a + b = 2 = n.\n\n**Example 2:**\n\n**Input:** n = 11\n**Output:** \\[2,9\\]\n**Explanation:** Let a = 2 and b = 9.\nBoth a and b are no-zero integers, and a + b = 9 = n.\nNote that there are other valid answers as \\[8, 3\\] that can be accepted.\n\n**Constraints:**\n\n*   `2 <= n <= 104`"}}
{"1323": {"title": "Maximum 69 Number", "difficulty": "Easy", "description": "You are given a positive integer `num` consisting only of digits `6` and `9`.\n\nReturn _the maximum number you can get by changing **at most** one digit (_`6` _becomes_ `9`_, and_ `9` _becomes_ `6`_)_.\n\n**Example 1:**\n\n**Input:** num = 9669\n**Output:** 9969\n**Explanation:** \nChanging the first digit results in 6669.\nChanging the second digit results in 9969.\nChanging the third digit results in 9699.\nChanging the fourth digit results in 9666.\nThe maximum number is 9969.\n\n**Example 2:**\n\n**Input:** num = 9996\n**Output:** 9999\n**Explanation:** Changing the last digit 6 to 9 results in the maximum number.\n\n**Example 3:**\n\n**Input:** num = 9999\n**Output:** 9999\n**Explanation:** It is better not to apply any change.\n\n**Constraints:**\n\n*   `1 <= num <= 104`\n*   `num` consists of only `6` and `9` digits."}}
{"1331": {"title": "Rank Transform of an Array", "difficulty": "Easy", "description": "Given an array of integers `arr`, replace each element with its rank.\n\nThe rank represents how large the element is. The rank has the following rules:\n\n*   Rank is an integer starting from 1.\n*   The larger the element, the larger the rank. If two elements are equal, their rank must be the same.\n*   Rank should be as small as possible.\n\n**Example 1:**\n\n**Input:** arr = \\[40,10,20,30\\]\n**Output:** \\[4,1,2,3\\]\n**Explanation**: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.\n\n**Example 2:**\n\n**Input:** arr = \\[100,100,100\\]\n**Output:** \\[1,1,1\\]\n**Explanation**: Same elements share the same rank.\n\n**Example 3:**\n\n**Input:** arr = \\[37,12,28,9,100,56,80,5,12\\]\n**Output:** \\[5,3,4,2,8,6,7,1,3\\]\n\n**Constraints:**\n\n*   `0 <= arr.length <= 105`\n*   `-109 <= arr[i] <= 109`\n\n\\- Every time you are in a cell you will collect all the gold in that cell. - From your position, you can walk one step to the left, right, up, or down. - You can't visit the same cell more than once. - Never visit a cell with 0 gold. - You can start and stop collecting gold from any position in the grid that has some gold."}}
{"1332": {"title": "Remove Palindromic Subsequences", "difficulty": "Easy", "description": "You are given a string `s` consisting **only** of letters `'a'` and `'b'`. In a single step you can remove one **palindromic subsequence** from `s`.\n\nReturn _the **minimum** number of steps to make the given string empty_.\n\nA string is a **subsequence** of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does **not** necessarily need to be contiguous.\n\nA string is called **palindrome** if is one that reads the same backward as well as forward.\n\n**Example 1:**\n\n**Input:** s =  \"ababa \"\n**Output:** 1\n**Explanation:** s is already a palindrome, so its entirety can be removed in a single step.\n\n**Example 2:**\n\n**Input:** s =  \"abb \"\n**Output:** 2\n**Explanation:**  \"abb \" ->  \"bb \" ->  \" \". \nRemove palindromic subsequence  \"a \" then  \"bb \".\n\n**Example 3:**\n\n**Input:** s =  \"baabb \"\n**Output:** 2\n**Explanation:**  \"baabb \" ->  \"b \" ->  \" \". \nRemove palindromic subsequence  \"baab \" then  \"b \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s[i]` is either `'a'` or `'b'`."}}
{"1337": {"title": "The K Weakest Rows in a Matrix", "difficulty": "Easy", "description": "You are given an `m x n` binary matrix `mat` of `1`'s (representing soldiers) and `0`'s (representing civilians). The soldiers are positioned **in front** of the civilians. That is, all the `1`'s will appear to the **left** of all the `0`'s in each row.\n\nA row `i` is **weaker** than a row `j` if one of the following is true:\n\n*   The number of soldiers in row `i` is less than the number of soldiers in row `j`.\n*   Both rows have the same number of soldiers and `i < j`.\n\nReturn _the indices of the_ `k` _**weakest** rows in the matrix ordered from weakest to strongest_.\n\n**Example 1:**\n\n**Input:** mat = \n\\[\\[1,1,0,0,0\\],\n \\[1,1,1,1,0\\],\n \\[1,0,0,0,0\\],\n \\[1,1,0,0,0\\],\n \\[1,1,1,1,1\\]\\], \nk = 3\n**Output:** \\[2,0,3\\]\n**Explanation:** \nThe number of soldiers in each row is: \n- Row 0: 2 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 2 \n- Row 4: 5 \nThe rows ordered from weakest to strongest are \\[2,0,3,1,4\\].\n\n**Example 2:**\n\n**Input:** mat = \n\\[\\[1,0,0,0\\],\n \\[1,1,1,1\\],\n \\[1,0,0,0\\],\n \\[1,0,0,0\\]\\], \nk = 2\n**Output:** \\[0,2\\]\n**Explanation:** \nThe number of soldiers in each row is: \n- Row 0: 1 \n- Row 1: 4 \n- Row 2: 1 \n- Row 3: 1 \nThe rows ordered from weakest to strongest are \\[0,2,3,1\\].\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `2 <= n, m <= 100`\n*   `1 <= k <= m`\n*   `matrix[i][j]` is either 0 or 1."}}
{"1342": {"title": "Number of Steps to Reduce a Number to Zero", "difficulty": "Easy", "description": "Given an integer `num`, return _the number of steps to reduce it to zero_.\n\nIn one step, if the current number is even, you have to divide it by `2`, otherwise, you have to subtract `1` from it.\n\n**Example 1:**\n\n**Input:** num = 14\n**Output:** 6\n**Explanation:** \nStep 1) 14 is even; divide by 2 and obtain 7. \nStep 2) 7 is odd; subtract 1 and obtain 6.\nStep 3) 6 is even; divide by 2 and obtain 3. \nStep 4) 3 is odd; subtract 1 and obtain 2. \nStep 5) 2 is even; divide by 2 and obtain 1. \nStep 6) 1 is odd; subtract 1 and obtain 0.\n\n**Example 2:**\n\n**Input:** num = 8\n**Output:** 4\n**Explanation:** \nStep 1) 8 is even; divide by 2 and obtain 4. \nStep 2) 4 is even; divide by 2 and obtain 2. \nStep 3) 2 is even; divide by 2 and obtain 1. \nStep 4) 1 is odd; subtract 1 and obtain 0.\n\n**Example 3:**\n\n**Input:** num = 123\n**Output:** 12\n\n**Constraints:**\n\n*   `0 <= num <= 106`"}}
{"1346": {"title": "Check If N and Its Double Exist", "difficulty": "Easy", "description": "Given an array `arr` of integers, check if there exist two indices `i` and `j` such that :\n\n*   `i != j`\n*   `0 <= i, j < arr.length`\n*   `arr[i] == 2 * arr[j]`\n\n**Example 1:**\n\n**Input:** arr = \\[10,2,5,3\\]\n**Output:** true\n**Explanation:** For i = 0 and j = 2, arr\\[i\\] == 10 == 2 \\* 5 == 2 \\* arr\\[j\\]\n\n**Example 2:**\n\n**Input:** arr = \\[3,1,7,11\\]\n**Output:** false\n**Explanation:** There is no i and j that satisfy the conditions.\n\n**Constraints:**\n\n*   `2 <= arr.length <= 500`\n*   `-103 <= arr[i] <= 103`"}}
{"1351": {"title": "Count Negative Numbers in a Sorted Matrix", "difficulty": "Easy", "description": "Given a `m x n` matrix `grid` which is sorted in non-increasing order both row-wise and column-wise, return _the number of **negative** numbers in_ `grid`.\n\n**Example 1:**\n\n**Input:** grid = \\[\\[4,3,2,-1\\],\\[3,2,1,-1\\],\\[1,1,-1,-2\\],\\[-1,-1,-2,-3\\]\\]\n**Output:** 8\n**Explanation:** There are 8 negatives number in the matrix.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[3,2\\],\\[1,0\\]\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 100`\n*   `-100 <= grid[i][j] <= 100`\n\n**Follow up:** Could you find an `O(n + m)` solution?"}}
{"1356": {"title": "Sort Integers by The Number of 1 Bits", "difficulty": "Easy", "description": "You are given an integer array `arr`. Sort the integers in the array in ascending order by the number of `1`'s in their binary representation and in case of two or more integers have the same number of `1`'s you have to sort them in ascending order.\n\nReturn _the array after sorting it_.\n\n**Example 1:**\n\n**Input:** arr = \\[0,1,2,3,4,5,6,7,8\\]\n**Output:** \\[0,1,2,4,8,3,5,6,7\\]\n**Explantion:** \\[0\\] is the only integer with 0 bits.\n\\[1,2,4,8\\] all have 1 bit.\n\\[3,5,6\\] have 2 bits.\n\\[7\\] has 3 bits.\nThe sorted array by bits is \\[0,1,2,4,8,3,5,6,7\\]\n\n**Example 2:**\n\n**Input:** arr = \\[1024,512,256,128,64,32,16,8,4,2,1\\]\n**Output:** \\[1,2,4,8,16,32,64,128,256,512,1024\\]\n**Explantion:** All integers have 1 bit in the binary representation, you should just sort them in ascending order.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 500`\n*   `0 <= arr[i] <= 104`"}}
{"1360": {"title": "Number of Days Between Two Dates", "difficulty": "Easy", "description": "Write a program to count the number of days between two dates.\n\nThe two dates are given as strings, their format is `YYYY-MM-DD` as shown in the examples.\n\n**Example 1:**\n\n**Input:** date1 = \"2019-06-29\", date2 = \"2019-06-30\"\n**Output:** 1\n\n**Example 2:**\n\n**Input:** date1 = \"2020-01-15\", date2 = \"2019-12-31\"\n**Output:** 15\n\n**Constraints:**\n\n*   The given dates are valid dates between the years `1971` and `2100`."}}
{"1365": {"title": "How Many Numbers Are Smaller Than the Current Number", "difficulty": "Easy", "description": "Given the array `nums`, for each `nums[i]` find out how many numbers in the array are smaller than it. That is, for each `nums[i]` you have to count the number of valid `j's` such that `j != i` **and** `nums[j] < nums[i]`.\n\nReturn the answer in an array.\n\n**Example 1:**\n\n**Input:** nums = \\[8,1,2,2,3\\]\n**Output:** \\[4,0,1,1,3\\]\n**Explanation:** \nFor nums\\[0\\]=8 there exist four smaller numbers than it (1, 2, 2 and 3). \nFor nums\\[1\\]=1 does not exist any smaller number than it.\nFor nums\\[2\\]=2 there exist one smaller number than it (1). \nFor nums\\[3\\]=2 there exist one smaller number than it (1). \nFor nums\\[4\\]=3 there exist three smaller numbers than it (1, 2 and 2).\n\n**Example 2:**\n\n**Input:** nums = \\[6,5,4,8\\]\n**Output:** \\[2,1,0,3\\]\n\n**Example 3:**\n\n**Input:** nums = \\[7,7,7,7\\]\n**Output:** \\[0,0,0,0\\]\n\n**Constraints:**\n\n*   `2 <= nums.length <= 500`\n*   `0 <= nums[i] <= 100`"}}
{"1370": {"title": "Increasing Decreasing String", "difficulty": "Easy", "description": "You are given a string `s`. Reorder the string using the following algorithm:\n\n1.  Pick the **smallest** character from `s` and **append** it to the result.\n2.  Pick the **smallest** character from `s` which is greater than the last appended character to the result and **append** it.\n3.  Repeat step 2 until you cannot pick more characters.\n4.  Pick the **largest** character from `s` and **append** it to the result.\n5.  Pick the **largest** character from `s` which is smaller than the last appended character to the result and **append** it.\n6.  Repeat step 5 until you cannot pick more characters.\n7.  Repeat the steps from 1 to 6 until you pick all characters from `s`.\n\nIn each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.\n\nReturn _the result string after sorting_ `s` _with this algorithm_.\n\n**Example 1:**\n\n**Input:** s =  \"aaaabbbbcccc \"\n**Output:**  \"abccbaabccba \"\n**Explanation:** After steps 1, 2 and 3 of the first iteration, result =  \"abc \"\nAfter steps 4, 5 and 6 of the first iteration, result =  \"abccba \"\nFirst iteration is done. Now s =  \"aabbcc \" and we go back to step 1\nAfter steps 1, 2 and 3 of the second iteration, result =  \"abccbaabc \"\nAfter steps 4, 5 and 6 of the second iteration, result =  \"abccbaabccba \"\n\n**Example 2:**\n\n**Input:** s =  \"rat \"\n**Output:**  \"art \"\n**Explanation:** The word  \"rat \" becomes  \"art \" after re-ordering it with the mentioned algorithm.\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `s` consists of only lowercase English letters."}}
{"1374": {"title": "Generate a String With Characters That Have Odd Counts", "difficulty": "Easy", "description": "Given an integer `n`, _return a string with `n` characters such that each character in such string occurs **an odd number of times**_.\n\nThe returned string must contain only lowercase English letters. If there are multiples valid strings, return **any** of them.\n\n**Example 1:**\n\n**Input:** n = 4\n**Output:**  \"pppz \"\n**Explanation:**  \"pppz \" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as  \"ohhh \" and  \"love \".\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:**  \"xy \"\n**Explanation:**  \"xy \" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as  \"ag \" and  \"ur \".\n\n**Example 3:**\n\n**Input:** n = 7\n**Output:**  \"holasss \"\n\n**Constraints:**\n\n*   `1 <= n <= 500`"}}
{"1379": {"title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree", "difficulty": "Easy", "description": "Given two binary trees `original` and `cloned` and given a reference to a node `target` in the original tree.\n\nThe `cloned` tree is a **copy of** the `original` tree.\n\nReturn _a reference to the same node_ in the `cloned` tree.\n\n**Note** that you are **not allowed** to change any of the two trees or the `target` node and the answer **must be** a reference to a node in the `cloned` tree.\n\n**Example 1:**\n\n**Input:** tree = \\[7,4,3,null,null,6,19\\], target = 3\n**Output:** 3\n**Explanation:** In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.\n\n**Example 2:**\n\n**Input:** tree = \\[7\\], target =  7\n**Output:** 7\n\n**Example 3:**\n\n**Input:** tree = \\[8,null,6,null,5,null,4,null,3,null,2,null,1\\], target = 4\n**Output:** 4\n\n**Constraints:**\n\n*   The number of nodes in the `tree` is in the range `[1, 104]`.\n*   The values of the nodes of the `tree` are unique.\n*   `target` node is a node from the `original` tree and is not `null`.\n\n**Follow up:** Could you solve the problem if repeated values on the tree are allowed?"}}
{"1380": {"title": "Lucky Numbers in a Matrix", "difficulty": "Easy", "description": "Given an `m x n` matrix of **distinct** numbers, return _all **lucky numbers** in the matrix in **any** order_.\n\nA **lucky number** is an element of the matrix such that it is the minimum element in its row and maximum in its column.\n\n**Example 1:**\n\n**Input:** matrix = \\[\\[3,7,8\\],\\[9,11,13\\],\\[15,16,17\\]\\]\n**Output:** \\[15\\]\n**Explanation:** 15 is the only lucky number since it is the minimum in its row and the maximum in its column.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[1,10,4,2\\],\\[9,3,8,7\\],\\[15,16,17,12\\]\\]\n**Output:** \\[12\\]\n**Explanation:** 12 is the only lucky number since it is the minimum in its row and the maximum in its column.\n\n**Example 3:**\n\n**Input:** matrix = \\[\\[7,8\\],\\[1,2\\]\\]\n**Output:** \\[7\\]\n**Explanation:** 7 is the only lucky number since it is the minimum in its row and the maximum in its column.\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= n, m <= 50`\n*   `1 <= matrix[i][j] <= 105`.\n*   All elements in the matrix are distinct."}}
{"1385": {"title": "Find the Distance Value Between Two Arrays", "difficulty": "Easy", "description": "Given two integer arrays `arr1` and `arr2`, and the integer `d`, _return the distance value between the two arrays_.\n\nThe distance value is defined as the number of elements `arr1[i]` such that there is not any element `arr2[j]` where `|arr1[i]-arr2[j]| <= d`.\n\n**Example 1:**\n\n**Input:** arr1 = \\[4,5,8\\], arr2 = \\[10,9,1,8\\], d = 2\n**Output:** 2\n**Explanation:** \nFor arr1\\[0\\]=4 we have: \n|4-10|=6 > d=2 \n|4-9|=5 > d=2 \n|4-1|=3 > d=2 \n|4-8|=4 > d=2 \nFor arr1\\[1\\]=5 we have: \n|5-10|=5 > d=2 \n|5-9|=4 > d=2 \n|5-1|=4 > d=2 \n|5-8|=3 > d=2\nFor arr1\\[2\\]=8 we have:\n**|8-10|=2 <= d=2**\n**|8-9|=1 <= d=2**\n|8-1|=7 > d=2\n**|8-8|=0 <= d=2**\n\n**Example 2:**\n\n**Input:** arr1 = \\[1,4,2,3\\], arr2 = \\[-4,-3,6,10,20,30\\], d = 3\n**Output:** 2\n\n**Example 3:**\n\n**Input:** arr1 = \\[2,1,100,3\\], arr2 = \\[-5,-2,10,-3,7\\], d = 6\n**Output:** 1\n\n**Constraints:**\n\n*   `1 <= arr1.length, arr2.length <= 500`\n*   `-1000 <= arr1[i], arr2[j] <= 1000`\n*   `0 <= d <= 100`"}}
{"1394": {"title": "Find Lucky Integer in an Array", "difficulty": "Easy", "description": "Given an array of integers `arr`, a **lucky integer** is an integer that has a frequency in the array equal to its value.\n\nReturn _the largest **lucky integer** in the array_. If there is no **lucky integer** return `-1`.\n\n**Example 1:**\n\n**Input:** arr = \\[2,2,3,4\\]\n**Output:** 2\n**Explanation:** The only lucky number in the array is 2 because frequency\\[2\\] == 2.\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,2,3,3,3\\]\n**Output:** 3\n**Explanation:** 1, 2 and 3 are all lucky numbers, return the largest of them.\n\n**Example 3:**\n\n**Input:** arr = \\[2,2,2,3,3\\]\n**Output:** -1\n**Explanation:** There are no lucky numbers in the array.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 500`\n*   `1 <= arr[i] <= 500`"}}
{"1399": {"title": "Count Largest Group", "difficulty": "Easy", "description": "You are given an integer `n`.\n\nEach number from `1` to `n` is grouped according to the sum of its digits.\n\nReturn _the number of groups that have the largest size_.\n\n**Example 1:**\n\n**Input:** n = 13\n**Output:** 4\n**Explanation:** There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:\n\\[1,10\\], \\[2,11\\], \\[3,12\\], \\[4,13\\], \\[5\\], \\[6\\], \\[7\\], \\[8\\], \\[9\\].\nThere are 4 groups with largest size.\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** 2\n**Explanation:** There are 2 groups \\[1\\], \\[2\\] of size 1.\n\n**Constraints:**\n\n*   `1 <= n <= 104`"}}
{"1403": {"title": "Minimum Subsequence in Non-Increasing Order", "difficulty": "Easy", "description": "Given the array `nums`, obtain a subsequence of the array whose sum of elements is **strictly greater** than the sum of the non included elements in such subsequence.\n\nIf there are multiple solutions, return the subsequence with **minimum size** and if there still exist multiple solutions, return the subsequence with the **maximum total sum** of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array.\n\nNote that the solution with the given constraints is guaranteed to be **unique**. Also return the answer sorted in **non-increasing** order.\n\n**Example 1:**\n\n**Input:** nums = \\[4,3,10,9,8\\]\n**Output:** \\[10,9\\] \n**Explanation:** The subsequences \\[10,9\\] and \\[10,8\\] are minimal such that the sum of their elements is strictly greater than the sum of elements not included. However, the subsequence \\[10,9\\] has the maximum total sum of its elements. \n\n**Example 2:**\n\n**Input:** nums = \\[4,4,7,6,7\\]\n**Output:** \\[7,7,6\\] \n**Explanation:** The subsequence \\[7,7\\] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence \\[7,6,7\\] is the minimal satisfying the conditions. Note the subsequence has to be returned in non-decreasing order.  \n\n**Constraints:**\n\n*   `1 <= nums.length <= 500`\n*   `1 <= nums[i] <= 100`"}}
{"1408": {"title": "String Matching in an Array", "difficulty": "Easy", "description": "Given an array of string `words`, return _all strings in_ `words` _that is a **substring** of another word_. You can return the answer in **any order**.\n\nA **substring** is a contiguous sequence of characters within a string\n\n**Example 1:**\n\n**Input:** words = \\[ \"mass \", \"as \", \"hero \", \"superhero \"\\]\n**Output:** \\[ \"as \", \"hero \"\\]\n**Explanation:**  \"as \" is substring of  \"mass \" and  \"hero \" is substring of  \"superhero \".\n\\[ \"hero \", \"as \"\\] is also a valid answer.\n\n**Example 2:**\n\n**Input:** words = \\[ \"leetcode \", \"et \", \"code \"\\]\n**Output:** \\[ \"et \", \"code \"\\]\n**Explanation:**  \"et \",  \"code \" are substring of  \"leetcode \".\n\n**Example 3:**\n\n**Input:** words = \\[ \"blue \", \"green \", \"bu \"\\]\n**Output:** \\[\\]\n**Explanation:** No string of words is substring of another string.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 30`\n*   `words[i]` contains only lowercase English letters.\n*   All the strings of `words` are **unique**."}}
{"1413": {"title": "Minimum Value to Get Positive Step by Step Sum", "difficulty": "Easy", "description": "Given an array of integers `nums`, you start with an initial **positive** value _startValue__._\n\nIn each iteration, you calculate the step by step sum of _startValue_ plus elements in `nums` (from left to right).\n\nReturn the minimum **positive** value of _startValue_ such that the step by step sum is never less than 1.\n\n**Example 1:**\n\n**Input:** nums = \\[-3,2,-3,4,2\\]\n**Output:** 5\n**Explanation:** If you choose startValue = 4, in the third iteration your step by step sum is less than 1.\n**step by step sum**\n**startValue = 4 | startValue = 5 | nums**\n  (4 **\\-3** ) = 1  | (5 **\\-3** ) = 2    |  -3\n  (1 **+2** ) = 3  | (2 **+2** ) = 4    |   2\n  (3 **\\-3** ) = 0  | (4 **\\-3** ) = 1    |  -3\n  (0 **+4** ) = 4  | (1 **+4** ) = 5    |   4\n  (4 **+2** ) = 6  | (5 **+2** ) = 7    |   2\n\n**Example 2:**\n\n**Input:** nums = \\[1,2\\]\n**Output:** 1\n**Explanation:** Minimum start value should be positive. \n\n**Example 3:**\n\n**Input:** nums = \\[1,-2,-3\\]\n**Output:** 5\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `-100 <= nums[i] <= 100`"}}
{"1417": {"title": "Reformat The String", "difficulty": "Easy", "description": "You are given an alphanumeric string `s`. (**Alphanumeric string** is a string consisting of lowercase English letters and digits).\n\nYou have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.\n\nReturn _the reformatted string_ or return **an empty string** if it is impossible to reformat the string.\n\n**Example 1:**\n\n**Input:** s =  \"a0b1c2 \"\n**Output:**  \"0a1b2c \"\n**Explanation:** No two adjacent characters have the same type in  \"0a1b2c \".  \"a0b1c2 \",  \"0a1b2c \",  \"0c2a1b \" are also valid permutations.\n\n**Example 2:**\n\n**Input:** s =  \"leetcode \"\n**Output:**  \" \"\n**Explanation:**  \"leetcode \" has only characters so we cannot separate them by digits.\n\n**Example 3:**\n\n**Input:** s =  \"1229857369 \"\n**Output:**  \" \"\n**Explanation:**  \"1229857369 \" has only digits so we cannot separate them by characters.\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `s` consists of only lowercase English letters and/or digits."}}
{"1422": {"title": "Maximum Score After Splitting a String", "difficulty": "Easy", "description": "Given a string `s` of zeros and ones, _return the maximum score after splitting the string into two **non-empty** substrings_ (i.e. **left** substring and **right** substring).\n\nThe score after splitting a string is the number of **zeros** in the **left** substring plus the number of **ones** in the **right** substring.\n\n**Example 1:**\n\n**Input:** s =  \"011101 \"\n**Output:** 5 \n**Explanation:** \nAll possible ways of splitting s into two non-empty substrings are:\nleft =  \"0 \" and right =  \"11101 \", score = 1 + 4 = 5 \nleft =  \"01 \" and right =  \"1101 \", score = 1 + 3 = 4 \nleft =  \"011 \" and right =  \"101 \", score = 1 + 2 = 3 \nleft =  \"0111 \" and right =  \"01 \", score = 1 + 1 = 2 \nleft =  \"01110 \" and right =  \"1 \", score = 2 + 1 = 3\n\n**Example 2:**\n\n**Input:** s =  \"00111 \"\n**Output:** 5\n**Explanation:** When left =  \"00 \" and right =  \"111 \", we get the maximum score = 2 + 3 = 5\n\n**Example 3:**\n\n**Input:** s =  \"1111 \"\n**Output:** 3\n\n**Constraints:**\n\n*   `2 <= s.length <= 500`\n*   The string `s` consists of characters `'0'` and `'1'` only."}}
{"1426": {"title": "Counting Elements", "difficulty": "Easy", "description": "Given an integer array `arr`, count how many elements `x` there are, such that `x + 1` is also in `arr`. If there are duplicates in `arr`, count them separately.\n\n**Example 1:**\n\n**Input:** arr = \\[1,2,3\\]\n**Output:** 2\n**Explanation:** 1 and 2 are counted cause 2 and 3 are in arr.\n\n**Example 2:**\n\n**Input:** arr = \\[1,1,3,3,5,5,7,7\\]\n**Output:** 0\n**Explanation:** No numbers are counted, cause there is no 2, 4, 6, or 8 in arr.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 1000`\n*   `0 <= arr[i] <= 1000`"}}
{"1427": {"title": "Perform String Shifts", "difficulty": "Easy", "description": "You are given a string `s` containing lowercase English letters, and a matrix `shift`, where `shift[i] = [directioni, amounti]`:\n\n*   `directioni` can be `0` (for left shift) or `1` (for right shift).\n*   `amounti` is the amount by which string `s` is to be shifted.\n*   A left shift by 1 means remove the first character of `s` and append it to the end.\n*   Similarly, a right shift by 1 means remove the last character of `s` and add it to the beginning.\n\nReturn the final string after all operations.\n\n**Example 1:**\n\n**Input:** s =  \"abc \", shift = \\[\\[0,1\\],\\[1,2\\]\\]\n**Output:**  \"cab \"\n**Explanation:** \n\\[0,1\\] means shift to left by 1.  \"abc \" ->  \"bca \"\n\\[1,2\\] means shift to right by 2.  \"bca \" ->  \"cab \"\n\n**Example 2:**\n\n**Input:** s =  \"abcdefg \", shift = \\[\\[1,1\\],\\[1,1\\],\\[0,2\\],\\[1,3\\]\\]\n**Output:**  \"efgabcd \"\n**Explanation:**  \n\\[1,1\\] means shift to right by 1.  \"abcdefg \" ->  \"gabcdef \"\n\\[1,1\\] means shift to right by 1.  \"gabcdef \" ->  \"fgabcde \"\n\\[0,2\\] means shift to left by 2.  \"fgabcde \" ->  \"abcdefg \"\n\\[1,3\\] means shift to right by 3.  \"abcdefg \" ->  \"efgabcd \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` only contains lower case English letters.\n*   `1 <= shift.length <= 100`\n*   `shift[i].length == 2`\n*   `directioni` is either `0` or `1`.\n*   `0 <= amounti <= 100`"}}
{"1431": {"title": "Kids With the Greatest Number of Candies", "difficulty": "Easy", "description": "There are `n` kids with candies. You are given an integer array `candies`, where each `candies[i]` represents the number of candies the `ith` kid has, and an integer `extraCandies`, denoting the number of extra candies that you have.\n\nReturn _a boolean array_ `result` _of length_ `n`_, where_ `result[i]` _is_ `true` _if, after giving the_ `ith` _kid all the_ `extraCandies`_, they will have the **greatest** number of candies among all the kids__, or_ `false` _otherwise_.\n\nNote that **multiple** kids can have the **greatest** number of candies.\n\n**Example 1:**\n\n**Input:** candies = \\[2,3,5,1,3\\], extraCandies = 3\n**Output:** \\[true,true,true,false,true\\] \n**Explanation:** If you give all extraCandies to:\n- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.\n- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.\n- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.\n- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n\n**Example 2:**\n\n**Input:** candies = \\[4,2,1,1,2\\], extraCandies = 1\n**Output:** \\[true,false,false,false,false\\] \n**Explanation:** There is only 1 extra candy.\nKid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.\n\n**Example 3:**\n\n**Input:** candies = \\[12,1,12\\], extraCandies = 10\n**Output:** \\[true,false,true\\]\n\n**Constraints:**\n\n*   `n == candies.length`\n*   `2 <= n <= 100`\n*   `1 <= candies[i] <= 100`\n*   `1 <= extraCandies <= 50`"}}
{"1436": {"title": "Destination City", "difficulty": "Easy", "description": "You are given the array `paths`, where `paths[i] = [cityAi, cityBi]` means there exists a direct path going from `cityAi` to `cityBi`. _Return the destination city, that is, the city without any path outgoing to another city._\n\nIt is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.\n\n**Example 1:**\n\n**Input:** paths = \\[\\[ \"London \", \"New York \"\\],\\[ \"New York \", \"Lima \"\\],\\[ \"Lima \", \"Sao Paulo \"\\]\\]\n**Output:**  \"Sao Paulo \" \n**Explanation:** Starting at  \"London \" city you will reach  \"Sao Paulo \" city which is the destination city. Your trip consist of:  \"London \" ->  \"New York \" ->  \"Lima \" ->  \"Sao Paulo \".\n\n**Example 2:**\n\n**Input:** paths = \\[\\[ \"B \", \"C \"\\],\\[ \"D \", \"B \"\\],\\[ \"C \", \"A \"\\]\\]\n**Output:**  \"A \"\n**Explanation:** All possible trips are: \n \"D \" ->  \"B \" ->  \"C \" ->  \"A \". \n \"B \" ->  \"C \" ->  \"A \". \n \"C \" ->  \"A \". \n \"A \". \nClearly the destination city is  \"A \".\n\n**Example 3:**\n\n**Input:** paths = \\[\\[ \"A \", \"Z \"\\]\\]\n**Output:**  \"Z \"\n\n**Constraints:**\n\n*   `1 <= paths.length <= 100`\n*   `paths[i].length == 2`\n*   `1 <= cityAi.length, cityBi.length <= 10`\n*   `cityAi != cityBi`\n*   All strings consist of lowercase and uppercase English letters and the space character."}}
{"1437": {"title": "Check If All 1's Are at Least Length K Places Away", "difficulty": "Easy", "description": "Given an binary array `nums` and an integer `k`, return `true` _if all_ `1`_'s are at least_ `k` _places away from each other, otherwise return_ `false`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,0,0,0,1,0,0,1\\], k = 2\n**Output:** true\n**Explanation:** Each of the 1s are at least 2 places away from each other.\n\n**Example 2:**\n\n**Input:** nums = \\[1,0,0,1,0,1\\], k = 2\n**Output:** false\n**Explanation:** The second 1 and third 1 are only one apart from each other.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= k <= nums.length`\n*   `nums[i]` is `0` or `1`"}}
{"1446": {"title": "Consecutive Characters", "difficulty": "Easy", "description": "The **power** of the string is the maximum length of a non-empty substring that contains only one unique character.\n\nGiven a string `s`, return _the **power** of_ `s`.\n\n**Example 1:**\n\n**Input:** s =  \"leetcode \"\n**Output:** 2\n**Explanation:** The substring  \"ee \" is of length 2 with the character 'e' only.\n\n**Example 2:**\n\n**Input:** s =  \"abbcccddddeeeeedcba \"\n**Output:** 5\n**Explanation:** The substring  \"eeeee \" is of length 5 with the character 'e' only.\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `s` consists of only lowercase English letters."}}
{"1450": {"title": "Number of Students Doing Homework at a Given Time", "difficulty": "Easy", "description": "Given two integer arrays `startTime` and `endTime` and given an integer `queryTime`.\n\nThe `ith` student started doing their homework at the time `startTime[i]` and finished it at time `endTime[i]`.\n\nReturn _the number of students_ doing their homework at time `queryTime`. More formally, return the number of students where `queryTime` lays in the interval `[startTime[i], endTime[i]]` inclusive.\n\n**Example 1:**\n\n**Input:** startTime = \\[1,2,3\\], endTime = \\[3,2,7\\], queryTime = 4\n**Output:** 1\n**Explanation:** We have 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.\n\n**Example 2:**\n\n**Input:** startTime = \\[4\\], endTime = \\[4\\], queryTime = 4\n**Output:** 1\n**Explanation:** The only student was doing their homework at the queryTime.\n\n**Constraints:**\n\n*   `startTime.length == endTime.length`\n*   `1 <= startTime.length <= 100`\n*   `1 <= startTime[i] <= endTime[i] <= 1000`\n*   `1 <= queryTime <= 1000`"}}
{"1455": {"title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence", "difficulty": "Easy", "description": "Given a `sentence` that consists of some words separated by a **single space**, and a `searchWord`, check if `searchWord` is a prefix of any word in `sentence`.\n\nReturn _the index of the word in_ `sentence` _(**1-indexed**) where_ `searchWord` _is a prefix of this word_. If `searchWord` is a prefix of more than one word, return the index of the first word **(minimum index)**. If there is no such word return `-1`.\n\nA **prefix** of a string `s` is any leading contiguous substring of `s`.\n\n**Example 1:**\n\n**Input:** sentence =  \"i love eating burger \", searchWord =  \"burg \"\n**Output:** 4\n**Explanation:**  \"burg \" is prefix of  \"burger \" which is the 4th word in the sentence.\n\n**Example 2:**\n\n**Input:** sentence =  \"this problem is an easy problem \", searchWord =  \"pro \"\n**Output:** 2\n**Explanation:**  \"pro \" is prefix of  \"problem \" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.\n\n**Example 3:**\n\n**Input:** sentence =  \"i am tired \", searchWord =  \"you \"\n**Output:** -1\n**Explanation:**  \"you \" is not a prefix of any word in the sentence.\n\n**Constraints:**\n\n*   `1 <= sentence.length <= 100`\n*   `1 <= searchWord.length <= 10`\n*   `sentence` consists of lowercase English letters and spaces.\n*   `searchWord` consists of lowercase English letters."}}
{"1460": {"title": "Make Two Arrays Equal by Reversing Subarrays", "difficulty": "Easy", "description": "You are given two integer arrays of equal length `target` and `arr`. In one step, you can select any **non-empty subarray** of `arr` and reverse it. You are allowed to make any number of steps.\n\nReturn `true` _if you can make_ `arr` _equal to_ `target` _or_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** target = \\[1,2,3,4\\], arr = \\[2,4,1,3\\]\n**Output:** true\n**Explanation:** You can follow the next steps to convert arr to target:\n1- Reverse subarray \\[2,4,1\\], arr becomes \\[1,4,2,3\\]\n2- Reverse subarray \\[4,2\\], arr becomes \\[1,2,4,3\\]\n3- Reverse subarray \\[4,3\\], arr becomes \\[1,2,3,4\\]\nThere are multiple ways to convert arr to target, this is not the only way to do so.\n\n**Example 2:**\n\n**Input:** target = \\[7\\], arr = \\[7\\]\n**Output:** true\n**Explanation:** arr is equal to target without any reverses.\n\n**Example 3:**\n\n**Input:** target = \\[3,7,9\\], arr = \\[3,7,11\\]\n**Output:** false\n**Explanation:** arr does not have value 9 and it can never be converted to target.\n\n**Constraints:**\n\n*   `target.length == arr.length`\n*   `1 <= target.length <= 1000`\n*   `1 <= target[i] <= 1000`\n*   `1 <= arr[i] <= 1000`"}}
{"1464": {"title": "Maximum Product of Two Elements in an Array", "difficulty": "Easy", "description": "Given the array of integers `nums`, you will choose two different indices `i` and `j` of that array. _Return the maximum value of_ `(nums[i]-1)*(nums[j]-1)`.\n\n**Example 1:**\n\n**Input:** nums = \\[3,4,5,2\\]\n**Output:** 12 \n**Explanation:** If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums\\[1\\]-1)\\*(nums\\[2\\]-1) = (4-1)\\*(5-1) = 3\\*4 = 12. \n\n**Example 2:**\n\n**Input:** nums = \\[1,5,4,5\\]\n**Output:** 16\n**Explanation:** Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)\\*(5-1) = 16.\n\n**Example 3:**\n\n**Input:** nums = \\[3,7\\]\n**Output:** 12\n\n**Constraints:**\n\n*   `2 <= nums.length <= 500`\n*   `1 <= nums[i] <= 10^3`"}}
{"1469": {"title": "Find All The Lonely Nodes", "difficulty": "Easy", "description": "In a binary tree, a **lonely** node is a node that is the only child of its parent node. The root of the tree is not lonely because it does not have a parent node.\n\nGiven the `root` of a binary tree, return _an array containing the values of all lonely nodes_ in the tree. Return the list **in any order**.\n\n**Example 1:**\n\n**Input:** root = \\[1,2,3,null,4\\]\n**Output:** \\[4\\]\n**Explanation:** Light blue node is the only lonely node.\nNode 1 is the root and is not lonely.\nNodes 2 and 3 have the same parent and are not lonely.\n\n**Example 2:**\n\n**Input:** root = \\[7,1,4,6,null,5,3,null,null,null,null,null,2\\]\n**Output:** \\[6,2\\]\n**Explanation:** Light blue nodes are lonely nodes.\nPlease remember that order doesn't matter, \\[2,6\\] is also an acceptable answer.\n\n**Example 3:**\n\n**Input:** root = \\[11,99,88,77,null,null,66,55,null,null,44,33,null,null,22\\]\n**Output:** \\[77,55,33,66,44,22\\]\n**Explanation:** Nodes 99 and 88 share the same parent. Node 11 is the root.\nAll other nodes are lonely.\n\n**Constraints:**\n\n*   The number of nodes in the `tree` is in the range `[1, 1000].`\n*   `1 <= Node.val <= 106`"}}
{"1470": {"title": "Shuffle the Array", "difficulty": "Easy", "description": "Given the array `nums` consisting of `2n` elements in the form `[x1,x2,...,xn,y1,y2,...,yn]`.\n\n_Return the array in the form_ `[x1,y1,x2,y2,...,xn,yn]`.\n\n**Example 1:**\n\n**Input:** nums = \\[2,5,1,3,4,7\\], n = 3\n**Output:** \\[2,3,5,4,1,7\\] \n**Explanation:** Since x1\\=2, x2\\=5, x3\\=1, y1\\=3, y2\\=4, y3\\=7 then the answer is \\[2,3,5,4,1,7\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4,4,3,2,1\\], n = 4\n**Output:** \\[1,4,2,3,3,2,4,1\\]\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,2,2\\], n = 2\n**Output:** \\[1,2,1,2\\]\n\n**Constraints:**\n\n*   `1 <= n <= 500`\n*   `nums.length == 2n`\n*   `1 <= nums[i] <= 10^3`"}}
{"1474": {"title": "Delete N Nodes After M Nodes of a Linked List", "difficulty": "Easy", "description": "You are given the `head` of a linked list and two integers `m` and `n`.\n\nTraverse the linked list and remove some nodes in the following way:\n\n*   Start with the head as the current node.\n*   Keep the first `m` nodes starting with the current node.\n*   Remove the next `n` nodes\n*   Keep repeating steps 2 and 3 until you reach the end of the list.\n\nReturn _the head of the modified list after removing the mentioned nodes_.\n\n**Example 1:**\n\n**Input:** head = \\[1,2,3,4,5,6,7,8,9,10,11,12,13\\], m = 2, n = 3\n**Output:** \\[1,2,6,7,11,12\\]\n**Explanation:** Keep the first (m = 2) nodes starting from the head of the linked List  (1 ->2) show in black nodes.\nDelete the next (n = 3) nodes (3 -> 4 -> 5) show in read nodes.\nContinue with the same procedure until reaching the tail of the Linked List.\nHead of the linked list after removing nodes is returned.\n\n**Example 2:**\n\n**Input:** head = \\[1,2,3,4,5,6,7,8,9,10,11\\], m = 1, n = 3\n**Output:** \\[1,5,9\\]\n**Explanation:** Head of linked list after removing nodes is returned.\n\n**Constraints:**\n\n*   The number of nodes in the list is in the range `[1, 104]`.\n*   `1 <= Node.val <= 106`\n*   `1 <= m, n <= 1000`\n\n**Follow up:** Could you solve this problem by modifying the list in-place?"}}
{"1475": {"title": "Final Prices With a Special Discount in a Shop", "difficulty": "Easy", "description": "You are given an integer array `prices` where `prices[i]` is the price of the `ith` item in a shop.\n\nThere is a special discount for items in the shop. If you buy the `ith` item, then you will receive a discount equivalent to `prices[j]` where `j` is the minimum index such that `j > i` and `prices[j] <= prices[i]`. Otherwise, you will not receive any discount at all.\n\nReturn an integer array `answer` where `answer[i]` is the final price you will pay for the `ith` item of the shop, considering the special discount.\n\n**Example 1:**\n\n**Input:** prices = \\[8,4,6,2,3\\]\n**Output:** \\[4,2,4,2,3\\]\n**Explanation:** \nFor item 0 with price\\[0\\]=8 you will receive a discount equivalent to prices\\[1\\]=4, therefore, the final price you will pay is 8 - 4 = 4.\nFor item 1 with price\\[1\\]=4 you will receive a discount equivalent to prices\\[3\\]=2, therefore, the final price you will pay is 4 - 2 = 2.\nFor item 2 with price\\[2\\]=6 you will receive a discount equivalent to prices\\[3\\]=2, therefore, the final price you will pay is 6 - 2 = 4.\nFor items 3 and 4 you will not receive any discount at all.\n\n**Example 2:**\n\n**Input:** prices = \\[1,2,3,4,5\\]\n**Output:** \\[1,2,3,4,5\\]\n**Explanation:** In this case, for all items, you will not receive any discount at all.\n\n**Example 3:**\n\n**Input:** prices = \\[10,1,1,6\\]\n**Output:** \\[9,0,1,6\\]\n\n**Constraints:**\n\n*   `1 <= prices.length <= 500`\n*   `1 <= prices[i] <= 1000`\n\nThe left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees."}}
{"1480": {"title": "Running Sum of 1d Array", "difficulty": "Easy", "description": "Given an array `nums`. We define a running sum of an array as `runningSum[i] = sum(nums[0]...nums[i])`.\n\nReturn the running sum of `nums`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** \\[1,3,6,10\\]\n**Explanation:** Running sum is obtained as follows: \\[1, 1+2, 1+2+3, 1+2+3+4\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1,1,1\\]\n**Output:** \\[1,2,3,4,5\\]\n**Explanation:** Running sum is obtained as follows: \\[1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1\\].\n\n**Example 3:**\n\n**Input:** nums = \\[3,1,2,10,1\\]\n**Output:** \\[3,4,6,16,17\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `-10^6 <= nums[i] <= 10^6`"}}
{"1486": {"title": "XOR Operation in an Array", "difficulty": "Easy", "description": "You are given an integer `n` and an integer `start`.\n\nDefine an array `nums` where `nums[i] = start + 2 * i` (**0-indexed**) and `n == nums.length`.\n\nReturn _the bitwise XOR of all elements of_ `nums`.\n\n**Example 1:**\n\n**Input:** n = 5, start = 0\n**Output:** 8\n**Explanation:** Array nums is equal to \\[0, 2, 4, 6, 8\\] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\nWhere  \"^ \" corresponds to bitwise XOR operator.\n\n**Example 2:**\n\n**Input:** n = 4, start = 3\n**Output:** 8\n**Explanation:** Array nums is equal to \\[3, 5, 7, 9\\] where (3 ^ 5 ^ 7 ^ 9) = 8.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`\n*   `0 <= start <= 1000`\n*   `n == nums.length`"}}
{"1491": {"title": "Average Salary Excluding the Minimum and Maximum Salary", "difficulty": "Easy", "description": "You are given an array of **unique** integers `salary` where `salary[i]` is the salary of the `ith` employee.\n\nReturn _the average salary of employees excluding the minimum and maximum salary_. Answers within `10-5` of the actual answer will be accepted.\n\n**Example 1:**\n\n**Input:** salary = \\[4000,3000,1000,2000\\]\n**Output:** 2500.00000\n**Explanation:** Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500\n\n**Example 2:**\n\n**Input:** salary = \\[1000,2000,3000\\]\n**Output:** 2000.00000\n**Explanation:** Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000\n\n**Constraints:**\n\n*   `3 <= salary.length <= 100`\n*   `1000 <= salary[i] <= 106`\n*   All the integers of `salary` are **unique**."}}
{"1496": {"title": "Path Crossing", "difficulty": "Easy", "description": "Given a string `path`, where `path[i] = 'N'`, `'S'`, `'E'` or `'W'`, each representing moving one unit north, south, east, or west, respectively. You start at the origin `(0, 0)` on a 2D plane and walk on the path specified by `path`.\n\nReturn `true` _if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited_. Return `false` otherwise.\n\n**Example 1:**\n\n**Input:** path =  \"NES \"\n**Output:** false \n**Explanation:** Notice that the path doesn't cross any point more than once.\n\n**Example 2:**\n\n**Input:** path =  \"NESWW \"\n**Output:** true\n**Explanation:** Notice that the path visits the origin twice.\n\n**Constraints:**\n\n*   `1 <= path.length <= 104`\n*   `path[i]` is either `'N'`, `'S'`, `'E'`, or `'W'`."}}
{"1502": {"title": "Can Make Arithmetic Progression From Sequence", "difficulty": "Easy", "description": "A sequence of numbers is called an **arithmetic progression** if the difference between any two consecutive elements is the same.\n\nGiven an array of numbers `arr`, return `true` _if the array can be rearranged to form an **arithmetic progression**. Otherwise, return_ `false`.\n\n**Example 1:**\n\n**Input:** arr = \\[3,5,1\\]\n**Output:** true\n**Explanation:** We can reorder the elements as \\[1,3,5\\] or \\[5,3,1\\] with differences 2 and -2 respectively, between each consecutive elements.\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,4\\]\n**Output:** false\n**Explanation:** There is no way to reorder the elements to obtain an arithmetic progression.\n\n**Constraints:**\n\n*   `2 <= arr.length <= 1000`\n*   `-106 <= arr[i] <= 106`"}}
{"1507": {"title": "Reformat Date", "difficulty": "Easy", "description": "Given a `date` string in the form `Day Month Year`, where:\n\n*   `Day` is in the set `{ \"1st \", \"2nd \", \"3rd \", \"4th \", ..., \"30th \", \"31st \"}`.\n*   `Month` is in the set `{ \"Jan \", \"Feb \", \"Mar \", \"Apr \", \"May \", \"Jun \", \"Jul \", \"Aug \", \"Sep \", \"Oct \", \"Nov \", \"Dec \"}`.\n*   `Year` is in the range `[1900, 2100]`.\n\nConvert the date string to the format `YYYY-MM-DD`, where:\n\n*   `YYYY` denotes the 4 digit year.\n*   `MM` denotes the 2 digit month.\n*   `DD` denotes the 2 digit day.\n\n**Example 1:**\n\n**Input:** date =  \"20th Oct 2052 \"\n**Output:**  \"2052-10-20 \"\n\n**Example 2:**\n\n**Input:** date =  \"6th Jun 1933 \"\n**Output:**  \"1933-06-06 \"\n\n**Example 3:**\n\n**Input:** date =  \"26th May 1960 \"\n**Output:**  \"1960-05-26 \"\n\n**Constraints:**\n\n*   The given dates are guaranteed to be valid, so no error handling is necessary."}}
{"1512": {"title": "Number of Good Pairs", "difficulty": "Easy", "description": "Given an array of integers `nums`, return _the number of **good pairs**_.\n\nA pair `(i, j)` is called _good_ if `nums[i] == nums[j]` and `i` < `j`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,3,1,1,3\\]\n**Output:** 4\n**Explanation:** There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1,1\\]\n**Output:** 6\n**Explanation:** Each pair in the array are _good_.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 100`"}}
{"1518": {"title": "Water Bottles", "difficulty": "Easy", "description": "There are `numBottles` water bottles that are initially full of water. You can exchange `numExchange` empty water bottles from the market with one full water bottle.\n\nThe operation of drinking a full water bottle turns it into an empty bottle.\n\nGiven the two integers `numBottles` and `numExchange`, return _the **maximum** number of water bottles you can drink_.\n\n**Example 1:**\n\n**Input:** numBottles = 9, numExchange = 3\n**Output:** 13\n**Explanation:** You can exchange 3 empty bottles to get 1 full water bottle.\nNumber of water bottles you can drink: 9 + 3 + 1 = 13.\n\n**Example 2:**\n\n**Input:** numBottles = 15, numExchange = 4\n**Output:** 19\n**Explanation:** You can exchange 4 empty bottles to get 1 full water bottle. \nNumber of water bottles you can drink: 15 + 3 + 1 = 19.\n\n**Constraints:**\n\n*   `1 <= numBottles <= 100`\n*   `2 <= numExchange <= 100`"}}
{"1523": {"title": "Count Odd Numbers in an Interval Range", "difficulty": "Easy", "description": "Given two non-negative integers `low` and `high`. Return the _count of odd numbers between_ `low` _and_ `high` _(inclusive)_.\n\n**Example 1:**\n\n**Input:** low = 3, high = 7\n**Output:** 3\n**Explanation:** The odd numbers between 3 and 7 are \\[3,5,7\\].\n\n**Example 2:**\n\n**Input:** low = 8, high = 10\n**Output:** 1\n**Explanation:** The odd numbers between 8 and 10 are \\[9\\].\n\n**Constraints:**\n\n*   `0 <= low <= high <= 10^9`"}}
{"1528": {"title": "Shuffle String", "difficulty": "Easy", "description": "You are given a string `s` and an integer array `indices` of the **same length**. The string `s` will be shuffled such that the character at the `ith` position moves to `indices[i]` in the shuffled string.\n\nReturn _the shuffled string_.\n\n**Example 1:**\n\n**Input:** s =  \"codeleet \", `indices` = \\[4,5,6,7,0,2,1,3\\]\n**Output:**  \"leetcode \"\n**Explanation:** As shown,  \"codeleet \" becomes  \"leetcode \" after shuffling.\n\n**Example 2:**\n\n**Input:** s =  \"abc \", `indices` = \\[0,1,2\\]\n**Output:**  \"abc \"\n**Explanation:** After shuffling, each character remains in its position.\n\n**Constraints:**\n\n*   `s.length == indices.length == n`\n*   `1 <= n <= 100`\n*   `s` consists of only lowercase English letters.\n*   `0 <= indices[i] < n`\n*   All values of `indices` are **unique**."}}
{"1534": {"title": "Count Good Triplets", "difficulty": "Easy", "description": "Given an array of integers `arr`, and three integers `a`, `b` and `c`. You need to find the number of good triplets.\n\nA triplet `(arr[i], arr[j], arr[k])` is **good** if the following conditions are true:\n\n*   `0 <= i < j < k < arr.length`\n*   `|arr[i] - arr[j]| <= a`\n*   `|arr[j] - arr[k]| <= b`\n*   `|arr[i] - arr[k]| <= c`\n\nWhere `|x|` denotes the absolute value of `x`.\n\nReturn _the number of good triplets_.\n\n**Example 1:**\n\n**Input:** arr = \\[3,0,1,1,9,7\\], a = 7, b = 2, c = 3\n**Output:** 4\n**Explanation:** There are 4 good triplets: \\[(3,0,1), (3,0,1), (3,1,1), (0,1,1)\\].\n\n**Example 2:**\n\n**Input:** arr = \\[1,1,2,2,3\\], a = 0, b = 0, c = 1\n**Output:** 0\n**Explanation:** No triplet satisfies all conditions.\n\n**Constraints:**\n\n*   `3 <= arr.length <= 100`\n*   `0 <= arr[i] <= 1000`\n*   `0 <= a, b, c <= 1000`"}}
{"1539": {"title": "Kth Missing Positive Number", "difficulty": "Easy", "description": "Given an array `arr` of positive integers sorted in a **strictly increasing order**, and an integer `k`.\n\nReturn _the_ `kth` _**positive** integer that is **missing** from this array._\n\n**Example 1:**\n\n**Input:** arr = \\[2,3,4,7,11\\], k = 5\n**Output:** 9\n**Explanation:** The missing positive integers are \\[1,5,6,8,9,10,12,13,...\\]. The 5th missing positive integer is 9.\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,3,4\\], k = 2\n**Output:** 6\n**Explanation:** The missing positive integers are \\[5,6,7,...\\]. The 2nd missing positive integer is 6.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 1000`\n*   `1 <= arr[i] <= 1000`\n*   `1 <= k <= 1000`\n*   `arr[i] < arr[j]` for `1 <= i < j <= arr.length`\n\n**Follow up:**\n\nCould you solve this problem in less than O(n) complexity?"}}
{"1544": {"title": "Make The String Great", "difficulty": "Easy", "description": "Given a string `s` of lower and upper case English letters.\n\nA good string is a string which doesn't have **two adjacent characters** `s[i]` and `s[i + 1]` where:\n\n*   `0 <= i <= s.length - 2`\n*   `s[i]` is a lower-case letter and `s[i + 1]` is the same letter but in upper-case or **vice-versa**.\n\nTo make the string good, you can choose **two adjacent** characters that make the string bad and remove them. You can keep doing this until the string becomes good.\n\nReturn _the string_ after making it good. The answer is guaranteed to be unique under the given constraints.\n\n**Notice** that an empty string is also good.\n\n**Example 1:**\n\n**Input:** s =  \"leEeetcode \"\n**Output:**  \"leetcode \"\n**Explanation:** In the first step, either you choose i = 1 or i = 2, both will result  \"leEeetcode \" to be reduced to  \"leetcode \".\n\n**Example 2:**\n\n**Input:** s =  \"abBAcC \"\n**Output:**  \" \"\n**Explanation:** We have many possible scenarios, and all lead to the same answer. For example:\n \"abBAcC \" -->  \"aAcC \" -->  \"cC \" -->  \" \"\n \"abBAcC \" -->  \"abBA \" -->  \"aA \" -->  \" \"\n\n**Example 3:**\n\n**Input:** s =  \"s \"\n**Output:**  \"s \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` contains only lower and upper case English letters."}}
{"1550": {"title": "Three Consecutive Odds", "difficulty": "Easy", "description": "Given an integer array `arr`, return `true` if there are three consecutive odd numbers in the array. Otherwise, return `false`.\n\n**Example 1:**\n\n**Input:** arr = \\[2,6,4,1\\]\n**Output:** false\n**Explanation:** There are no three consecutive odds.\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,34,3,4,5,7,23,12\\]\n**Output:** true\n**Explanation:** \\[5,7,23\\] are three consecutive odds.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 1000`\n*   `1 <= arr[i] <= 1000`"}}
{"1556": {"title": "Thousand Separator", "difficulty": "Easy", "description": "Given an integer `n`, add a dot ( \". \") as the thousands separator and return it in string format.\n\n**Example 1:**\n\n**Input:** n = 987\n**Output:**  \"987 \"\n\n**Example 2:**\n\n**Input:** n = 1234\n**Output:**  \"1.234 \"\n\n**Constraints:**\n\n*   `0 <= n <= 231 - 1`"}}
{"1560": {"title": "Most Visited Sector in  a Circular Track", "difficulty": "Easy", "description": "Given an integer `n` and an integer array `rounds`. We have a circular track which consists of `n` sectors labeled from `1` to `n`. A marathon will be held on this track, the marathon consists of `m` rounds. The `ith` round starts at sector `rounds[i - 1]` and ends at sector `rounds[i]`. For example, round 1 starts at sector `rounds[0]` and ends at sector `rounds[1]`\n\nReturn _an array of the most visited sectors_ sorted in **ascending** order.\n\nNotice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).\n\n**Example 1:**\n\n**Input:** n = 4, rounds = \\[1,3,1,2\\]\n**Output:** \\[1,2\\]\n**Explanation:** The marathon starts at sector 1. The order of the visited sectors is as follows:\n1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)\nWe can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.\n\n**Example 2:**\n\n**Input:** n = 2, rounds = \\[2,1,2,1,2,1,2,1,2\\]\n**Output:** \\[2\\]\n\n**Example 3:**\n\n**Input:** n = 7, rounds = \\[1,3,5,7\\]\n**Output:** \\[1,2,3,4,5,6,7\\]\n\n**Constraints:**\n\n*   `2 <= n <= 100`\n*   `1 <= m <= 100`\n*   `rounds.length == m + 1`\n*   `1 <= rounds[i] <= n`\n*   `rounds[i] != rounds[i + 1]` for `0 <= i < m`"}}
{"1566": {"title": "Detect Pattern of Length M Repeated K or More Times", "difficulty": "Easy", "description": "Given an array of positive integers `arr`, find a pattern of length `m` that is repeated `k` or more times.\n\nA **pattern** is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times **consecutively** without overlapping. A pattern is defined by its length and the number of repetitions.\n\nReturn `true` _if there exists a pattern of length_ `m` _that is repeated_ `k` _or more times, otherwise return_ `false`.\n\n**Example 1:**\n\n**Input:** arr = \\[1,2,4,4,4,4\\], m = 1, k = 3\n**Output:** true\n**Explanation:** The pattern **(4)** of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less.\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,1,2,1,1,1,3\\], m = 2, k = 2\n**Output:** true\n**Explanation:** The pattern **(1,2)** of length 2 is repeated 2 consecutive times. Another valid pattern **(2,1) is** also repeated 2 times.\n\n**Example 3:**\n\n**Input:** arr = \\[1,2,1,2,1,3\\], m = 2, k = 3\n**Output:** false\n**Explanation:** The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.\n\n**Constraints:**\n\n*   `2 <= arr.length <= 100`\n*   `1 <= arr[i] <= 100`\n*   `1 <= m <= 100`\n*   `2 <= k <= 100`"}}
{"1572": {"title": "Matrix Diagonal Sum", "difficulty": "Easy", "description": "Given a square matrix `mat`, return the sum of the matrix diagonals.\n\nOnly include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.\n\n**Example 1:**\n\n**Input:** mat = \\[\\[**1**,2,**3**\\],\n              \\[4,**5**,6\\],\n              \\[**7**,8,**9**\\]\\]\n**Output:** 25\n**Explanation:** Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25\nNotice that element mat\\[1\\]\\[1\\] = 5 is counted only once.\n\n**Example 2:**\n\n**Input:** mat = \\[\\[**1**,1,1,**1**\\],\n              \\[1,**1**,**1**,1\\],\n              \\[1,**1**,**1**,1\\],\n              \\[**1**,1,1,**1**\\]\\]\n**Output:** 8\n\n**Example 3:**\n\n**Input:** mat = \\[\\[**5**\\]\\]\n**Output:** 5\n\n**Constraints:**\n\n*   `n == mat.length == mat[i].length`\n*   `1 <= n <= 100`\n*   `1 <= mat[i][j] <= 100`"}}
{"1576": {"title": "Replace All ?'s to Avoid Consecutive Repeating Characters", "difficulty": "Easy", "description": "Given a string `s` containing only lowercase English letters and the `'?'` character, convert **all** the `'?'` characters into lowercase letters such that the final string does not contain any **consecutive repeating** characters. You **cannot** modify the non `'?'` characters.\n\nIt is **guaranteed** that there are no consecutive repeating characters in the given string **except** for `'?'`.\n\nReturn _the final string after all the conversions (possibly zero) have been made_. If there is more than one solution, return **any of them**. It can be shown that an answer is always possible with the given constraints.\n\n**Example 1:**\n\n**Input:** s =  \"?zs \"\n**Output:**  \"azs \"\n**Explanation:** There are 25 solutions for this problem. From  \"azs \" to  \"yzs \", all are valid. Only  \"z \" is an invalid modification as the string will consist of consecutive repeating characters in  \"zzs \".\n\n**Example 2:**\n\n**Input:** s =  \"ubv?w \"\n**Output:**  \"ubvaw \"\n**Explanation:** There are 24 solutions for this problem. Only  \"v \" and  \"w \" are invalid modifications as the strings will consist of consecutive repeating characters in  \"ubvvw \" and  \"ubvww \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consist of lowercase English letters and `'?'`."}}
{"1582": {"title": "Special Positions in a Binary Matrix", "difficulty": "Easy", "description": "Given an `m x n` binary matrix `mat`, return _the number of special positions in_ `mat`_._\n\nA position `(i, j)` is called **special** if `mat[i][j] == 1` and all other elements in row `i` and column `j` are `0` (rows and columns are **0-indexed**).\n\n**Example 1:**\n\n**Input:** mat = \\[\\[1,0,0\\],\\[0,0,1\\],\\[1,0,0\\]\\]\n**Output:** 1\n**Explanation:** (1, 2) is a special position because mat\\[1\\]\\[2\\] == 1 and all other elements in row 1 and column 2 are 0.\n\n**Example 2:**\n\n**Input:** mat = \\[\\[1,0,0\\],\\[0,1,0\\],\\[0,0,1\\]\\]\n**Output:** 3\n**Explanation:** (0, 0), (1, 1) and (2, 2) are special positions.\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n <= 100`\n*   `mat[i][j]` is either `0` or `1`."}}
{"1588": {"title": "Sum of All Odd Length Subarrays", "difficulty": "Easy", "description": "Given an array of positive integers `arr`, return _the sum of all possible **odd-length subarrays** of_ `arr`.\n\nA **subarray** is a contiguous subsequence of the array.\n\n**Example 1:**\n\n**Input:** arr = \\[1,4,2,5,3\\]\n**Output:** 58\n**Explanation:** The odd-length subarrays of arr and their sums are:\n\\[1\\] = 1\n\\[4\\] = 4\n\\[2\\] = 2\n\\[5\\] = 5\n\\[3\\] = 3\n\\[1,4,2\\] = 7\n\\[4,2,5\\] = 11\n\\[2,5,3\\] = 10\n\\[1,4,2,5,3\\] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58\n\n**Example 2:**\n\n**Input:** arr = \\[1,2\\]\n**Output:** 3\n**Explanation:** There are only 2 subarrays of odd length, \\[1\\] and \\[2\\]. Their sum is 3.\n\n**Example 3:**\n\n**Input:** arr = \\[10,11,12\\]\n**Output:** 66\n\n**Constraints:**\n\n*   `1 <= arr.length <= 100`\n*   `1 <= arr[i] <= 1000`\n\n**Follow up:**\n\nCould you solve this problem in O(n) time complexity?"}}
{"1592": {"title": "Rearrange Spaces Between Words", "difficulty": "Easy", "description": "You are given a string `text` of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that `text` **contains at least one word**.\n\nRearrange the spaces so that there is an **equal** number of spaces between every pair of adjacent words and that number is **maximized**. If you cannot redistribute all the spaces equally, place the **extra spaces at the end**, meaning the returned string should be the same length as `text`.\n\nReturn _the string after rearranging the spaces_.\n\n**Example 1:**\n\n**Input:** text =  \"  this   is  a sentence  \"\n**Output:**  \"this   is   a   sentence \"\n**Explanation:** There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.\n\n**Example 2:**\n\n**Input:** text =  \" practice   makes   perfect \"\n**Output:**  \"practice   makes   perfect  \"\n**Explanation:** There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.\n\n**Constraints:**\n\n*   `1 <= text.length <= 100`\n*   `text` consists of lowercase English letters and `' '`.\n*   `text` contains at least one word."}}
{"1598": {"title": "Crawler Log Folder", "difficulty": "Easy", "description": "The Leetcode file system keeps a log each time some user performs a _change folder_ operation.\n\nThe operations are described below:\n\n*   `\"../ \"` : Move to the parent folder of the current folder. (If you are already in the main folder, **remain in the same folder**).\n*   `\"./ \"` : Remain in the same folder.\n*   `\"x/ \"` : Move to the child folder named `x` (This folder is **guaranteed to always exist**).\n\nYou are given a list of strings `logs` where `logs[i]` is the operation performed by the user at the `ith` step.\n\nThe file system starts in the main folder, then the operations in `logs` are performed.\n\nReturn _the minimum number of operations needed to go back to the main folder after the change folder operations._\n\n**Example 1:**\n\n**Input:** logs = \\[ \"d1/ \", \"d2/ \", \"../ \", \"d21/ \", \"./ \"\\]\n**Output:** 2\n**Explanation:** Use this change folder operation  \"../ \" 2 times and go back to the main folder.\n\n**Example 2:**\n\n**Input:** logs = \\[ \"d1/ \", \"d2/ \", \"./ \", \"d3/ \", \"../ \", \"d31/ \"\\]\n**Output:** 3\n\n**Example 3:**\n\n**Input:** logs = \\[ \"d1/ \", \"../ \", \"../ \", \"../ \"\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= logs.length <= 103`\n*   `2 <= logs[i].length <= 10`\n*   `logs[i]` contains lowercase English letters, digits, `'.'`, and `'/'`.\n*   `logs[i]` follows the format described in the statement.\n*   Folder names consist of lowercase English letters and digits."}}
{"1603": {"title": "Design Parking System", "difficulty": "Easy", "description": "Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.\n\nImplement the `ParkingSystem` class:\n\n*   `ParkingSystem(int big, int medium, int small)` Initializes object of the `ParkingSystem` class. The number of slots for each parking space are given as part of the constructor.\n*   `bool addCar(int carType)` Checks whether there is a parking space of `carType` for the car that wants to get into the parking lot. `carType` can be of three kinds: big, medium, or small, which are represented by `1`, `2`, and `3` respectively. **A car can only park in a parking space of its** `carType`. If there is no space available, return `false`, else park the car in that size space and return `true`.\n\n**Example 1:**\n\n**Input**\n\\[ \"ParkingSystem \",  \"addCar \",  \"addCar \",  \"addCar \",  \"addCar \"\\]\n\\[\\[1, 1, 0\\], \\[1\\], \\[2\\], \\[3\\], \\[1\\]\\]\n**Output**\n\\[null, true, true, false, false\\]\n\n**Explanation**\nParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\nparkingSystem.addCar(1); // return true because there is 1 available slot for a big car\nparkingSystem.addCar(2); // return true because there is 1 available slot for a medium car\nparkingSystem.addCar(3); // return false because there is no available slot for a small car\nparkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.\n\n**Constraints:**\n\n*   `0 <= big, medium, small <= 1000`\n*   `carType` is `1`, `2`, or `3`\n*   At most `1000` calls will be made to `addCar`"}}
{"1608": {"title": "Special Array With X Elements Greater Than or Equal X", "difficulty": "Easy", "description": "You are given an array `nums` of non-negative integers. `nums` is considered **special** if there exists a number `x` such that there are **exactly** `x` numbers in `nums` that are **greater than or equal to** `x`.\n\nNotice that `x` **does not** have to be an element in `nums`.\n\nReturn `x` _if the array is **special**, otherwise, return_ `-1`. It can be proven that if `nums` is special, the value for `x` is **unique**.\n\n**Example 1:**\n\n**Input:** nums = \\[3,5\\]\n**Output:** 2\n**Explanation:** There are 2 values (3 and 5) that are greater than or equal to 2.\n\n**Example 2:**\n\n**Input:** nums = \\[0,0\\]\n**Output:** -1\n**Explanation:** No numbers fit the criteria for x.\nIf x = 0, there should be 0 numbers >= x, but there are 2.\nIf x = 1, there should be 1 number >= x, but there are 0.\nIf x = 2, there should be 2 numbers >= x, but there are 0.\nx cannot be greater since there are only 2 numbers in nums.\n\n**Example 3:**\n\n**Input:** nums = \\[0,4,3,0,4\\]\n**Output:** 3\n**Explanation:** There are 3 values that are greater than or equal to 3.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `0 <= nums[i] <= 1000`"}}
{"1614": {"title": "Maximum Nesting Depth of the Parentheses", "difficulty": "Easy", "description": "A string is a **valid parentheses string** (denoted **VPS**) if it meets one of the following:\n\n*   It is an empty string `\" \"`, or a single character not equal to `\"( \"` or `\") \"`,\n*   It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are **VPS**'s, or\n*   It can be written as `(A)`, where `A` is a **VPS**.\n\nWe can similarly define the **nesting depth** `depth(S)` of any VPS `S` as follows:\n\n*   `depth( \" \") = 0`\n*   `depth(C) = 0`, where `C` is a string with a single character not equal to `\"( \"` or `\") \"`.\n*   `depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are **VPS**'s.\n*   `depth( \"( \" + A + \") \") = 1 + depth(A)`, where `A` is a **VPS**.\n\nFor example, `\" \"`, `\"()() \"`, and `\"()(()()) \"` are **VPS**'s (with nesting depths 0, 1, and 2), and `\")( \"` and `\"(() \"` are not **VPS**'s.\n\nGiven a **VPS** represented as string `s`, return _the **nesting depth** of_ `s`.\n\n**Example 1:**\n\n**Input:** s =  \"(1+(2\\*3)+((8)/4))+1 \"\n**Output:** 3\n**Explanation:** Digit 8 is inside of 3 nested parentheses in the string.\n\n**Example 2:**\n\n**Input:** s =  \"(1)+((2))+(((3))) \"\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists of digits `0-9` and characters `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`.\n*   It is guaranteed that parentheses expression `s` is a **VPS**."}}
{"1619": {"title": "Mean of Array After Removing Some Elements", "difficulty": "Easy", "description": "Given an integer array `arr`, return _the mean of the remaining integers after removing the smallest `5%` and the largest `5%` of the elements._\n\nAnswers within `10-5` of the **actual answer** will be considered accepted.\n\n**Example 1:**\n\n**Input:** arr = \\[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3\\]\n**Output:** 2.00000\n**Explanation:** After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.\n\n**Example 2:**\n\n**Input:** arr = \\[6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0\\]\n**Output:** 4.00000\n\n**Example 3:**\n\n**Input:** arr = \\[6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4\\]\n**Output:** 4.77778\n\n**Constraints:**\n\n*   `20 <= arr.length <= 1000`\n*   `arr.length` **is a multiple** of `20`.\n*   `0 <= arr[i] <= 105`"}}
{"1624": {"title": "Largest Substring Between Two Equal Characters", "difficulty": "Easy", "description": "Given a string `s`, return _the length of the longest substring between two equal characters, excluding the two characters._ If there is no such substring return `-1`.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n**Example 1:**\n\n**Input:** s =  \"aa \"\n**Output:** 0\n**Explanation:** The optimal substring here is an empty substring between the two `'a's`.\n\n**Example 2:**\n\n**Input:** s =  \"abca \"\n**Output:** 2\n**Explanation:** The optimal substring here is  \"bc \".\n\n**Example 3:**\n\n**Input:** s =  \"cbzxy \"\n**Output:** -1\n**Explanation:** There are no characters that appear twice in s.\n\n**Constraints:**\n\n*   `1 <= s.length <= 300`\n*   `s` contains only lowercase English letters."}}
{"1629": {"title": "Slowest Key", "difficulty": "Easy", "description": "A newly designed keypad was tested, where a tester pressed a sequence of `n` keys, one at a time.\n\nYou are given a string `keysPressed` of length `n`, where `keysPressed[i]` was the `ith` key pressed in the testing sequence, and a sorted list `releaseTimes`, where `releaseTimes[i]` was the time the `ith` key was released. Both arrays are **0-indexed**. The `0th` key was pressed at the time `0`, and every subsequent key was pressed at the **exact** time the previous key was released.\n\nThe tester wants to know the key of the keypress that had the **longest duration**. The `ith` keypress had a **duration** of `releaseTimes[i] - releaseTimes[i - 1]`, and the `0th` keypress had a duration of `releaseTimes[0]`.\n\nNote that the same key could have been pressed multiple times during the test, and these multiple presses of the same key **may not** have had the same **duration**.\n\n_Return the key of the keypress that had the **longest duration**. If there are multiple such keypresses, return the lexicographically largest key of the keypresses._\n\n**Example 1:**\n\n**Input:** releaseTimes = \\[9,29,49,50\\], keysPressed =  \"cbcd \"\n**Output:**  \"c \"\n**Explanation:** The keypresses were as follows:\nKeypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).\nKeypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).\nKeypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).\nKeypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).\nThe longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.\n'c' is lexicographically larger than 'b', so the answer is 'c'.\n\n**Example 2:**\n\n**Input:** releaseTimes = \\[12,23,36,46,62\\], keysPressed =  \"spuda \"\n**Output:**  \"a \"\n**Explanation:** The keypresses were as follows:\nKeypress for 's' had a duration of 12.\nKeypress for 'p' had a duration of 23 - 12 = 11.\nKeypress for 'u' had a duration of 36 - 23 = 13.\nKeypress for 'd' had a duration of 46 - 36 = 10.\nKeypress for 'a' had a duration of 62 - 46 = 16.\nThe longest of these was the keypress for 'a' with duration 16.\n\n**Constraints:**\n\n*   `releaseTimes.length == n`\n*   `keysPressed.length == n`\n*   `2 <= n <= 1000`\n*   `1 <= releaseTimes[i] <= 109`\n*   `releaseTimes[i] < releaseTimes[i+1]`\n*   `keysPressed` contains only lowercase English letters."}}
{"1636": {"title": "Sort Array by Increasing Frequency", "difficulty": "Easy", "description": "Given an array of integers `nums`, sort the array in **increasing** order based on the frequency of the values. If multiple values have the same frequency, sort them in **decreasing** order.\n\nReturn the _sorted array_.\n\n**Example 1:**\n\n**Input:** nums = \\[1,1,2,2,2,3\\]\n**Output:** \\[3,1,1,2,2,2\\]\n**Explanation:** '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.\n\n**Example 2:**\n\n**Input:** nums = \\[2,3,1,3,2\\]\n**Output:** \\[1,3,3,2,2\\]\n**Explanation:** '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.\n\n**Example 3:**\n\n**Input:** nums = \\[-1,1,-6,4,5,-6,1,4,1\\]\n**Output:** \\[5,-1,4,4,-6,-6,1,1,1\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `-100 <= nums[i] <= 100`"}}
{"1640": {"title": "Check Array Formation Through Concatenation", "difficulty": "Easy", "description": "You are given an array of **distinct** integers `arr` and an array of integer arrays `pieces`, where the integers in `pieces` are **distinct**. Your goal is to form `arr` by concatenating the arrays in `pieces` **in any order**. However, you are **not** allowed to reorder the integers in each array `pieces[i]`.\n\nReturn `true` _if it is possible_ _to form the array_ `arr` _from_ `pieces`. Otherwise, return `false`.\n\n**Example 1:**\n\n**Input:** arr = \\[15,88\\], pieces = \\[\\[88\\],\\[15\\]\\]\n**Output:** true\n**Explanation:** Concatenate \\[15\\] then \\[88\\]\n\n**Example 2:**\n\n**Input:** arr = \\[49,18,16\\], pieces = \\[\\[16,18,49\\]\\]\n**Output:** false\n**Explanation:** Even though the numbers match, we cannot reorder pieces\\[0\\].\n\n**Example 3:**\n\n**Input:** arr = \\[91,4,64,78\\], pieces = \\[\\[78\\],\\[4,64\\],\\[91\\]\\]\n**Output:** true\n**Explanation:** Concatenate \\[91\\] then \\[4,64\\] then \\[78\\]\n\n**Constraints:**\n\n*   `1 <= pieces.length <= arr.length <= 100`\n*   `sum(pieces[i].length) == arr.length`\n*   `1 <= pieces[i].length <= arr.length`\n*   `1 <= arr[i], pieces[i][j] <= 100`\n*   The integers in `arr` are **distinct**.\n*   The integers in `pieces` are **distinct** (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct)."}}
{"1646": {"title": "Get Maximum in Generated Array", "difficulty": "Easy", "description": "You are given an integer `n`. A **0-indexed** integer array `nums` of length `n + 1` is generated in the following way:\n\n*   `nums[0] = 0`\n*   `nums[1] = 1`\n*   `nums[2 * i] = nums[i]` when `2 <= 2 * i <= n`\n*   `nums[2 * i + 1] = nums[i] + nums[i + 1]` when `2 <= 2 * i + 1 <= n`\n\nReturn _the **maximum** integer in the array_ `nums`​​​.\n\n**Example 1:**\n\n**Input:** n = 7\n**Output:** 3\n**Explanation:** According to the given rules:\n  nums\\[0\\] = 0\n  nums\\[1\\] = 1\n  nums\\[(1 \\* 2) = 2\\] = nums\\[1\\] = 1\n  nums\\[(1 \\* 2) + 1 = 3\\] = nums\\[1\\] + nums\\[2\\] = 1 + 1 = 2\n  nums\\[(2 \\* 2) = 4\\] = nums\\[2\\] = 1\n  nums\\[(2 \\* 2) + 1 = 5\\] = nums\\[2\\] + nums\\[3\\] = 1 + 2 = 3\n  nums\\[(3 \\* 2) = 6\\] = nums\\[3\\] = 2\n  nums\\[(3 \\* 2) + 1 = 7\\] = nums\\[3\\] + nums\\[4\\] = 2 + 1 = 3\nHence, nums = \\[0,1,1,2,1,3,2,3\\], and the maximum is max(0,1,1,2,1,3,2,3) = 3.\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** 1\n**Explanation:** According to the given rules, nums = \\[0,1,1\\]. The maximum is max(0,1,1) = 1.\n\n**Example 3:**\n\n**Input:** n = 3\n**Output:** 2\n**Explanation:** According to the given rules, nums = \\[0,1,1,2\\]. The maximum is max(0,1,1,2) = 2.\n\n**Constraints:**\n\n*   `0 <= n <= 100`"}}
{"1652": {"title": "Defuse the Bomb", "difficulty": "Easy", "description": "You have a bomb to defuse, and your time is running out! Your informer will provide you with a **circular** array `code` of length of `n` and a key `k`.\n\nTo decrypt the code, you must replace every number. All the numbers are replaced **simultaneously**.\n\n*   If `k > 0`, replace the `ith` number with the sum of the **next** `k` numbers.\n*   If `k < 0`, replace the `ith` number with the sum of the **previous** `k` numbers.\n*   If `k == 0`, replace the `ith` number with `0`.\n\nAs `code` is circular, the next element of `code[n-1]` is `code[0]`, and the previous element of `code[0]` is `code[n-1]`.\n\nGiven the **circular** array `code` and an integer key `k`, return _the decrypted code to defuse the bomb_!\n\n**Example 1:**\n\n**Input:** code = \\[5,7,1,4\\], k = 3\n**Output:** \\[12,10,16,13\\]\n**Explanation:** Each number is replaced by the sum of the next 3 numbers. The decrypted code is \\[7+1+4, 1+4+5, 4+5+7, 5+7+1\\]. Notice that the numbers wrap around.\n\n**Example 2:**\n\n**Input:** code = \\[1,2,3,4\\], k = 0\n**Output:** \\[0,0,0,0\\]\n**Explanation:** When k is zero, the numbers are replaced by 0. \n\n**Example 3:**\n\n**Input:** code = \\[2,4,9,3\\], k = -2\n**Output:** \\[12,5,6,13\\]\n**Explanation:** The decrypted code is \\[3+9, 2+3, 4+2, 9+4\\]. Notice that the numbers wrap around again. If k is negative, the sum is of the **previous** numbers.\n\n**Constraints:**\n\n*   `n == code.length`\n*   `1 <= n <= 100`\n*   `1 <= code[i] <= 100`\n*   `-(n - 1) <= k <= n - 1`"}}
{"1656": {"title": "Design an Ordered Stream", "difficulty": "Easy", "description": "There is a stream of `n` `(idKey, value)` pairs arriving in an **arbitrary** order, where `idKey` is an integer between `1` and `n` and `value` is a string. No two pairs have the same `id`.\n\nDesign a stream that returns the values in **increasing order of their IDs** by returning a **chunk** (list) of values after each insertion. The concatenation of all the **chunks** should result in a list of the sorted values.\n\nImplement the `OrderedStream` class:\n\n*   `OrderedStream(int n)` Constructs the stream to take `n` values.\n*   `String[] insert(int idKey, String value)` Inserts the pair `(idKey, value)` into the stream, then returns the **largest possible chunk** of currently inserted values that appear next in the order.\n\n**Example:**\n\n**Input**\n\\[ \"OrderedStream \",  \"insert \",  \"insert \",  \"insert \",  \"insert \",  \"insert \"\\]\n\\[\\[5\\], \\[3,  \"ccccc \"\\], \\[1,  \"aaaaa \"\\], \\[2,  \"bbbbb \"\\], \\[5,  \"eeeee \"\\], \\[4,  \"ddddd \"\\]\\]\n**Output**\n\\[null, \\[\\], \\[ \"aaaaa \"\\], \\[ \"bbbbb \",  \"ccccc \"\\], \\[\\], \\[ \"ddddd \",  \"eeeee \"\\]\\]\n\n**Explanation**\n// Note that the values ordered by ID is \\[ \"aaaaa \",  \"bbbbb \",  \"ccccc \",  \"ddddd \",  \"eeeee \"\\].\nOrderedStream os = new OrderedStream(5);\nos.insert(3,  \"ccccc \"); // Inserts (3,  \"ccccc \"), returns \\[\\].\nos.insert(1,  \"aaaaa \"); // Inserts (1,  \"aaaaa \"), returns \\[ \"aaaaa \"\\].\nos.insert(2,  \"bbbbb \"); // Inserts (2,  \"bbbbb \"), returns \\[ \"bbbbb \",  \"ccccc \"\\].\nos.insert(5,  \"eeeee \"); // Inserts (5,  \"eeeee \"), returns \\[\\].\nos.insert(4,  \"ddddd \"); // Inserts (4,  \"ddddd \"), returns \\[ \"ddddd \",  \"eeeee \"\\].\n// Concatentating all the chunks returned:\n// \\[\\] + \\[ \"aaaaa \"\\] + \\[ \"bbbbb \",  \"ccccc \"\\] + \\[\\] + \\[ \"ddddd \",  \"eeeee \"\\] = \\[ \"aaaaa \",  \"bbbbb \",  \"ccccc \",  \"ddddd \",  \"eeeee \"\\]\n// The resulting order is the same as the order above.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`\n*   `1 <= id <= n`\n*   `value.length == 5`\n*   `value` consists only of lowercase letters.\n*   Each call to `insert` will have a unique `id.`\n*   Exactly `n` calls will be made to `insert`."}}
{"1662": {"title": "Check If Two String Arrays are Equivalent", "difficulty": "Easy", "description": "Given two string arrays `word1` and `word2`, return `true` _if the two arrays **represent** the same string, and_ `false` _otherwise._\n\nA string is **represented** by an array if the array elements concatenated **in order** forms the string.\n\n**Example 1:**\n\n**Input:** word1 = \\[ \"ab \",  \"c \"\\], word2 = \\[ \"a \",  \"bc \"\\]\n**Output:** true\n**Explanation:**\nword1 represents string  \"ab \" +  \"c \" ->  \"abc \"\nword2 represents string  \"a \" +  \"bc \" ->  \"abc \"\nThe strings are the same, so return true.\n\n**Example 2:**\n\n**Input:** word1 = \\[ \"a \",  \"cb \"\\], word2 = \\[ \"ab \",  \"c \"\\]\n**Output:** false\n\n**Example 3:**\n\n**Input:** word1  = \\[ \"abc \",  \"d \",  \"defg \"\\], word2 = \\[ \"abcddefg \"\\]\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= word1.length, word2.length <= 103`\n*   `1 <= word1[i].length, word2[i].length <= 103`\n*   `1 <= sum(word1[i].length), sum(word2[i].length) <= 103`\n*   `word1[i]` and `word2[i]` consist of lowercase letters."}}
{"1668": {"title": "Maximum Repeating Substring", "difficulty": "Easy", "description": "For a string `sequence`, a string `word` is **`k`\\-repeating** if `word` concatenated `k` times is a substring of `sequence`. The `word`'s **maximum `k`\\-repeating value** is the highest value `k` where `word` is `k`\\-repeating in `sequence`. If `word` is not a substring of `sequence`, `word`'s maximum `k`\\-repeating value is `0`.\n\nGiven strings `sequence` and `word`, return _the **maximum `k`\\-repeating value** of `word` in `sequence`_.\n\n**Example 1:**\n\n**Input:** sequence =  \"ababc \", word =  \"ab \"\n**Output:** 2\n**Explanation: ** \"abab \" is a substring in  \"ababc \".\n\n**Example 2:**\n\n**Input:** sequence =  \"ababc \", word =  \"ba \"\n**Output:** 1\n**Explanation: ** \"ba \" is a substring in  \"ababc \".  \"baba \" is not a substring in  \"ababc \".\n\n**Example 3:**\n\n**Input:** sequence =  \"ababc \", word =  \"ac \"\n**Output:** 0\n**Explanation: ** \"ac \" is not a substring in  \"ababc \". \n\n**Constraints:**\n\n*   `1 <= sequence.length <= 100`\n*   `1 <= word.length <= 100`\n*   `sequence` and `word` contains only lowercase English letters."}}
{"1672": {"title": "Richest Customer Wealth", "difficulty": "Easy", "description": "You are given an `m x n` integer grid `accounts` where `accounts[i][j]` is the amount of money the `i​​​​​​​​​​​th​​​​` customer has in the `j​​​​​​​​​​​th`​​​​ bank. Return _the **wealth** that the richest customer has._\n\nA customer's **wealth** is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum **wealth**.\n\n**Example 1:**\n\n**Input:** accounts = \\[\\[1,2,3\\],\\[3,2,1\\]\\]\n**Output:** 6\n**Explanation****:**\n`1st customer has wealth = 1 + 2 + 3 = 6`\n`2nd customer has wealth = 3 + 2 + 1 = 6`\nBoth customers are considered the richest with a wealth of 6 each, so return 6.\n\n**Example 2:**\n\n**Input:** accounts = \\[\\[1,5\\],\\[7,3\\],\\[3,5\\]\\]\n**Output:** 10\n**Explanation**: \n1st customer has wealth = 6\n2nd customer has wealth = 10 \n3rd customer has wealth = 8\nThe 2nd customer is the richest with a wealth of 10.\n\n**Example 3:**\n\n**Input:** accounts = \\[\\[2,8,7\\],\\[7,1,3\\],\\[1,9,5\\]\\]\n**Output:** 17\n\n**Constraints:**\n\n*   `m == accounts.length`\n*   `n == accounts[i].length`\n*   `1 <= m, n <= 50`\n*   `1 <= accounts[i][j] <= 100`"}}
{"1678": {"title": "Goal Parser Interpretation", "difficulty": "Easy", "description": "You own a **Goal Parser** that can interpret a string `command`. The `command` consists of an alphabet of `\"G \"`, `\"() \"` and/or `\"(al) \"` in some order. The Goal Parser will interpret `\"G \"` as the string `\"G \"`, `\"() \"` as the string `\"o \"`, and `\"(al) \"` as the string `\"al \"`. The interpreted strings are then concatenated in the original order.\n\nGiven the string `command`, return _the **Goal Parser**'s interpretation of_ `command`.\n\n**Example 1:**\n\n**Input:** command =  \"G()(al) \"\n**Output:**  \"Goal \"\n**Explanation:** The Goal Parser interprets the command as follows:\nG -> G\n() -> o\n(al) -> al\nThe final concatenated result is  \"Goal \".\n\n**Example 2:**\n\n**Input:** command =  \"G()()()()(al) \"\n**Output:**  \"Gooooal \"\n\n**Example 3:**\n\n**Input:** command =  \"(al)G(al)()()G \"\n**Output:**  \"alGalooG \"\n\n**Constraints:**\n\n*   `1 <= command.length <= 100`\n*   `command` consists of `\"G \"`, `\"() \"`, and/or `\"(al) \"` in some order."}}
{"1684": {"title": "Count the Number of Consistent Strings", "difficulty": "Easy", "description": "You are given a string `allowed` consisting of **distinct** characters and an array of strings `words`. A string is **consistent** if all characters in the string appear in the string `allowed`.\n\nReturn _the number of **consistent** strings in the array_ `words`.\n\n**Example 1:**\n\n**Input:** allowed =  \"ab \", words = \\[ \"ad \", \"bd \", \"aaab \", \"baa \", \"badab \"\\]\n**Output:** 2\n**Explanation:** Strings  \"aaab \" and  \"baa \" are consistent since they only contain characters 'a' and 'b'.\n\n**Example 2:**\n\n**Input:** allowed =  \"abc \", words = \\[ \"a \", \"b \", \"c \", \"ab \", \"ac \", \"bc \", \"abc \"\\]\n**Output:** 7\n**Explanation:** All strings are consistent.\n\n**Example 3:**\n\n**Input:** allowed =  \"cad \", words = \\[ \"cc \", \"acd \", \"b \", \"ba \", \"bac \", \"bad \", \"ac \", \"d \"\\]\n**Output:** 4\n**Explanation:** Strings  \"cc \",  \"acd \",  \"ac \", and  \"d \" are consistent.\n\n**Constraints:**\n\n*   `1 <= words.length <= 104`\n*   `1 <= allowed.length <= 26`\n*   `1 <= words[i].length <= 10`\n*   The characters in `allowed` are **distinct**.\n*   `words[i]` and `allowed` contain only lowercase English letters."}}
{"1688": {"title": "Count of Matches in Tournament", "difficulty": "Easy", "description": "You are given an integer `n`, the number of teams in a tournament that has strange rules:\n\n*   If the current number of teams is **even**, each team gets paired with another team. A total of `n / 2` matches are played, and `n / 2` teams advance to the next round.\n*   If the current number of teams is **odd**, one team randomly advances in the tournament, and the rest gets paired. A total of `(n - 1) / 2` matches are played, and `(n - 1) / 2 + 1` teams advance to the next round.\n\nReturn _the number of matches played in the tournament until a winner is decided._\n\n**Example 1:**\n\n**Input:** n = 7\n**Output:** 6\n**Explanation:** Details of the tournament: \n- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 3 + 2 + 1 = 6.\n\n**Example 2:**\n\n**Input:** n = 14\n**Output:** 13\n**Explanation:** Details of the tournament:\n- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.\n- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 7 + 3 + 2 + 1 = 13.\n\n**Constraints:**\n\n*   `1 <= n <= 200`"}}
{"1694": {"title": "Reformat Phone Number", "difficulty": "Easy", "description": "You are given a phone number as a string `number`. `number` consists of digits, spaces `' '`, and/or dashes `'-'`.\n\nYou would like to reformat the phone number in a certain manner. Firstly, **remove** all spaces and dashes. Then, **group** the digits from left to right into blocks of length 3 **until** there are 4 or fewer digits. The final digits are then grouped as follows:\n\n*   2 digits: A single block of length 2.\n*   3 digits: A single block of length 3.\n*   4 digits: Two blocks of length 2 each.\n\nThe blocks are then joined by dashes. Notice that the reformatting process should **never** produce any blocks of length 1 and produce **at most** two blocks of length 2.\n\nReturn _the phone number after formatting._\n\n**Example 1:**\n\n**Input:** number =  \"1-23-45 6 \"\n**Output:**  \"123-456 \"\n**Explanation:** The digits are  \"123456 \".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is  \"123 \".\nStep 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is  \"456 \".\nJoining the blocks gives  \"123-456 \".\n\n**Example 2:**\n\n**Input:** number =  \"123 4-567 \"\n**Output:**  \"123-45-67 \"\n**Explanation:** The digits are  \"1234567 \".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is  \"123 \".\nStep 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are  \"45 \" and  \"67 \".\nJoining the blocks gives  \"123-45-67 \".\n\n**Example 3:**\n\n**Input:** number =  \"123 4-5678 \"\n**Output:**  \"123-456-78 \"\n**Explanation:** The digits are  \"12345678 \".\nStep 1: The 1st block is  \"123 \".\nStep 2: The 2nd block is  \"456 \".\nStep 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is  \"78 \".\nJoining the blocks gives  \"123-456-78 \".\n\n**Constraints:**\n\n*   `2 <= number.length <= 100`\n*   `number` consists of digits and the characters `'-'` and `' '`.\n*   There are at least **two** digits in `number`."}}
{"1700": {"title": "Number of Students Unable to Eat Lunch", "difficulty": "Easy", "description": "The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers `0` and `1` respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.\n\nThe number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a **stack**. At each step:\n\n*   If the student at the front of the queue **prefers** the sandwich on the top of the stack, they will **take it** and leave the queue.\n*   Otherwise, they will **leave it** and go to the queue's end.\n\nThis continues until none of the queue students want to take the top sandwich and are thus unable to eat.\n\nYou are given two integer arrays `students` and `sandwiches` where `sandwiches[i]` is the type of the `i​​​​​​th` sandwich in the stack (`i = 0` is the top of the stack) and `students[j]` is the preference of the `j​​​​​​th` student in the initial queue (`j = 0` is the front of the queue). Return _the number of students that are unable to eat._\n\n**Example 1:**\n\n**Input:** students = \\[1,1,0,0\\], sandwiches = \\[0,1,0,1\\]\n**Output:** 0 \n**Explanation:**\n- Front student leaves the top sandwich and returns to the end of the line making students = \\[1,0,0,1\\].\n- Front student leaves the top sandwich and returns to the end of the line making students = \\[0,0,1,1\\].\n- Front student takes the top sandwich and leaves the line making students = \\[0,1,1\\] and sandwiches = \\[1,0,1\\].\n- Front student leaves the top sandwich and returns to the end of the line making students = \\[1,1,0\\].\n- Front student takes the top sandwich and leaves the line making students = \\[1,0\\] and sandwiches = \\[0,1\\].\n- Front student leaves the top sandwich and returns to the end of the line making students = \\[0,1\\].\n- Front student takes the top sandwich and leaves the line making students = \\[1\\] and sandwiches = \\[1\\].\n- Front student takes the top sandwich and leaves the line making students = \\[\\] and sandwiches = \\[\\].\nHence all students are able to eat.\n\n**Example 2:**\n\n**Input:** students = \\[1,1,1,0,0,1\\], sandwiches = \\[1,0,0,0,1,1\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= students.length, sandwiches.length <= 100`\n*   `students.length == sandwiches.length`\n*   `sandwiches[i]` is `0` or `1`.\n*   `students[i]` is `0` or `1`."}}
{"1704": {"title": "Determine if String Halves Are Alike", "difficulty": "Easy", "description": "You are given a string `s` of even length. Split this string into two halves of equal lengths, and let `a` be the first half and `b` be the second half.\n\nTwo strings are **alike** if they have the same number of vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`, `'A'`, `'E'`, `'I'`, `'O'`, `'U'`). Notice that `s` contains uppercase and lowercase letters.\n\nReturn `true` _if_ `a` _and_ `b` _are **alike**_. Otherwise, return `false`.\n\n**Example 1:**\n\n**Input:** s =  \"book \"\n**Output:** true\n**Explanation:** a =  \"bo \" and b =  \"ok \". a has 1 vowel and b has 1 vowel. Therefore, they are alike.\n\n**Example 2:**\n\n**Input:** s =  \"textbook \"\n**Output:** false\n**Explanation:** a =  \"text \" and b =  \"book \". a has 1 vowel whereas b has 2. Therefore, they are not alike.\nNotice that the vowel o is counted twice.\n\n**Constraints:**\n\n*   `2 <= s.length <= 1000`\n*   `s.length` is even.\n*   `s` consists of **uppercase and lowercase** letters."}}
{"1708": {"title": "Largest Subarray Length K", "difficulty": "Easy", "description": "An array `A` is larger than some array `B` if for the first index `i` where `A[i] != B[i]`, `A[i] > B[i]`.\n\nFor example, consider `0`\\-indexing:\n\n*   `[1,3,2,4] > [1,2,2,4]`, since at index `1`, `3 > 2`.\n*   `[1,4,4,4] < [2,1,1,1]`, since at index `0`, `1 < 2`.\n\nA subarray is a contiguous subsequence of the array.\n\nGiven an integer array `nums` of **distinct** integers, return the **largest** subarray of `nums` of length `k`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,4,5,2,3\\], k = 3\n**Output:** \\[5,2,3\\]\n**Explanation:** The subarrays of size 3 are: \\[1,4,5\\], \\[4,5,2\\], and \\[5,2,3\\].\nOf these, \\[5,2,3\\] is the largest.\n\n**Example 2:**\n\n**Input:** nums = \\[1,4,5,2,3\\], k = 4\n**Output:** \\[4,5,2,3\\]\n**Explanation:** The subarrays of size 4 are: \\[1,4,5,2\\], and \\[4,5,2,3\\].\nOf these, \\[4,5,2,3\\] is the largest.\n\n**Example 3:**\n\n**Input:** nums = \\[1,4,5,2,3\\], k = 1\n**Output:** \\[5\\]\n\n**Constraints:**\n\n*   `1 <= k <= nums.length <= 105`\n*   `1 <= nums[i] <= 109`\n*   All the integers of `nums` are **unique**.\n\n**Follow up:** What if the integers in `nums` are not distinct?"}}
{"1710": {"title": "Maximum Units on a Truck", "difficulty": "Easy", "description": "You are assigned to put some amount of boxes onto **one truck**. You are given a 2D array `boxTypes`, where `boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]`:\n\n*   `numberOfBoxesi` is the number of boxes of type `i`.\n*   `numberOfUnitsPerBoxi` is the number of units in each box of the type `i`.\n\nYou are also given an integer `truckSize`, which is the **maximum** number of **boxes** that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed `truckSize`.\n\nReturn _the **maximum** total number of **units** that can be put on the truck._\n\n**Example 1:**\n\n**Input:** boxTypes = \\[\\[1,3\\],\\[2,2\\],\\[3,1\\]\\], truckSize = 4\n**Output:** 8\n**Explanation:** There are:\n- 1 box of the first type that contains 3 units.\n- 2 boxes of the second type that contain 2 units each.\n- 3 boxes of the third type that contain 1 unit each.\nYou can take all the boxes of the first and second types, and one box of the third type.\nThe total number of units will be = (1 \\* 3) + (2 \\* 2) + (1 \\* 1) = 8.\n\n**Example 2:**\n\n**Input:** boxTypes = \\[\\[5,10\\],\\[2,5\\],\\[4,7\\],\\[3,9\\]\\], truckSize = 10\n**Output:** 91\n\n**Constraints:**\n\n*   `1 <= boxTypes.length <= 1000`\n*   `1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000`\n*   `1 <= truckSize <= 106`"}}
{"1716": {"title": "Calculate Money in Leetcode Bank", "difficulty": "Easy", "description": "Hercy wants to save money for his first car. He puts money in the Leetcode bank **every day**.\n\nHe starts by putting in `$1` on Monday, the first day. Every day from Tuesday to Sunday, he will put in `$1` more than the day before. On every subsequent Monday, he will put in `$1` more than the **previous Monday**.\n\nGiven `n`, return _the total amount of money he will have in the Leetcode bank at the end of the_ `nth` _day._\n\n**Example 1:**\n\n**Input:** n = 4\n**Output:** 10\n**Explanation:** After the 4th day, the total is 1 + 2 + 3 + 4 = 10.\n\n**Example 2:**\n\n**Input:** n = 10\n**Output:** 37\n**Explanation:** After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2.\n\n**Example 3:**\n\n**Input:** n = 20\n**Output:** 96\n**Explanation:** After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`"}}
{"1720": {"title": "Decode XORed Array", "difficulty": "Easy", "description": "There is a **hidden** integer array `arr` that consists of `n` non-negative integers.\n\nIt was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = arr[i] XOR arr[i + 1]`. For example, if `arr = [1,0,2,1]`, then `encoded = [1,2,3]`.\n\nYou are given the `encoded` array. You are also given an integer `first`, that is the first element of `arr`, i.e. `arr[0]`.\n\nReturn _the original array_ `arr`. It can be proved that the answer exists and is unique.\n\n**Example 1:**\n\n**Input:** encoded = \\[1,2,3\\], first = 1\n**Output:** \\[1,0,2,1\\]\n**Explanation:** If arr = \\[1,0,2,1\\], then first = 1 and encoded = \\[1 XOR 0, 0 XOR 2, 2 XOR 1\\] = \\[1,2,3\\]\n\n**Example 2:**\n\n**Input:** encoded = \\[6,2,7,3\\], first = 4\n**Output:** \\[4,2,0,7,4\\]\n\n**Constraints:**\n\n*   `2 <= n <= 104`\n*   `encoded.length == n - 1`\n*   `0 <= encoded[i] <= 105`\n*   `0 <= first <= 105`"}}
{"1725": {"title": "Number Of Rectangles That Can Form The Largest Square", "difficulty": "Easy", "description": "You are given an array `rectangles` where `rectangles[i] = [li, wi]` represents the `ith` rectangle of length `li` and width `wi`.\n\nYou can cut the `ith` rectangle to form a square with a side length of `k` if both `k <= li` and `k <= wi`. For example, if you have a rectangle `[4,6]`, you can cut it to get a square with a side length of at most `4`.\n\nLet `maxLen` be the side length of the **largest** square you can obtain from any of the given rectangles.\n\nReturn _the **number** of rectangles that can make a square with a side length of_ `maxLen`.\n\n**Example 1:**\n\n**Input:** rectangles = \\[\\[5,8\\],\\[3,9\\],\\[5,12\\],\\[16,5\\]\\]\n**Output:** 3\n**Explanation:** The largest squares you can get from each rectangle are of lengths \\[5,3,5,5\\].\nThe largest possible square is of length 5, and you can get it out of 3 rectangles.\n\n**Example 2:**\n\n**Input:** rectangles = \\[\\[2,3\\],\\[3,7\\],\\[4,3\\],\\[3,7\\]\\]\n**Output:** 3\n\n**Constraints:**\n\n*   `1 <= rectangles.length <= 1000`\n*   `rectangles[i].length == 2`\n*   `1 <= li, wi <= 109`\n*   `li != wi`"}}
{"1732": {"title": "Find the Highest Altitude", "difficulty": "Easy", "description": "There is a biker going on a road trip. The road trip consists of `n + 1` points at different altitudes. The biker starts his trip on point `0` with altitude equal `0`.\n\nYou are given an integer array `gain` of length `n` where `gain[i]` is the **net gain in altitude** between points `i`​​​​​​ and `i + 1` for all (`0 <= i < n)`. Return _the **highest altitude** of a point._\n\n**Example 1:**\n\n**Input:** gain = \\[-5,1,5,0,-7\\]\n**Output:** 1\n**Explanation:** The altitudes are \\[0,-5,-4,1,1,-6\\]. The highest is 1.\n\n**Example 2:**\n\n**Input:** gain = \\[-4,-3,-2,-1,4,3,2\\]\n**Output:** 0\n**Explanation:** The altitudes are \\[0,-4,-7,-9,-10,-6,-3,-1\\]. The highest is 0.\n\n**Constraints:**\n\n*   `n == gain.length`\n*   `1 <= n <= 100`\n*   `-100 <= gain[i] <= 100`"}}
{"1736": {"title": "Latest Time by Replacing Hidden Digits", "difficulty": "Easy", "description": "You are given a string `time` in the form of `hh:mm`, where some of the digits in the string are hidden (represented by `?`).\n\nThe valid times are those inclusively between `00:00` and `23:59`.\n\nReturn _the latest valid time you can get from_ `time` _by replacing the hidden_ _digits_.\n\n**Example 1:**\n\n**Input:** time =  \"2?:?0 \"\n**Output:**  \"23:50 \"\n**Explanation:** The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50.\n\n**Example 2:**\n\n**Input:** time =  \"0?:3? \"\n**Output:**  \"09:39 \"\n\n**Example 3:**\n\n**Input:** time =  \"1?:22 \"\n**Output:**  \"19:22 \"\n\n**Constraints:**\n\n*   `time` is in the format `hh:mm`.\n*   It is guaranteed that you can produce a valid time from the given string."}}
{"1742": {"title": "Maximum Number of Balls in a Box", "difficulty": "Easy", "description": "You are working in a ball factory where you have `n` balls numbered from `lowLimit` up to `highLimit` **inclusive** (i.e., `n == highLimit - lowLimit + 1`), and an infinite number of boxes numbered from `1` to `infinity`.\n\nYour job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number `321` will be put in the box number `3 + 2 + 1 = 6` and the ball number `10` will be put in the box number `1 + 0 = 1`.\n\nGiven two integers `lowLimit` and `highLimit`, return _the number of balls in the box with the most balls._\n\n**Example 1:**\n\n**Input:** lowLimit = 1, highLimit = 10\n**Output:** 2\n**Explanation:**\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  2 1 1 1 1 1 1 1 1 0  0  ...\nBox 1 has the most number of balls with 2 balls.\n\n**Example 2:**\n\n**Input:** lowLimit = 5, highLimit = 15\n**Output:** 2\n**Explanation:**\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count:  1 1 1 1 2 2 1 1 1 0  0  ...\nBoxes 5 and 6 have the most number of balls with 2 balls in each.\n\n**Example 3:**\n\n**Input:** lowLimit = 19, highLimit = 28\n**Output:** 2\n**Explanation:**\nBox Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...\nBall Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...\nBox 10 has the most number of balls with 2 balls.\n\n**Constraints:**\n\n*   `1 <= lowLimit <= highLimit <= 105`"}}
{"1748": {"title": "Sum of Unique Elements", "difficulty": "Easy", "description": "You are given an integer array `nums`. The unique elements of an array are the elements that appear **exactly once** in the array.\n\nReturn _the **sum** of all the unique elements of_ `nums`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,3,2\\]\n**Output:** 4\n**Explanation:** The unique elements are \\[1,3\\], and the sum is 4.\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1,1,1\\]\n**Output:** 0\n**Explanation:** There are no unique elements, and the sum is 0.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3,4,5\\]\n**Output:** 15\n**Explanation:** The unique elements are \\[1,2,3,4,5\\], and the sum is 15.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 100`"}}
{"1752": {"title": "Check if Array Is Sorted and Rotated", "difficulty": "Easy", "description": "Given an array `nums`, return `true` _if the array was originally sorted in non-decreasing order, then rotated **some** number of positions (including zero)_. Otherwise, return `false`.\n\nThere may be **duplicates** in the original array.\n\n**Note:** An array `A` rotated by `x` positions results in an array `B` of the same length such that `A[i] == B[(i+x) % A.length]`, where `%` is the modulo operation.\n\n**Example 1:**\n\n**Input:** nums = \\[3,4,5,1,2\\]\n**Output:** true\n**Explanation:** \\[1,2,3,4,5\\] is the original sorted array.\nYou can rotate the array by x = 3 positions to begin on the the element of value 3: \\[3,4,5,1,2\\].\n\n**Example 2:**\n\n**Input:** nums = \\[2,1,3,4\\]\n**Output:** false\n**Explanation:** There is no sorted array once rotated that can make nums.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3\\]\n**Output:** true\n**Explanation:** \\[1,2,3\\] is the original sorted array.\nYou can rotate the array by x = 0 positions (i.e. no rotation) to make nums.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 100`"}}
{"1758": {"title": "Minimum Changes To Make Alternating Binary String", "difficulty": "Easy", "description": "You are given a string `s` consisting only of the characters `'0'` and `'1'`. In one operation, you can change any `'0'` to `'1'` or vice versa.\n\nThe string is called alternating if no two adjacent characters are equal. For example, the string `\"010 \"` is alternating, while the string `\"0100 \"` is not.\n\nReturn _the **minimum** number of operations needed to make_ `s` _alternating_.\n\n**Example 1:**\n\n**Input:** s =  \"0100 \"\n**Output:** 1\n**Explanation:** If you change the last character to '1', s will be  \"0101 \", which is alternating.\n\n**Example 2:**\n\n**Input:** s =  \"10 \"\n**Output:** 0\n**Explanation:** s is already alternating.\n\n**Example 3:**\n\n**Input:** s =  \"1111 \"\n**Output:** 2\n**Explanation:** You need two operations to reach  \"0101 \" or  \"1010 \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s[i]` is either `'0'` or `'1'`."}}
{"1763": {"title": "Longest Nice Substring", "difficulty": "Easy", "description": "A string `s` is **nice** if, for every letter of the alphabet that `s` contains, it appears **both** in uppercase and lowercase. For example, `\"abABB \"` is nice because `'A'` and `'a'` appear, and `'B'` and `'b'` appear. However, `\"abA \"` is not because `'b'` appears, but `'B'` does not.\n\nGiven a string `s`, return _the longest **substring** of `s` that is **nice**. If there are multiple, return the substring of the **earliest** occurrence. If there are none, return an empty string_.\n\n**Example 1:**\n\n**Input:** s =  \"YazaAay \"\n**Output:**  \"aAa \"\n**Explanation: ** \"aAa \" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.\n \"aAa \" is the longest nice substring.\n\n**Example 2:**\n\n**Input:** s =  \"Bb \"\n**Output:**  \"Bb \"\n**Explanation:**  \"Bb \" is a nice string because both 'B' and 'b' appear. The whole string is a substring.\n\n**Example 3:**\n\n**Input:** s =  \"c \"\n**Output:**  \" \"\n**Explanation:** There are no nice substrings.\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists of uppercase and lowercase English letters."}}
{"1768": {"title": "Merge Strings Alternately", "difficulty": "Easy", "description": "You are given two strings `word1` and `word2`. Merge the strings by adding letters in alternating order, starting with `word1`. If a string is longer than the other, append the additional letters onto the end of the merged string.\n\nReturn _the merged string._\n\n**Example 1:**\n\n**Input:** word1 =  \"abc \", word2 =  \"pqr \"\n**Output:**  \"apbqcr \"\n**Explanation:** The merged string will be merged as so:\nword1:  a   b   c\nword2:    p   q   r\nmerged: a p b q c r\n\n**Example 2:**\n\n**Input:** word1 =  \"ab \", word2 =  \"pqrs \"\n**Output:**  \"apbqrs \"\n**Explanation:** Notice that as word2 is longer,  \"rs \" is appended to the end.\nword1:  a   b \nword2:    p   q   r   s\nmerged: a p b q   r   s\n\n**Example 3:**\n\n**Input:** word1 =  \"abcd \", word2 =  \"pq \"\n**Output:**  \"apbqcd \"\n**Explanation:** Notice that as word1 is longer,  \"cd \" is appended to the end.\nword1:  a   b   c   d\nword2:    p   q \nmerged: a p b q c   d\n\n**Constraints:**\n\n*   `1 <= word1.length, word2.length <= 100`\n*   `word1` and `word2` consist of lowercase English letters."}}
{"1773": {"title": "Count Items Matching a Rule", "difficulty": "Easy", "description": "You are given an array `items`, where each `items[i] = [typei, colori, namei]` describes the type, color, and name of the `ith` item. You are also given a rule represented by two strings, `ruleKey` and `ruleValue`.\n\nThe `ith` item is said to match the rule if **one** of the following is true:\n\n*   `ruleKey == \"type \"` and `ruleValue == typei`.\n*   `ruleKey == \"color \"` and `ruleValue == colori`.\n*   `ruleKey == \"name \"` and `ruleValue == namei`.\n\nReturn _the number of items that match the given rule_.\n\n**Example 1:**\n\n**Input:** items = \\[\\[ \"phone \", \"blue \", \"pixel \"\\],\\[ \"computer \", \"silver \", \"lenovo \"\\],\\[ \"phone \", \"gold \", \"iphone \"\\]\\], ruleKey =  \"color \", ruleValue =  \"silver \"\n**Output:** 1\n**Explanation:** There is only one item matching the given rule, which is \\[ \"computer \", \"silver \", \"lenovo \"\\].\n\n**Example 2:**\n\n**Input:** items = \\[\\[ \"phone \", \"blue \", \"pixel \"\\],\\[ \"computer \", \"silver \", \"phone \"\\],\\[ \"phone \", \"gold \", \"iphone \"\\]\\], ruleKey =  \"type \", ruleValue =  \"phone \"\n**Output:** 2\n**Explanation:** There are only two items matching the given rule, which are \\[ \"phone \", \"blue \", \"pixel \"\\] and \\[ \"phone \", \"gold \", \"iphone \"\\]. Note that the item \\[ \"computer \", \"silver \", \"phone \"\\] does not match.\n\n**Constraints:**\n\n*   `1 <= items.length <= 104`\n*   `1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10`\n*   `ruleKey` is equal to either `\"type \"`, `\"color \"`, or `\"name \"`.\n*   All strings consist only of lowercase letters."}}
{"1779": {"title": "Find Nearest Point That Has the Same X or Y Coordinate", "difficulty": "Easy", "description": "You are given two integers, `x` and `y`, which represent your current location on a Cartesian grid: `(x, y)`. You are also given an array `points` where each `points[i] = [ai, bi]` represents that a point exists at `(ai, bi)`. A point is **valid** if it shares the same x-coordinate or the same y-coordinate as your location.\n\nReturn _the index **(0-indexed)** of the **valid** point with the smallest **Manhattan distance** from your current location_. If there are multiple, return _the valid point with the **smallest** index_. If there are no valid points, return `-1`.\n\nThe **Manhattan distance** between two points `(x1, y1)` and `(x2, y2)` is `abs(x1 - x2) + abs(y1 - y2)`.\n\n**Example 1:**\n\n**Input:** x = 3, y = 4, points = \\[\\[1,2\\],\\[3,1\\],\\[2,4\\],\\[2,3\\],\\[4,4\\]\\]\n**Output:** 2\n**Explanation:** Of all the points, only \\[3,1\\], \\[2,4\\] and \\[4,4\\] are valid. Of the valid points, \\[2,4\\] and \\[4,4\\] have the smallest Manhattan distance from your current location, with a distance of 1. \\[2,4\\] has the smallest index, so return 2.\n\n**Example 2:**\n\n**Input:** x = 3, y = 4, points = \\[\\[3,4\\]\\]\n**Output:** 0\n**Explanation:** The answer is allowed to be on the same location as your current location.\n\n**Example 3:**\n\n**Input:** x = 3, y = 4, points = \\[\\[2,3\\]\\]\n**Output:** -1\n**Explanation:** There are no valid points.\n\n**Constraints:**\n\n*   `1 <= points.length <= 104`\n*   `points[i].length == 2`\n*   `1 <= x, y, ai, bi <= 104`"}}
{"1784": {"title": "Check if Binary String Has at Most One Segment of Ones", "difficulty": "Easy", "description": "Given a binary string `s` **​​​​​without leading zeros**, return `true`​​​ _if_ `s` _contains **at most one contiguous segment of ones**_. Otherwise, return `false`.\n\n**Example 1:**\n\n**Input:** s =  \"1001 \"\n**Output:** false\n**Explanation:** The ones do not form a contiguous segment.\n\n**Example 2:**\n\n**Input:** s =  \"110 \"\n**Output:** true\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s[i]`​​​​ is either `'0'` or `'1'`.\n*   `s[0]` is `'1'`."}}
{"1790": {"title": "Check if One String Swap Can Make Strings Equal", "difficulty": "Easy", "description": "You are given two strings `s1` and `s2` of equal length. A **string swap** is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.\n\nReturn `true` _if it is possible to make both strings equal by performing **at most one string swap** on **exactly one** of the strings._ Otherwise, return `false`.\n\n**Example 1:**\n\n**Input:** s1 =  \"bank \", s2 =  \"kanb \"\n**Output:** true\n**Explanation:** For example, swap the first character with the last character of s2 to make  \"bank \".\n\n**Example 2:**\n\n**Input:** s1 =  \"attack \", s2 =  \"defend \"\n**Output:** false\n**Explanation:** It is impossible to make them equal with one string swap.\n\n**Example 3:**\n\n**Input:** s1 =  \"kelb \", s2 =  \"kelb \"\n**Output:** true\n**Explanation:** The two strings are already equal, so no string swap operation is required.\n\n**Constraints:**\n\n*   `1 <= s1.length, s2.length <= 100`\n*   `s1.length == s2.length`\n*   `s1` and `s2` consist of only lowercase English letters."}}
{"1791": {"title": "Find Center of Star Graph", "difficulty": "Easy", "description": "There is an undirected **star** graph consisting of `n` nodes labeled from `1` to `n`. A star graph is a graph where there is one **center** node and **exactly** `n - 1` edges that connect the center node with every other node.\n\nYou are given a 2D integer array `edges` where each `edges[i] = [ui, vi]` indicates that there is an edge between the nodes `ui` and `vi`. Return the center of the given star graph.\n\n**Example 1:**\n\n**Input:** edges = \\[\\[1,2\\],\\[2,3\\],\\[4,2\\]\\]\n**Output:** 2\n**Explanation:** As shown in the figure above, node 2 is connected to every other node, so 2 is the center.\n\n**Example 2:**\n\n**Input:** edges = \\[\\[1,2\\],\\[5,1\\],\\[1,3\\],\\[1,4\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `3 <= n <= 105`\n*   `edges.length == n - 1`\n*   `edges[i].length == 2`\n*   `1 <= ui, vi <= n`\n*   `ui != vi`\n*   The given `edges` represent a valid star graph."}}
{"1796": {"title": "Second Largest Digit in a String", "difficulty": "Easy", "description": "Given an alphanumeric string `s`, return _the **second largest** numerical digit that appears in_ `s`_, or_ `-1` _if it does not exist_.\n\nAn **alphanumeric** string is a string consisting of lowercase English letters and digits.\n\n**Example 1:**\n\n**Input:** s =  \"dfa12321afd \"\n**Output:** 2\n**Explanation:** The digits that appear in s are \\[1, 2, 3\\]. The second largest digit is 2.\n\n**Example 2:**\n\n**Input:** s =  \"abc1111 \"\n**Output:** -1\n**Explanation:** The digits that appear in s are \\[1\\]. There is no second largest digit. \n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `s` consists of only lowercase English letters and/or digits."}}
{"1800": {"title": "Maximum Ascending Subarray Sum", "difficulty": "Easy", "description": "Given an array of positive integers `nums`, return the _maximum possible sum of an **ascending** subarray in_ `nums`.\n\nA subarray is defined as a contiguous sequence of numbers in an array.\n\nA subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is **ascending** if for all `i` where `l <= i < r`, `numsi < numsi+1`. Note that a subarray of size `1` is **ascending**.\n\n**Example 1:**\n\n**Input:** nums = \\[10,20,30,5,10,50\\]\n**Output:** 65\n**Explanation:** \\[5,10,50\\] is the ascending subarray with the maximum sum of 65.\n\n**Example 2:**\n\n**Input:** nums = \\[10,20,30,40,50\\]\n**Output:** 150\n**Explanation:** \\[10,20,30,40,50\\] is the ascending subarray with the maximum sum of 150.\n\n**Example 3:**\n\n**Input:** nums = \\[12,17,15,13,10,11,12\\]\n**Output:** 33\n**Explanation:** \\[10,11,12\\] is the ascending subarray with the maximum sum of 33.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 100`"}}
{"1805": {"title": "Number of Different Integers in a String", "difficulty": "Easy", "description": "You are given a string `word` that consists of digits and lowercase English letters.\n\nYou will replace every non-digit character with a space. For example, `\"a123bc34d8ef34 \"` will become `\" 123 34 8 34 \"`. Notice that you are left with some integers that are separated by at least one space: `\"123 \"`, `\"34 \"`, `\"8 \"`, and `\"34 \"`.\n\nReturn _the number of **different** integers after performing the replacement operations on_ `word`.\n\nTwo integers are considered different if their decimal representations **without any leading zeros** are different.\n\n**Example 1:**\n\n**Input:** word =  \"a123bc34d8ef34 \"\n**Output:** 3\n**Explanation:** The three different integers are  \"123 \",  \"34 \", and  \"8 \". Notice that  \"34 \" is only counted once.\n\n**Example 2:**\n\n**Input:** word =  \"leet1234code234 \"\n**Output:** 2\n\n**Example 3:**\n\n**Input:** word =  \"a1b01c001 \"\n**Output:** 1\n**Explanation:** The three integers  \"1 \",  \"01 \", and  \"001 \" all represent the same integer because\nthe leading zeros are ignored when comparing their decimal values.\n\n**Constraints:**\n\n*   `1 <= word.length <= 1000`\n*   `word` consists of digits and lowercase English letters."}}
{"1812": {"title": "Determine Color of a Chessboard Square", "difficulty": "Easy", "description": "You are given `coordinates`, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.\n\nReturn `true` _if the square is white, and_ `false` _if the square is black_.\n\nThe coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.\n\n**Example 1:**\n\n**Input:** coordinates =  \"a1 \"\n**Output:** false\n**Explanation:** From the chessboard above, the square with coordinates  \"a1 \" is black, so return false.\n\n**Example 2:**\n\n**Input:** coordinates =  \"h3 \"\n**Output:** true\n**Explanation:** From the chessboard above, the square with coordinates  \"h3 \" is white, so return true.\n\n**Example 3:**\n\n**Input:** coordinates =  \"c7 \"\n**Output:** false\n\n**Constraints:**\n\n*   `coordinates.length == 2`\n*   `'a' <= coordinates[0] <= 'h'`\n*   `'1' <= coordinates[1] <= '8'`"}}
{"1816": {"title": "Truncate Sentence", "difficulty": "Easy", "description": "A **sentence** is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of **only** uppercase and lowercase English letters (no punctuation).\n\n*   For example, `\"Hello World \"`, `\"HELLO \"`, and `\"hello world hello world \"` are all sentences.\n\nYou are given a sentence `s`​​​​​​ and an integer `k`​​​​​​. You want to **truncate** `s`​​​​​​ such that it contains only the **first** `k`​​​​​​ words. Return `s`​​​​_​​ after **truncating** it._\n\n**Example 1:**\n\n**Input:** s =  \"Hello how are you Contestant \", k = 4\n**Output:**  \"Hello how are you \"\n**Explanation:**\nThe words in s are \\[ \"Hello \",  \"how \"  \"are \",  \"you \",  \"Contestant \"\\].\nThe first 4 words are \\[ \"Hello \",  \"how \",  \"are \",  \"you \"\\].\nHence, you should return  \"Hello how are you \".\n\n**Example 2:**\n\n**Input:** s =  \"What is the solution to this problem \", k = 4\n**Output:**  \"What is the solution \"\n**Explanation:**\nThe words in s are \\[ \"What \",  \"is \"  \"the \",  \"solution \",  \"to \",  \"this \",  \"problem \"\\].\nThe first 4 words are \\[ \"What \",  \"is \",  \"the \",  \"solution \"\\].\nHence, you should return  \"What is the solution \".\n\n**Example 3:**\n\n**Input:** s =  \"chopper is not a tanuki \", k = 5\n**Output:**  \"chopper is not a tanuki \"\n\n**Constraints:**\n\n*   `1 <= s.length <= 500`\n*   `k` is in the range `[1, the number of words in s]`.\n*   `s` consist of only lowercase and uppercase English letters and spaces.\n*   The words in `s` are separated by a single space.\n*   There are no leading or trailing spaces."}}
{"1822": {"title": "Sign of the Product of an Array", "difficulty": "Easy", "description": "There is a function `signFunc(x)` that returns:\n\n*   `1` if `x` is positive.\n*   `-1` if `x` is negative.\n*   `0` if `x` is equal to `0`.\n\nYou are given an integer array `nums`. Let `product` be the product of all values in the array `nums`.\n\nReturn `signFunc(product)`.\n\n**Example 1:**\n\n**Input:** nums = \\[-1,-2,-3,-4,3,2,1\\]\n**Output:** 1\n**Explanation:** The product of all values in the array is 144, and signFunc(144) = 1\n\n**Example 2:**\n\n**Input:** nums = \\[1,5,0,2,-3\\]\n**Output:** 0\n**Explanation:** The product of all values in the array is 0, and signFunc(0) = 0\n\n**Example 3:**\n\n**Input:** nums = \\[-1,1,-1,1,-1\\]\n**Output:** -1\n**Explanation:** The product of all values in the array is -1, and signFunc(-1) = -1\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `-100 <= nums[i] <= 100`"}}
{"1826": {"title": "Faulty Sensor", "difficulty": "Easy", "description": "An experiment is being conducted in a lab. To ensure accuracy, there are **two** sensors collecting data simultaneously. You are given two arrays `sensor1` and `sensor2`, where `sensor1[i]` and `sensor2[i]` are the `ith` data points collected by the two sensors.\n\nHowever, this type of sensor has a chance of being defective, which causes **exactly one** data point to be dropped. After the data is dropped, all the data points to the **right** of the dropped data are **shifted** one place to the left, and the last data point is replaced with some **random value**. It is guaranteed that this random value will **not** be equal to the dropped value.\n\n*   For example, if the correct data is `[1,2,**3**,4,5]` and `3` is dropped, the sensor could return `[1,2,4,5,**7**]` (the last position can be **any** value, not just `7`).\n\nWe know that there is a defect in **at most one** of the sensors. Return _the sensor number (_`1` _or_ `2`_) with the defect. If there is **no defect** in either sensor or if it is **impossible** to determine the defective sensor, return_ `-1`_._\n\n**Example 1:**\n\n**Input:** sensor1 = \\[2,3,4,5\\], sensor2 = \\[2,1,3,4\\]\n**Output:** 1\n**Explanation:** Sensor 2 has the correct values.\nThe second data point from sensor 2 is dropped, and the last value of sensor 1 is replaced by a 5.\n\n**Example 2:**\n\n**Input:** sensor1 = \\[2,2,2,2,2\\], sensor2 = \\[2,2,2,2,5\\]\n**Output:** -1\n**Explanation:** It is impossible to determine which sensor has a defect.\nDropping the last value for either sensor could produce the output for the other sensor.\n\n**Example 3:**\n\n**Input:** sensor1 = \\[2,3,2,2,3,2\\], sensor2 = \\[2,3,2,3,2,7\\]\n**Output:** 2\n**Explanation:** Sensor 1 has the correct values.\nThe fourth data point from sensor 1 is dropped, and the last value of sensor 1 is replaced by a 7.\n\n**Constraints:**\n\n*   `sensor1.length == sensor2.length`\n*   `1 <= sensor1.length <= 100`\n*   `1 <= sensor1[i], sensor2[i] <= 100`"}}
{"1827": {"title": "Minimum Operations to Make the Array Increasing", "difficulty": "Easy", "description": "You are given an integer array `nums` (**0-indexed**). In one operation, you can choose an element of the array and increment it by `1`.\n\n*   For example, if `nums = [1,2,3]`, you can choose to increment `nums[1]` to make `nums = [1,**3**,3]`.\n\nReturn _the **minimum** number of operations needed to make_ `nums` _**strictly** **increasing**._\n\nAn array `nums` is **strictly increasing** if `nums[i] < nums[i+1]` for all `0 <= i < nums.length - 1`. An array of length `1` is trivially strictly increasing.\n\n**Example 1:**\n\n**Input:** nums = \\[1,1,1\\]\n**Output:** 3\n**Explanation:** You can do the following operations:\n1) Increment nums\\[2\\], so nums becomes \\[1,1,**2**\\].\n2) Increment nums\\[1\\], so nums becomes \\[1,**2**,2\\].\n3) Increment nums\\[2\\], so nums becomes \\[1,2,**3**\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1,5,2,4,1\\]\n**Output:** 14\n\n**Example 3:**\n\n**Input:** nums = \\[8\\]\n**Output:** 0\n\n**Constraints:**\n\n*   `1 <= nums.length <= 5000`\n*   `1 <= nums[i] <= 104`"}}
{"1832": {"title": "Check if the Sentence Is Pangram", "difficulty": "Easy", "description": "A **pangram** is a sentence where every letter of the English alphabet appears at least once.\n\nGiven a string `sentence` containing only lowercase English letters, return `true` _if_ `sentence` _is a **pangram**, or_ `false` _otherwise._\n\n**Example 1:**\n\n**Input:** sentence =  \"thequickbrownfoxjumpsoverthelazydog \"\n**Output:** true\n**Explanation:** sentence contains at least one of every letter of the English alphabet.\n\n**Example 2:**\n\n**Input:** sentence =  \"leetcode \"\n**Output:** false\n\n**Constraints:**\n\n*   `1 <= sentence.length <= 1000`\n*   `sentence` consists of lowercase English letters."}}
{"1837": {"title": "Sum of Digits in Base K", "difficulty": "Easy", "description": "Given an integer `n` (in base `10`) and a base `k`, return _the **sum** of the digits of_ `n` _**after** converting_ `n` _from base_ `10` _to base_ `k`.\n\nAfter converting, each digit should be interpreted as a base `10` number, and the sum should be returned in base `10`.\n\n**Example 1:**\n\n**Input:** n = 34, k = 6\n**Output:** 9\n**Explanation:** 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9.\n\n**Example 2:**\n\n**Input:** n = 10, k = 10\n**Output:** 1\n**Explanation:** n is already in base 10. 1 + 0 = 1.\n\n**Constraints:**\n\n*   `1 <= n <= 100`\n*   `2 <= k <= 10`"}}
{"1844": {"title": "Replace All Digits with Characters", "difficulty": "Easy", "description": "You are given a **0-indexed** string `s` that has lowercase English letters in its **even** indices and digits in its **odd** indices.\n\nThere is a function `shift(c, x)`, where `c` is a character and `x` is a digit, that returns the `xth` character after `c`.\n\n*   For example, `shift('a', 5) = 'f'` and `shift('x', 0) = 'x'`.\n\nFor every **odd** index `i`, you want to replace the digit `s[i]` with `shift(s[i-1], s[i])`.\n\nReturn `s` _after replacing all digits. It is **guaranteed** that_ `shift(s[i-1], s[i])` _will never exceed_ `'z'`.\n\n**Example 1:**\n\n**Input:** s =  \"a1c1e1 \"\n**Output:**  \"abcdef \"\n**Explanation:** The digits are replaced as follows:\n- s\\[1\\] -> shift('a',1) = 'b'\n- s\\[3\\] -> shift('c',1) = 'd'\n- s\\[5\\] -> shift('e',1) = 'f'\n\n**Example 2:**\n\n**Input:** s =  \"a1b2c3d4e \"\n**Output:**  \"abbdcfdhe \"\n**Explanation:** The digits are replaced as follows:\n- s\\[1\\] -> shift('a',1) = 'b'\n- s\\[3\\] -> shift('b',2) = 'd'\n- s\\[5\\] -> shift('c',3) = 'f'\n- s\\[7\\] -> shift('d',4) = 'h'\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists only of lowercase English letters and digits.\n*   `shift(s[i-1], s[i]) <= 'z'` for all **odd** indices `i`."}}
{"1848": {"title": "Minimum Distance to the Target Element", "difficulty": "Easy", "description": "Given an integer array `nums` **(0-indexed)** and two integers `target` and `start`, find an index `i` such that `nums[i] == target` and `abs(i - start)` is **minimized**. Note that `abs(x)` is the absolute value of `x`.\n\nReturn `abs(i - start)`.\n\nIt is **guaranteed** that `target` exists in `nums`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,3,4,5\\], target = 5, start = 3\n**Output:** 1\n**Explanation:** nums\\[4\\] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.\n\n**Example 2:**\n\n**Input:** nums = \\[1\\], target = 1, start = 0\n**Output:** 0\n**Explanation:** nums\\[0\\] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,1,1,1,1,1,1,1,1\\], target = 1, start = 0\n**Output:** 0\n**Explanation:** Every value of nums is 1, but nums\\[0\\] minimizes abs(i - start), which is abs(0 - 0) = 0.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 104`\n*   `0 <= start < nums.length`\n*   `target` is in `nums`."}}
{"1854": {"title": "Maximum Population Year", "difficulty": "Easy", "description": "You are given a 2D integer array `logs` where each `logs[i] = [birthi, deathi]` indicates the birth and death years of the `ith` person.\n\nThe **population** of some year `x` is the number of people alive during that year. The `ith` person is counted in year `x`'s population if `x` is in the **inclusive** range `[birthi, deathi - 1]`. Note that the person is **not** counted in the year that they die.\n\nReturn _the **earliest** year with the **maximum population**_.\n\n**Example 1:**\n\n**Input:** logs = \\[\\[1993,1999\\],\\[2000,2010\\]\\]\n**Output:** 1993\n**Explanation:** The maximum population is 1, and 1993 is the earliest year with this population.\n\n**Example 2:**\n\n**Input:** logs = \\[\\[1950,1961\\],\\[1960,1971\\],\\[1970,1981\\]\\]\n**Output:** 1960\n**Explanation:** \nThe maximum population is 2, and it had happened in years 1960 and 1970.\nThe earlier year between them is 1960.\n\n**Constraints:**\n\n*   `1 <= logs.length <= 100`\n*   `1950 <= birthi < deathi <= 2050`"}}
{"1859": {"title": "Sorting the Sentence", "difficulty": "Easy", "description": "A **sentence** is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.\n\nA sentence can be **shuffled** by appending the **1-indexed word position** to each word then rearranging the words in the sentence.\n\n*   For example, the sentence `\"This is a sentence \"` can be shuffled as `\"sentence4 a3 is2 This1 \"` or `\"is2 sentence4 This1 a3 \"`.\n\nGiven a **shuffled sentence** `s` containing no more than `9` words, reconstruct and return _the original sentence_.\n\n**Example 1:**\n\n**Input:** s =  \"is2 sentence4 This1 a3 \"\n**Output:**  \"This is a sentence \"\n**Explanation:** Sort the words in s to their original positions  \"This1 is2 a3 sentence4 \", then remove the numbers.\n\n**Example 2:**\n\n**Input:** s =  \"Myself2 Me1 I4 and3 \"\n**Output:**  \"Me Myself and I \"\n**Explanation:** Sort the words in s to their original positions  \"Me1 Myself2 and3 I4 \", then remove the numbers.\n\n**Constraints:**\n\n*   `2 <= s.length <= 200`\n*   `s` consists of lowercase and uppercase English letters, spaces, and digits from `1` to `9`.\n*   The number of words in `s` is between `1` and `9`.\n*   The words in `s` are separated by a single space.\n*   `s` contains no leading or trailing spaces.\n\n1\\. All characters in a are strictly less than those in b (i.e., a\\[i\\] < b\\[i\\] for all i). 2. All characters in b are strictly less than those in a (i.e., a\\[i\\] > b\\[i\\] for all i). 3. All characters in a and b are the same (i.e., a\\[i\\] = b\\[i\\] for all i)."}}
{"1863": {"title": "Sum of All Subset XOR Totals", "difficulty": "Easy", "description": "The **XOR total** of an array is defined as the bitwise `XOR` of **all its elements**, or `0` if the array is **empty**.\n\n*   For example, the **XOR total** of the array `[2,5,6]` is `2 XOR 5 XOR 6 = 1`.\n\nGiven an array `nums`, return _the **sum** of all **XOR totals** for every **subset** of_ `nums`.\n\n**Note:** Subsets with the **same** elements should be counted **multiple** times.\n\nAn array `a` is a **subset** of an array `b` if `a` can be obtained from `b` by deleting some (possibly zero) elements of `b`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,3\\]\n**Output:** 6\n**Explanation:** The 4 subsets of \\[1,3\\] are:\n- The empty subset has an XOR total of 0.\n- \\[1\\] has an XOR total of 1.\n- \\[3\\] has an XOR total of 3.\n- \\[1,3\\] has an XOR total of 1 XOR 3 = 2.\n0 + 1 + 3 + 2 = 6\n\n**Example 2:**\n\n**Input:** nums = \\[5,1,6\\]\n**Output:** 28\n**Explanation:** The 8 subsets of \\[5,1,6\\] are:\n- The empty subset has an XOR total of 0.\n- \\[5\\] has an XOR total of 5.\n- \\[1\\] has an XOR total of 1.\n- \\[6\\] has an XOR total of 6.\n- \\[5,1\\] has an XOR total of 5 XOR 1 = 4.\n- \\[5,6\\] has an XOR total of 5 XOR 6 = 3.\n- \\[1,6\\] has an XOR total of 1 XOR 6 = 7.\n- \\[5,1,6\\] has an XOR total of 5 XOR 1 XOR 6 = 2.\n0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28\n\n**Example 3:**\n\n**Input:** nums = \\[3,4,5,6,7,8\\]\n**Output:** 480\n**Explanation:** The sum of all XOR totals for every subset is 480.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 12`\n*   `1 <= nums[i] <= 20`"}}
{"1869": {"title": "Longer Contiguous Segments of Ones than Zeros", "difficulty": "Easy", "description": "Given a binary string `s`, return `true` _if the **longest** contiguous segment of_ `1`'_s is **strictly longer** than the **longest** contiguous segment of_ `0`'_s in_ `s`, or return `false` _otherwise_.\n\n*   For example, in `s = \"110100010 \"` the longest continuous segment of `1`s has length `2`, and the longest continuous segment of `0`s has length `3`.\n\nNote that if there are no `0`'s, then the longest continuous segment of `0`'s is considered to have a length `0`. The same applies if there is no `1`'s.\n\n**Example 1:**\n\n**Input:** s =  \"1101 \"\n**Output:** true\n**Explanation:**\nThe longest contiguous segment of 1s has length 2:  \"1101 \"\nThe longest contiguous segment of 0s has length 1:  \"1101 \"\nThe segment of 1s is longer, so return true.\n\n**Example 2:**\n\n**Input:** s =  \"111000 \"\n**Output:** false\n**Explanation:**\nThe longest contiguous segment of 1s has length 3:  \"111000 \"\nThe longest contiguous segment of 0s has length 3:  \"111000 \"\nThe segment of 1s is not longer, so return false.\n\n**Example 3:**\n\n**Input:** s =  \"110100010 \"\n**Output:** false\n**Explanation:**\nThe longest contiguous segment of 1s has length 2:  \"110100010 \"\nThe longest contiguous segment of 0s has length 3:  \"110100010 \"\nThe segment of 1s is not longer, so return false.\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s[i]` is either `'0'` or `'1'`."}}
{"1876": {"title": "Substrings of Size Three with Distinct Characters", "difficulty": "Easy", "description": "A string is **good** if there are no repeated characters.\n\nGiven a string `s`​​​​​, return _the number of **good substrings** of length **three** in_ `s`​​​​​​.\n\nNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\n\nA **substring** is a contiguous sequence of characters in a string.\n\n**Example 1:**\n\n**Input:** s =  \"xyzzaz \"\n**Output:** 1\n**Explanation:** There are 4 substrings of size 3:  \"xyz \",  \"yzz \",  \"zza \", and  \"zaz \". \nThe only good substring of length 3 is  \"xyz \".\n\n**Example 2:**\n\n**Input:** s =  \"aababcabc \"\n**Output:** 4\n**Explanation:** There are 7 substrings of size 3:  \"aab \",  \"aba \",  \"bab \",  \"abc \",  \"bca \",  \"cab \", and  \"abc \".\nThe good substrings are  \"abc \",  \"bca \",  \"cab \", and  \"abc \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s`​​​​​​ consists of lowercase English letters."}}
{"1880": {"title": "Check if Word Equals Summation of Two Words", "difficulty": "Easy", "description": "The **letter value** of a letter is its position in the alphabet **starting from 0** (i.e. `'a' -> 0`, `'b' -> 1`, `'c' -> 2`, etc.).\n\nThe **numerical value** of some string of lowercase English letters `s` is the **concatenation** of the **letter values** of each letter in `s`, which is then **converted** into an integer.\n\n*   For example, if `s = \"acb \"`, we concatenate each letter's letter value, resulting in `\"021 \"`. After converting it, we get `21`.\n\nYou are given three strings `firstWord`, `secondWord`, and `targetWord`, each consisting of lowercase English letters `'a'` through `'j'` **inclusive**.\n\nReturn `true` _if the **summation** of the **numerical values** of_ `firstWord` _and_ `secondWord` _equals the **numerical value** of_ `targetWord`_, or_ `false` _otherwise._\n\n**Example 1:**\n\n**Input:** firstWord =  \"acb \", secondWord =  \"cba \", targetWord =  \"cdb \"\n**Output:** true\n**Explanation:**\nThe numerical value of firstWord is  \"acb \" ->  \"021 \" -> 21.\nThe numerical value of secondWord is  \"cba \" ->  \"210 \" -> 210.\nThe numerical value of targetWord is  \"cdb \" ->  \"231 \" -> 231.\nWe return true because 21 + 210 == 231.\n\n**Example 2:**\n\n**Input:** firstWord =  \"aaa \", secondWord =  \"a \", targetWord =  \"aab \"\n**Output:** false\n**Explanation:** \nThe numerical value of firstWord is  \"aaa \" ->  \"000 \" -> 0.\nThe numerical value of secondWord is  \"a \" ->  \"0 \" -> 0.\nThe numerical value of targetWord is  \"aab \" ->  \"001 \" -> 1.\nWe return false because 0 + 0 != 1.\n\n**Example 3:**\n\n**Input:** firstWord =  \"aaa \", secondWord =  \"a \", targetWord =  \"aaaa \"\n**Output:** true\n**Explanation:** \nThe numerical value of firstWord is  \"aaa \" ->  \"000 \" -> 0.\nThe numerical value of secondWord is  \"a \" ->  \"0 \" -> 0.\nThe numerical value of targetWord is  \"aaaa \" ->  \"0000 \" -> 0.\nWe return true because 0 + 0 == 0.\n\n**Constraints:**\n\n*   `1 <= firstWord.length,` `secondWord.length,` `targetWord.length <= 8`\n*   `firstWord`, `secondWord`, and `targetWord` consist of lowercase English letters from `'a'` to `'j'` **inclusive**."}}
{"1886": {"title": "Determine Whether Matrix Can Be Obtained By Rotation", "difficulty": "Easy", "description": "Given two `n x n` binary matrices `mat` and `target`, return `true` _if it is possible to make_ `mat` _equal to_ `target` _by **rotating**_ `mat` _in **90-degree increments**, or_ `false` _otherwise._\n\n**Example 1:**\n\n**Input:** mat = \\[\\[0,1\\],\\[1,0\\]\\], target = \\[\\[1,0\\],\\[0,1\\]\\]\n**Output:** true\n**Explanation:** We can rotate mat 90 degrees clockwise to make mat equal target.\n\n**Example 2:**\n\n**Input:** mat = \\[\\[0,1\\],\\[1,1\\]\\], target = \\[\\[1,0\\],\\[0,1\\]\\]\n**Output:** false\n**Explanation:** It is impossible to make mat equal to target by rotating mat.\n\n**Example 3:**\n\n**Input:** mat = \\[\\[0,0,0\\],\\[0,1,0\\],\\[1,1,1\\]\\], target = \\[\\[1,1,1\\],\\[0,1,0\\],\\[0,0,0\\]\\]\n**Output:** true\n**Explanation:** We can rotate mat 90 degrees clockwise two times to make mat equal target.\n\n**Constraints:**\n\n*   `n == mat.length == target.length`\n*   `n == mat[i].length == target[i].length`\n*   `1 <= n <= 10`\n*   `mat[i][j]` and `target[i][j]` are either `0` or `1`."}}
{"1893": {"title": "Check if All the Integers in a Range Are Covered", "difficulty": "Easy", "description": "You are given a 2D integer array `ranges` and two integers `left` and `right`. Each `ranges[i] = [starti, endi]` represents an **inclusive** interval between `starti` and `endi`.\n\nReturn `true` _if each integer in the inclusive range_ `[left, right]` _is covered by **at least one** interval in_ `ranges`. Return `false` _otherwise_.\n\nAn integer `x` is covered by an interval `ranges[i] = [starti, endi]` if `starti <= x <= endi`.\n\n**Example 1:**\n\n**Input:** ranges = \\[\\[1,2\\],\\[3,4\\],\\[5,6\\]\\], left = 2, right = 5\n**Output:** true\n**Explanation:** Every integer between 2 and 5 is covered:\n- 2 is covered by the first range.\n- 3 and 4 are covered by the second range.\n- 5 is covered by the third range.\n\n**Example 2:**\n\n**Input:** ranges = \\[\\[1,10\\],\\[10,20\\]\\], left = 21, right = 21\n**Output:** false\n**Explanation:** 21 is not covered by any range.\n\n**Constraints:**\n\n*   `1 <= ranges.length <= 50`\n*   `1 <= starti <= endi <= 50`\n*   `1 <= left <= right <= 50`"}}
{"1897": {"title": "Redistribute Characters to Make All Strings Equal", "difficulty": "Easy", "description": "You are given an array of strings `words` (**0-indexed**).\n\nIn one operation, pick two **distinct** indices `i` and `j`, where `words[i]` is a non-empty string, and move **any** character from `words[i]` to **any** position in `words[j]`.\n\nReturn `true` _if you can make **every** string in_ `words` _**equal** using **any** number of operations_, _and_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** words = \\[ \"abc \", \"aabc \", \"bc \"\\]\n**Output:** true\n**Explanation:** Move the first 'a' in `words[1] to the front of words[2], to make` `words[1]` =  \"abc \" and words\\[2\\] =  \"abc \".\nAll the strings are now equal to  \"abc \", so return `true`.\n\n**Example 2:**\n\n**Input:** words = \\[ \"ab \", \"a \"\\]\n**Output:** false\n**Explanation:** It is impossible to make all the strings equal using the operation.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 100`\n*   `words[i]` consists of lowercase English letters."}}
{"1903": {"title": "Largest Odd Number in String", "difficulty": "Easy", "description": "You are given a string `num`, representing a large integer. Return _the **largest-valued odd** integer (as a string) that is a **non-empty substring** of_ `num`_, or an empty string_ `\" \"` _if no odd integer exists_.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n**Example 1:**\n\n**Input:** num =  \"52 \"\n**Output:**  \"5 \"\n**Explanation:** The only non-empty substrings are  \"5 \",  \"2 \", and  \"52 \".  \"5 \" is the only odd number.\n\n**Example 2:**\n\n**Input:** num =  \"4206 \"\n**Output:**  \" \"\n**Explanation:** There are no odd numbers in  \"4206 \".\n\n**Example 3:**\n\n**Input:** num =  \"35427 \"\n**Output:**  \"35427 \"\n**Explanation:**  \"35427 \" is already an odd number.\n\n**Constraints:**\n\n*   `1 <= num.length <= 105`\n*   `num` only consists of digits and does not contain any leading zeros."}}
{"1909": {"title": "Remove One Element to Make the Array Strictly Increasing", "difficulty": "Easy", "description": "Given a **0-indexed** integer array `nums`, return `true` _if it can be made **strictly increasing** after removing **exactly one** element, or_ `false` _otherwise. If the array is already strictly increasing, return_ `true`.\n\nThe array `nums` is **strictly increasing** if `nums[i - 1] < nums[i]` for each index `(1 <= i < nums.length).`\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,10,5,7\\]\n**Output:** true\n**Explanation:** By removing 10 at index 2 from nums, it becomes \\[1,2,5,7\\].\n\\[1,2,5,7\\] is strictly increasing, so return true.\n\n**Example 2:**\n\n**Input:** nums = \\[2,3,1,2\\]\n**Output:** false\n**Explanation:**\n\\[3,1,2\\] is the result of removing the element at index 0.\n\\[2,1,2\\] is the result of removing the element at index 1.\n\\[2,3,2\\] is the result of removing the element at index 2.\n\\[2,3,1\\] is the result of removing the element at index 3.\nNo resulting array is strictly increasing, so return false.\n\n**Example 3:**\n\n**Input:** nums = \\[1,1,1\\]\n**Output:** false\n**Explanation:** The result of removing any element is \\[1,1\\].\n\\[1,1\\] is not strictly increasing, so return false.\n\n**Constraints:**\n\n*   `2 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 1000`"}}
{"1913": {"title": "Maximum Product Difference Between Two Pairs", "difficulty": "Easy", "description": "The **product difference** between two pairs `(a, b)` and `(c, d)` is defined as `(a * b) - (c * d)`.\n\n*   For example, the product difference between `(5, 6)` and `(2, 7)` is `(5 * 6) - (2 * 7) = 16`.\n\nGiven an integer array `nums`, choose four **distinct** indices `w`, `x`, `y`, and `z` such that the **product difference** between pairs `(nums[w], nums[x])` and `(nums[y], nums[z])` is **maximized**.\n\nReturn _the **maximum** such product difference_.\n\n**Example 1:**\n\n**Input:** nums = \\[5,6,2,7,4\\]\n**Output:** 34\n**Explanation:** We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).\nThe product difference is (6 \\* 7) - (2 \\* 4) = 34.\n\n**Example 2:**\n\n**Input:** nums = \\[4,2,5,9,7,4,8\\]\n**Output:** 64\n**Explanation:** We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).\nThe product difference is (9 \\* 8) - (2 \\* 4) = 64.\n\n**Constraints:**\n\n*   `4 <= nums.length <= 104`\n*   `1 <= nums[i] <= 104`"}}
{"1920": {"title": "Build Array from Permutation", "difficulty": "Easy", "description": "Given a **zero-based permutation** `nums` (**0-indexed**), build an array `ans` of the **same length** where `ans[i] = nums[nums[i]]` for each `0 <= i < nums.length` and return it.\n\nA **zero-based permutation** `nums` is an array of **distinct** integers from `0` to `nums.length - 1` (**inclusive**).\n\n**Example 1:**\n\n**Input:** nums = \\[0,2,1,5,3,4\\]\n**Output:** \\[0,1,2,4,5,3\\]\n**Explanation:** The array ans is built as follows: \nans = \\[nums\\[nums\\[0\\]\\], nums\\[nums\\[1\\]\\], nums\\[nums\\[2\\]\\], nums\\[nums\\[3\\]\\], nums\\[nums\\[4\\]\\], nums\\[nums\\[5\\]\\]\\]\n    = \\[nums\\[0\\], nums\\[2\\], nums\\[1\\], nums\\[5\\], nums\\[3\\], nums\\[4\\]\\]\n    = \\[0,1,2,4,5,3\\]\n\n**Example 2:**\n\n**Input:** nums = \\[5,0,1,2,3,4\\]\n**Output:** \\[4,5,0,1,2,3\\]\n**Explanation:** The array ans is built as follows:\nans = \\[nums\\[nums\\[0\\]\\], nums\\[nums\\[1\\]\\], nums\\[nums\\[2\\]\\], nums\\[nums\\[3\\]\\], nums\\[nums\\[4\\]\\], nums\\[nums\\[5\\]\\]\\]\n    = \\[nums\\[5\\], nums\\[0\\], nums\\[1\\], nums\\[2\\], nums\\[3\\], nums\\[4\\]\\]\n    = \\[4,5,0,1,2,3\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `0 <= nums[i] < nums.length`\n*   The elements in `nums` are **distinct**.\n\n**Follow-up:** Can you solve it without using an extra space (i.e., `O(1)` memory)?"}}
{"1925": {"title": "Count Square Sum Triples", "difficulty": "Easy", "description": "A **square triple** `(a,b,c)` is a triple where `a`, `b`, and `c` are **integers** and `a2 + b2 = c2`.\n\nGiven an integer `n`, return _the number of **square triples** such that_ `1 <= a, b, c <= n`.\n\n**Example 1:**\n\n**Input:** n = 5\n**Output:** 2\n**Explanation**: The square triples are (3,4,5) and (4,3,5).\n\n**Example 2:**\n\n**Input:** n = 10\n**Output:** 4\n**Explanation**: The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10).\n\n**Constraints:**\n\n*   `1 <= n <= 250`"}}
{"1929": {"title": "Concatenation of Array", "difficulty": "Easy", "description": "Given an integer array `nums` of length `n`, you want to create an array `ans` of length `2n` where `ans[i] == nums[i]` and `ans[i + n] == nums[i]` for `0 <= i < n` (**0-indexed**).\n\nSpecifically, `ans` is the **concatenation** of two `nums` arrays.\n\nReturn _the array_ `ans`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,1\\]\n**Output:** \\[1,2,1,1,2,1\\]\n**Explanation:** The array ans is formed as follows:\n- ans = \\[nums\\[0\\],nums\\[1\\],nums\\[2\\],nums\\[0\\],nums\\[1\\],nums\\[2\\]\\]\n- ans = \\[1,2,1,1,2,1\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1,3,2,1\\]\n**Output:** \\[1,3,2,1,1,3,2,1\\]\n**Explanation:** The array ans is formed as follows:\n- ans = \\[nums\\[0\\],nums\\[1\\],nums\\[2\\],nums\\[3\\],nums\\[0\\],nums\\[1\\],nums\\[2\\],nums\\[3\\]\\]\n- ans = \\[1,3,2,1,1,3,2,1\\]\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `1 <= n <= 1000`\n*   `1 <= nums[i] <= 1000`"}}
{"1933": {"title": "Check if String Is Decomposable Into Value-Equal Substrings", "difficulty": "Easy", "description": "A **value-equal** string is a string where **all** characters are the same.\n\n*   For example, `\"1111 \"` and `\"33 \"` are value-equal strings.\n*   In contrast, `\"123 \"` is not a value-equal string.\n\nGiven a digit string `s`, decompose the string into some number of **consecutive value-equal** substrings where **exactly one** substring has a **length of** `2` and the remaining substrings have a **length of** `3`.\n\nReturn `true` _if you can decompose_ `s` _according to the above rules. Otherwise, return_ `false`.\n\nA **substring** is a contiguous sequence of characters in a string.\n\n**Example 1:**\n\n**Input:** s =  \"000111000 \"\n**Output:** false\n**Explanation:** s cannot be decomposed according to the rules because \\[ \"000 \",  \"111 \",  \"000 \"\\] does not have a substring of length 2.\n\n**Example 2:**\n\n**Input:** s =  \"00011111222 \"\n**Output:** true\n**Explanation:** s can be decomposed into \\[ \"000 \",  \"111 \",  \"11 \",  \"222 \"\\].\n\n**Example 3:**\n\n**Input:** s =  \"011100022233 \"\n**Output:** false\n**Explanation:** s cannot be decomposed according to the rules because of the first '0'.\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of only digits `'0'` through `'9'`."}}
{"1935": {"title": "Maximum Number of Words You Can Type", "difficulty": "Easy", "description": "There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.\n\nGiven a string `text` of words separated by a single space (no leading or trailing spaces) and a string `brokenLetters` of all **distinct** letter keys that are broken, return _the **number of words** in_ `text` _you can fully type using this keyboard_.\n\n**Example 1:**\n\n**Input:** text =  \"hello world \", brokenLetters =  \"ad \"\n**Output:** 1\n**Explanation:** We cannot type  \"world \" because the 'd' key is broken.\n\n**Example 2:**\n\n**Input:** text =  \"leet code \", brokenLetters =  \"lt \"\n**Output:** 1\n**Explanation:** We cannot type  \"leet \" because the 'l' and 't' keys are broken.\n\n**Example 3:**\n\n**Input:** text =  \"leet code \", brokenLetters =  \"e \"\n**Output:** 0\n**Explanation:** We cannot type either word because the 'e' key is broken.\n\n**Constraints:**\n\n*   `1 <= text.length <= 104`\n*   `0 <= brokenLetters.length <= 26`\n*   `text` consists of words separated by a single space without any leading or trailing spaces.\n*   Each word only consists of lowercase English letters.\n*   `brokenLetters` consists of **distinct** lowercase English letters."}}
{"1941": {"title": "Check if All Characters Have Equal Number of Occurrences", "difficulty": "Easy", "description": "Given a string `s`, return `true` _if_ `s` _is a **good** string, or_ `false` _otherwise_.\n\nA string `s` is **good** if **all** the characters that appear in `s` have the **same** number of occurrences (i.e., the same frequency).\n\n**Example 1:**\n\n**Input:** s =  \"abacbc \"\n**Output:** true\n**Explanation:** The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s.\n\n**Example 2:**\n\n**Input:** s =  \"aaabb \"\n**Output:** false\n**Explanation:** The characters that appear in s are 'a' and 'b'.\n'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times.\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of lowercase English letters."}}
{"1945": {"title": "Sum of Digits of String After Convert", "difficulty": "Easy", "description": "You are given a string `s` consisting of lowercase English letters, and an integer `k`.\n\nFirst, **convert** `s` into an integer by replacing each letter with its position in the alphabet (i.e., replace `'a'` with `1`, `'b'` with `2`, ..., `'z'` with `26`). Then, **transform** the integer by replacing it with the **sum of its digits**. Repeat the **transform** operation `k` **times** in total.\n\nFor example, if `s = \"zbax \"` and `k = 2`, then the resulting integer would be `8` by the following operations:\n\n*   **Convert**: `\"zbax \" ➝ \"(26)(2)(1)(24) \" ➝ \"262124 \" ➝ 262124`\n*   **Transform #1**: `262124 ➝ 2 + 6 + 2 + 1 + 2 + 4 ➝ 17`\n*   **Transform #2**: `17 ➝ 1 + 7 ➝ 8`\n\nReturn _the resulting integer after performing the operations described above_.\n\n**Example 1:**\n\n**Input:** s =  \"iiii \", k = 1\n**Output:** 36\n**Explanation:** The operations are as follows:\n- Convert:  \"iiii \" ➝  \"(9)(9)(9)(9) \" ➝  \"9999 \" ➝ 9999\n- Transform #1: 9999 ➝ 9 + 9 + 9 + 9 ➝ 36\nThus the resulting integer is 36.\n\n**Example 2:**\n\n**Input:** s =  \"leetcode \", k = 2\n**Output:** 6\n**Explanation:** The operations are as follows:\n- Convert:  \"leetcode \" ➝  \"(12)(5)(5)(20)(3)(15)(4)(5) \" ➝  \"12552031545 \" ➝ 12552031545\n- Transform #1: 12552031545 ➝ 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 ➝ 33\n- Transform #2: 33 ➝ 3 + 3 ➝ 6\nThus the resulting integer is 6.\n\n**Example 3:**\n\n**Input:** s =  \"zbax \", k = 2\n**Output:** 8\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `1 <= k <= 10`\n*   `s` consists of lowercase English letters."}}
{"1952": {"title": "Three Divisors", "difficulty": "Easy", "description": "Given an integer `n`, return `true` _if_ `n` _has **exactly three positive divisors**. Otherwise, return_ `false`.\n\nAn integer `m` is a **divisor** of `n` if there exists an integer `k` such that `n = k * m`.\n\n**Example 1:**\n\n**Input:** n = 2\n**Output:** false\n**Explantion:** 2 has only two divisors: 1 and 2.\n\n**Example 2:**\n\n**Input:** n = 4\n**Output:** true\n**Explantion:** 4 has three divisors: 1, 2, and 4.\n\n**Constraints:**\n\n*   `1 <= n <= 104`"}}
{"1957": {"title": "Delete Characters to Make Fancy String", "difficulty": "Easy", "description": "A **fancy string** is a string where no **three** **consecutive** characters are equal.\n\nGiven a string `s`, delete the **minimum** possible number of characters from `s` to make it **fancy**.\n\nReturn _the final string after the deletion_. It can be shown that the answer will always be **unique**.\n\n**Example 1:**\n\n**Input:** s =  \"leeetcode \"\n**Output:**  \"leetcode \"\n**Explanation:**\nRemove an 'e' from the first group of 'e's to create  \"leetcode \".\nNo three consecutive characters are equal, so return  \"leetcode \".\n\n**Example 2:**\n\n**Input:** s =  \"aaabaaaa \"\n**Output:**  \"aabaa \"\n**Explanation:**\nRemove an 'a' from the first group of 'a's to create  \"aabaaaa \".\nRemove two 'a's from the second group of 'a's to create  \"aabaa \".\nNo three consecutive characters are equal, so return  \"aabaa \".\n\n**Example 3:**\n\n**Input:** s =  \"aab \"\n**Output:**  \"aab \"\n**Explanation:** No three consecutive characters are equal, so return  \"aab \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 105`\n*   `s` consists only of lowercase English letters."}}
{"1961": {"title": "Check If String Is a Prefix of Array", "difficulty": "Easy", "description": "Given a string `s` and an array of strings `words`, determine whether `s` is a **prefix string** of `words`.\n\nA string `s` is a **prefix string** of `words` if `s` can be made by concatenating the first `k` strings in `words` for some **positive** `k` no larger than `words.length`.\n\nReturn `true` _if_ `s` _is a **prefix string** of_ `words`_, or_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** s =  \"iloveleetcode \", words = \\[ \"i \", \"love \", \"leetcode \", \"apples \"\\]\n**Output:** true\n**Explanation:**\ns can be made by concatenating  \"i \",  \"love \", and  \"leetcode \" together.\n\n**Example 2:**\n\n**Input:** s =  \"iloveleetcode \", words = \\[ \"apples \", \"i \", \"love \", \"leetcode \"\\]\n**Output:** false\n**Explanation:**\nIt is impossible to make s using a prefix of arr.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 20`\n*   `1 <= s.length <= 1000`\n*   `words[i]` and `s` consist of only lowercase English letters."}}
{"1967": {"title": "Number of Strings That Appear as Substrings in Word", "difficulty": "Easy", "description": "Given an array of strings `patterns` and a string `word`, return _the **number** of strings in_ `patterns` _that exist as a **substring** in_ `word`.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n**Example 1:**\n\n**Input:** patterns = \\[ \"a \", \"abc \", \"bc \", \"d \"\\], word =  \"abc \"\n**Output:** 3\n**Explanation:**\n-  \"a \" appears as a substring in  \"abc \".\n-  \"abc \" appears as a substring in  \"abc \".\n-  \"bc \" appears as a substring in  \"abc \".\n-  \"d \" does not appear as a substring in  \"abc \".\n3 of the strings in patterns appear as a substring in word.\n\n**Example 2:**\n\n**Input:** patterns = \\[ \"a \", \"b \", \"c \"\\], word =  \"aaaaabbbbb \"\n**Output:** 2\n**Explanation:**\n-  \"a \" appears as a substring in  \"aaaaabbbbb \".\n-  \"b \" appears as a substring in  \"aaaaabbbbb \".\n-  \"c \" does not appear as a substring in  \"aaaaabbbbb \".\n2 of the strings in patterns appear as a substring in word.\n\n**Example 3:**\n\n**Input:** patterns = \\[ \"a \", \"a \", \"a \"\\], word =  \"ab \"\n**Output:** 3\n**Explanation:** Each of the patterns appears as a substring in word  \"ab \".\n\n**Constraints:**\n\n*   `1 <= patterns.length <= 100`\n*   `1 <= patterns[i].length <= 100`\n*   `1 <= word.length <= 100`\n*   `patterns[i]` and `word` consist of lowercase English letters."}}
{"1971": {"title": "Find if Path Exists in Graph", "difficulty": "Easy", "description": "There is a **bi-directional** graph with `n` vertices, where each vertex is labeled from `0` to `n - 1` (**inclusive**). The edges in the graph are represented as a 2D integer array `edges`, where each `edges[i] = [ui, vi]` denotes a bi-directional edge between vertex `ui` and vertex `vi`. Every vertex pair is connected by **at most one** edge, and no vertex has an edge to itself.\n\nYou want to determine if there is a **valid path** that exists from vertex `source` to vertex `destination`.\n\nGiven `edges` and the integers `n`, `source`, and `destination`, return `true` _if there is a **valid path** from_ `source` _to_ `destination`_, or_ `false` _otherwise__._\n\n**Example 1:**\n\n**Input:** n = 3, edges = \\[\\[0,1\\],\\[1,2\\],\\[2,0\\]\\], source = 0, destination = 2\n**Output:** true\n**Explanation:** There are two paths from vertex 0 to vertex 2:\n- 0 -> 1 -> 2\n- 0 -> 2\n\n**Example 2:**\n\n**Input:** n = 6, edges = \\[\\[0,1\\],\\[0,2\\],\\[3,5\\],\\[5,4\\],\\[4,3\\]\\], source = 0, destination = 5\n**Output:** false\n**Explanation:** There is no path from vertex 0 to vertex 5.\n\n**Constraints:**\n\n*   `1 <= n <= 2 * 105`\n*   `0 <= edges.length <= 2 * 105`\n*   `edges[i].length == 2`\n*   `0 <= ui, vi <= n - 1`\n*   `ui != vi`\n*   `0 <= source, destination <= n - 1`\n*   There are no duplicate edges.\n*   There are no self edges."}}
{"1974": {"title": "Minimum Time to Type Word Using Special Typewriter", "difficulty": "Easy", "description": "There is a special typewriter with lowercase English letters `'a'` to `'z'` arranged in a **circle** with a **pointer**. A character can **only** be typed if the pointer is pointing to that character. The pointer is **initially** pointing to the character `'a'`.\n\nEach second, you may perform one of the following operations:\n\n*   Move the pointer one character **counterclockwise** or **clockwise**.\n*   Type the character the pointer is **currently** on.\n\nGiven a string `word`, return the **minimum** number of seconds to type out the characters in `word`.\n\n**Example 1:**\n\n**Input:** word =  \"abc \"\n**Output:** 5\n**Explanation:** \nThe characters are printed as follows:\n- Type the character 'a' in 1 second since the pointer is initially on 'a'.\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer clockwise to 'c' in 1 second.\n- Type the character 'c' in 1 second.\n\n**Example 2:**\n\n**Input:** word =  \"bza \"\n**Output:** 7\n**Explanation:**\nThe characters are printed as follows:\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer counterclockwise to 'z' in 2 seconds.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'a' in 1 second.\n- Type the character 'a' in 1 second.\n\n**Example 3:**\n\n**Input:** word =  \"zjpc \"\n**Output:** 34\n**Explanation:**\nThe characters are printed as follows:\n- Move the pointer counterclockwise to 'z' in 1 second.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'j' in 10 seconds.\n- Type the character 'j' in 1 second.\n- Move the pointer clockwise to 'p' in 6 seconds.\n- Type the character 'p' in 1 second.\n- Move the pointer counterclockwise to 'c' in 13 seconds.\n- Type the character 'c' in 1 second.\n\n**Constraints:**\n\n*   `1 <= word.length <= 100`\n*   `word` consists of lowercase English letters."}}
{"1979": {"title": "Find Greatest Common Divisor of Array", "difficulty": "Easy", "description": "Given an integer array `nums`, return _the **greatest common divisor** of the smallest number and largest number in_ `nums`.\n\nThe **greatest common divisor** of two numbers is the largest positive integer that evenly divides both numbers.\n\n**Example 1:**\n\n**Input:** nums = \\[2,5,6,9,10\\]\n**Output:** 2\n**Explanation:**\nThe smallest number in nums is 2.\nThe largest number in nums is 10.\nThe greatest common divisor of 2 and 10 is 2.\n\n**Example 2:**\n\n**Input:** nums = \\[7,5,6,8,3\\]\n**Output:** 1\n**Explanation:**\nThe smallest number in nums is 3.\nThe largest number in nums is 8.\nThe greatest common divisor of 3 and 8 is 1.\n\n**Example 3:**\n\n**Input:** nums = \\[3,3\\]\n**Output:** 3\n**Explanation:**\nThe smallest number in nums is 3.\nThe largest number in nums is 3.\nThe greatest common divisor of 3 and 3 is 3.\n\n**Constraints:**\n\n*   `2 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 1000`"}}
{"1984": {"title": "Minimum Difference Between Highest and Lowest of K Scores", "difficulty": "Easy", "description": "You are given a **0-indexed** integer array `nums`, where `nums[i]` represents the score of the `ith` student. You are also given an integer `k`.\n\nPick the scores of any `k` students from the array so that the **difference** between the **highest** and the **lowest** of the `k` scores is **minimized**.\n\nReturn _the **minimum** possible difference_.\n\n**Example 1:**\n\n**Input:** nums = \\[90\\], k = 1\n**Output:** 0\n**Explanation:** There is one way to pick score(s) of one student:\n- \\[**90**\\]. The difference between the highest and lowest score is 90 - 90 = 0.\nThe minimum possible difference is 0.\n\n**Example 2:**\n\n**Input:** nums = \\[9,4,1,7\\], k = 2\n**Output:** 2\n**Explanation:** There are six ways to pick score(s) of two students:\n- \\[**9**,**4**,1,7\\]. The difference between the highest and lowest score is 9 - 4 = 5.\n- \\[**9**,4,**1**,7\\]. The difference between the highest and lowest score is 9 - 1 = 8.\n- \\[**9**,4,1,**7**\\]. The difference between the highest and lowest score is 9 - 7 = 2.\n- \\[9,**4**,**1**,7\\]. The difference between the highest and lowest score is 4 - 1 = 3.\n- \\[9,**4**,1,**7**\\]. The difference between the highest and lowest score is 7 - 4 = 3.\n- \\[9,4,**1**,**7**\\]. The difference between the highest and lowest score is 7 - 1 = 6.\nThe minimum possible difference is 2.\n\n**Constraints:**\n\n*   `1 <= k <= nums.length <= 1000`\n*   `0 <= nums[i] <= 105`"}}
{"1991": {"title": "Find the Middle Index in Array", "difficulty": "Easy", "description": "Given a **0-indexed** integer array `nums`, find the **leftmost** `middleIndex` (i.e., the smallest amongst all the possible ones).\n\nA `middleIndex` is an index where `nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1]`.\n\nIf `middleIndex == 0`, the left side sum is considered to be `0`. Similarly, if `middleIndex == nums.length - 1`, the right side sum is considered to be `0`.\n\nReturn _the **leftmost**_ `middleIndex` _that satisfies the condition, or_ `-1` _if there is no such index_.\n\n**Example 1:**\n\n**Input:** nums = \\[2,3,-1,8,4\\]\n**Output:** 3\n**Explanation:** The sum of the numbers before index 3 is: 2 + 3 + -1 = 4\nThe sum of the numbers after index 3 is: 4 = 4\n\n**Example 2:**\n\n**Input:** nums = \\[1,-1,4\\]\n**Output:** 2\n**Explanation:** The sum of the numbers before index 2 is: 1 + -1 = 0\nThe sum of the numbers after index 2 is: 0\n\n**Example 3:**\n\n**Input:** nums = \\[2,5\\]\n**Output:** -1\n**Explanation:** There is no valid middleIndex.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `-1000 <= nums[i] <= 1000`\n\n**Note:** This question is the same as 724: [https://leetcode.com/problems/find-pivot-index/](https://leetcode.com/problems/find-pivot-index/)"}}
{"2000": {"title": "Reverse Prefix of Word", "difficulty": "Easy", "description": "Given a **0-indexed** string `word` and a character `ch`, **reverse** the segment of `word` that starts at index `0` and ends at the index of the **first occurrence** of `ch` (**inclusive**). If the character `ch` does not exist in `word`, do nothing.\n\n*   For example, if `word = \"abcdefd \"` and `ch = \"d \"`, then you should **reverse** the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `\"dcbaefd \"`.\n\nReturn _the resulting string_.\n\n**Example 1:**\n\n**Input:** word =  \"abcdefd \", ch =  \"d \"\n**Output:**  \"dcbaefd \"\n**Explanation:** The first occurrence of  \"d \" is at index 3. \nReverse the part of word from 0 to 3 (inclusive), the resulting string is  \"dcbaefd \".\n\n**Example 2:**\n\n**Input:** word =  \"xyxzxe \", ch =  \"z \"\n**Output:**  \"zxyxxe \"\n**Explanation:** The first and only occurrence of  \"z \" is at index 3.\nReverse the part of word from 0 to 3 (inclusive), the resulting string is  \"zxyxxe \".\n\n**Example 3:**\n\n**Input:** word =  \"abcd \", ch =  \"z \"\n**Output:**  \"abcd \"\n**Explanation:**  \"z \" does not exist in word.\nYou should not do any reverse operation, the resulting string is  \"abcd \".\n\n**Constraints:**\n\n*   `1 <= word.length <= 250`\n*   `word` consists of lowercase English letters.\n*   `ch` is a lowercase English letter."}}
{"2006": {"title": "Count Number of Pairs With Absolute Difference K", "difficulty": "Easy", "description": "Given an integer array `nums` and an integer `k`, return _the number of pairs_ `(i, j)` _where_ `i < j` _such that_ `|nums[i] - nums[j]| == k`.\n\nThe value of `|x|` is defined as:\n\n*   `x` if `x >= 0`.\n*   `-x` if `x < 0`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,2,1\\], k = 1\n**Output:** 4\n**Explanation:** The pairs with an absolute difference of 1 are:\n- \\[**1**,**2**,2,1\\]\n- \\[**1**,2,**2**,1\\]\n- \\[1,**2**,2,**1**\\]\n- \\[1,2,**2**,**1**\\]\n\n**Example 2:**\n\n**Input:** nums = \\[1,3\\], k = 3\n**Output:** 0\n**Explanation:** There are no pairs with an absolute difference of 3.\n\n**Example 3:**\n\n**Input:** nums = \\[3,2,1,5,4\\], k = 2\n**Output:** 3\n**Explanation:** The pairs with an absolute difference of 2 are:\n- \\[**3**,2,**1**,5,4\\]\n- \\[**3**,2,1,**5**,4\\]\n- \\[3,**2**,1,5,**4**\\]\n\n**Constraints:**\n\n*   `1 <= nums.length <= 200`\n*   `1 <= nums[i] <= 100`\n*   `1 <= k <= 99`"}}
{"2011": {"title": "Final Value of Variable After Performing Operations", "difficulty": "Easy", "description": "There is a programming language with only **four** operations and **one** variable `X`:\n\n*   `++X` and `X++` **increments** the value of the variable `X` by `1`.\n*   `--X` and `X--` **decrements** the value of the variable `X` by `1`.\n\nInitially, the value of `X` is `0`.\n\nGiven an array of strings `operations` containing a list of operations, return _the **final** value of_ `X` _after performing all the operations_.\n\n**Example 1:**\n\n**Input:** operations = \\[ \"--X \", \"X++ \", \"X++ \"\\]\n**Output:** 1\n**Explanation:** The operations are performed as follows:\nInitially, X = 0.\n--X: X is decremented by 1, X =  0 - 1 = -1.\nX++: X is incremented by 1, X = -1 + 1 =  0.\nX++: X is incremented by 1, X =  0 + 1 =  1.\n\n**Example 2:**\n\n**Input:** operations = \\[ \"++X \", \"++X \", \"X++ \"\\]\n**Output:** 3\n**Explanation:** The operations are performed as follows:\nInitially, X = 0.\n++X: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\nX++: X is incremented by 1, X = 2 + 1 = 3.\n\n**Example 3:**\n\n**Input:** operations = \\[ \"X++ \", \"++X \", \"--X \", \"X-- \"\\]\n**Output:** 0\n**Explanation:** The operations are performed as follows:\nInitially, X = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\n--X: X is decremented by 1, X = 2 - 1 = 1.\nX--: X is decremented by 1, X = 1 - 1 = 0.\n\n**Constraints:**\n\n*   `1 <= operations.length <= 100`\n*   `operations[i]` will be either `\"++X \"`, `\"X++ \"`, `\"--X \"`, or `\"X-- \"`."}}
{"2016": {"title": "Maximum Difference Between Increasing Elements", "difficulty": "Easy", "description": "Given a **0-indexed** integer array `nums` of size `n`, find the **maximum difference** between `nums[i]` and `nums[j]` (i.e., `nums[j] - nums[i]`), such that `0 <= i < j < n` and `nums[i] < nums[j]`.\n\nReturn _the **maximum difference**._ If no such `i` and `j` exists, return `-1`.\n\n**Example 1:**\n\n**Input:** nums = \\[7,**1**,**5**,4\\]\n**Output:** 4\n**Explanation:**\nThe maximum difference occurs with i = 1 and j = 2, nums\\[j\\] - nums\\[i\\] = 5 - 1 = 4.\nNote that with i = 1 and j = 0, the difference nums\\[j\\] - nums\\[i\\] = 7 - 1 = 6, but i > j, so it is not valid.\n\n**Example 2:**\n\n**Input:** nums = \\[9,4,3,2\\]\n**Output:** -1\n**Explanation:**\nThere is no i and j such that i < j and nums\\[i\\] < nums\\[j\\].\n\n**Example 3:**\n\n**Input:** nums = \\[**1**,5,2,**10**\\]\n**Output:** 9\n**Explanation:**\nThe maximum difference occurs with i = 0 and j = 3, nums\\[j\\] - nums\\[i\\] = 10 - 1 = 9.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `2 <= n <= 1000`\n*   `1 <= nums[i] <= 109`"}}
{"2022": {"title": "Convert 1D Array Into 2D Array", "difficulty": "Easy", "description": "You are given a **0-indexed** 1-dimensional (1D) integer array `original`, and two integers, `m` and `n`. You are tasked with creating a 2-dimensional (2D) array with `m` rows and `n` columns using **all** the elements from `original`.\n\nThe elements from indices `0` to `n - 1` (**inclusive**) of `original` should form the first row of the constructed 2D array, the elements from indices `n` to `2 * n - 1` (**inclusive**) should form the second row of the constructed 2D array, and so on.\n\nReturn _an_ `m x n` _2D array constructed according to the above procedure, or an empty 2D array if it is impossible_.\n\n**Example 1:**\n\n**Input:** original = \\[1,2,3,4\\], m = 2, n = 2\n**Output:** \\[\\[1,2\\],\\[3,4\\]\\]\n**Explanation:** The constructed 2D array should contain 2 rows and 2 columns.\nThe first group of n=2 elements in original, \\[1,2\\], becomes the first row in the constructed 2D array.\nThe second group of n=2 elements in original, \\[3,4\\], becomes the second row in the constructed 2D array.\n\n**Example 2:**\n\n**Input:** original = \\[1,2,3\\], m = 1, n = 3\n**Output:** \\[\\[1,2,3\\]\\]\n**Explanation:** The constructed 2D array should contain 1 row and 3 columns.\nPut all three elements in original into the first row of the constructed 2D array.\n\n**Example 3:**\n\n**Input:** original = \\[1,2\\], m = 1, n = 1\n**Output:** \\[\\]\n**Explanation:** There are 2 elements in original.\nIt is impossible to fit 2 elements in a 1x1 2D array, so return an empty 2D array.\n\n**Constraints:**\n\n*   `1 <= original.length <= 5 * 104`\n*   `1 <= original[i] <= 105`\n*   `1 <= m, n <= 4 * 104`"}}
{"2027": {"title": "Minimum Moves to Convert String", "difficulty": "Easy", "description": "You are given a string `s` consisting of `n` characters which are either `'X'` or `'O'`.\n\nA **move** is defined as selecting **three** **consecutive characters** of `s` and converting them to `'O'`. Note that if a move is applied to the character `'O'`, it will stay the **same**.\n\nReturn _the **minimum** number of moves required so that all the characters of_ `s` _are converted to_ `'O'`.\n\n**Example 1:**\n\n**Input:** s =  \"XXX \"\n**Output:** 1\n**Explanation:** XXX -> OOO\nWe select all the 3 characters and convert them in one move.\n\n**Example 2:**\n\n**Input:** s =  \"XXOX \"\n**Output:** 2\n**Explanation:** XXOX -> OOOX -> OOOO\nWe select the first 3 characters in the first move, and convert them to `'O'`.\nThen we select the last 3 characters and convert them so that the final string contains all `'O'`s.\n\n**Example 3:**\n\n**Input:** s =  \"OOOO \"\n**Output:** 0\n**Explanation:** There are no `'X's` in `s` to convert.\n\n**Constraints:**\n\n*   `3 <= s.length <= 1000`\n*   `s[i]` is either `'X'` or `'O'`."}}
{"2032": {"title": "Two Out of Three", "difficulty": "Easy", "description": "Given three integer arrays `nums1`, `nums2`, and `nums3`, return _a **distinct** array containing all the values that are present in **at least two** out of the three arrays. You may return the values in **any** order_.\n\n**Example 1:**\n\n**Input:** nums1 = \\[1,1,3,2\\], nums2 = \\[2,3\\], nums3 = \\[3\\]\n**Output:** \\[3,2\\]\n**Explanation:** The values that are present in at least two arrays are:\n- 3, in all three arrays.\n- 2, in nums1 and nums2.\n\n**Example 2:**\n\n**Input:** nums1 = \\[3,1\\], nums2 = \\[2,3\\], nums3 = \\[1,2\\]\n**Output:** \\[2,3,1\\]\n**Explanation:** The values that are present in at least two arrays are:\n- 2, in nums2 and nums3.\n- 3, in nums1 and nums2.\n- 1, in nums1 and nums3.\n\n**Example 3:**\n\n**Input:** nums1 = \\[1,2,2\\], nums2 = \\[4,3,3\\], nums3 = \\[5\\]\n**Output:** \\[\\]\n**Explanation:** No value is present in at least two arrays.\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length, nums3.length <= 100`\n*   `1 <= nums1[i], nums2[j], nums3[k] <= 100`"}}
{"2037": {"title": "Minimum Number of Moves to Seat Everyone", "difficulty": "Easy", "description": "There are `n` seats and `n` students in a room. You are given an array `seats` of length `n`, where `seats[i]` is the position of the `ith` seat. You are also given the array `students` of length `n`, where `students[j]` is the position of the `jth` student.\n\nYou may perform the following move any number of times:\n\n*   Increase or decrease the position of the `ith` student by `1` (i.e., moving the `ith` student from position `x` to `x + 1` or `x - 1`)\n\nReturn _the **minimum number of moves** required to move each student to a seat_ _such that no two students are in the same seat._\n\nNote that there may be **multiple** seats or students in the **same** position at the beginning.\n\n**Example 1:**\n\n**Input:** seats = \\[3,1,5\\], students = \\[2,7,4\\]\n**Output:** 4\n**Explanation:** The students are moved as follows:\n- The first student is moved from from position 2 to position 1 using 1 move.\n- The second student is moved from from position 7 to position 5 using 2 moves.\n- The third student is moved from from position 4 to position 3 using 1 move.\nIn total, 1 + 2 + 1 = 4 moves were used.\n\n**Example 2:**\n\n**Input:** seats = \\[4,1,5,9\\], students = \\[1,3,2,6\\]\n**Output:** 7\n**Explanation:** The students are moved as follows:\n- The first student is not moved.\n- The second student is moved from from position 3 to position 4 using 1 move.\n- The third student is moved from from position 2 to position 5 using 3 moves.\n- The fourth student is moved from from position 6 to position 9 using 3 moves.\nIn total, 0 + 1 + 3 + 3 = 7 moves were used.\n\n**Example 3:**\n\n**Input:** seats = \\[2,2,6,6\\], students = \\[1,3,2,6\\]\n**Output:** 4\n**Explanation:** Note that there are two seats at position 2 and two seats at position 6.\nThe students are moved as follows:\n- The first student is moved from from position 1 to position 2 using 1 move.\n- The second student is moved from from position 3 to position 6 using 3 moves.\n- The third student is not moved.\n- The fourth student is not moved.\nIn total, 1 + 3 + 0 + 0 = 4 moves were used.\n\n**Constraints:**\n\n*   `n == seats.length == students.length`\n*   `1 <= n <= 100`\n*   `1 <= seats[i], students[j] <= 100`"}}
{"2042": {"title": "Check if Numbers Are Ascending in a Sentence", "difficulty": "Easy", "description": "A sentence is a list of **tokens** separated by a **single** space with no leading or trailing spaces. Every token is either a **positive number** consisting of digits `0-9` with no leading zeros, or a **word** consisting of lowercase English letters.\n\n*   For example, `\"a puppy has 2 eyes 4 legs \"` is a sentence with seven tokens: `\"2 \"` and `\"4 \"` are numbers and the other tokens such as `\"puppy \"` are words.\n\nGiven a string `s` representing a sentence, you need to check if **all** the numbers in `s` are **strictly increasing** from left to right (i.e., other than the last number, **each** number is **strictly smaller** than the number on its **right** in `s`).\n\nReturn `true` _if so, or_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** s =  \"1 box has 3 blue 4 red 6 green and 12 yellow marbles \"\n**Output:** true\n**Explanation:** The numbers in s are: 1, 3, 4, 6, 12.\nThey are strictly increasing from left to right: 1 < 3 < 4 < 6 < 12.\n\n**Example 2:**\n\n**Input:** s =  \"hello world 5 x 5 \"\n**Output:** false\n**Explanation:** The numbers in s are: **5**, **5**. They are not strictly increasing.\n\n**Example 3:**\n\n**Input:** s =  \"sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s \"\n**Output:** false\n**Explanation:** The numbers in s are: 7, **51**, **50**, 60. They are not strictly increasing.\n\n**Constraints:**\n\n*   `3 <= s.length <= 200`\n*   `s` consists of lowercase English letters, spaces, and digits from `0` to `9`, inclusive.\n*   The number of tokens in `s` is between `2` and `100`, inclusive.\n*   The tokens in `s` are separated by a single space.\n*   There are at least **two** numbers in `s`.\n*   Each number in `s` is a **positive** number **less** than `100`, with no leading zeros.\n*   `s` contains no leading or trailing spaces."}}
{"2047": {"title": "Number of Valid Words in a Sentence", "difficulty": "Easy", "description": "A sentence consists of lowercase letters (`'a'` to `'z'`), digits (`'0'` to `'9'`), hyphens (`'-'`), punctuation marks (`'!'`, `'.'`, and `','`), and spaces (`' '`) only. Each sentence can be broken down into **one or more tokens** separated by one or more spaces `' '`.\n\nA token is a valid word if **all three** of the following are true:\n\n*   It only contains lowercase letters, hyphens, and/or punctuation (**no** digits).\n*   There is **at most one** hyphen `'-'`. If present, it **must** be surrounded by lowercase characters ( `\"a-b \"` is valid, but `\"-ab \"` and `\"ab- \"` are not valid).\n*   There is **at most one** punctuation mark. If present, it **must** be at the **end** of the token ( `\"ab, \"`, `\"cd! \"`, and `\". \"` are valid, but `\"a!b \"` and `\"c., \"` are not valid).\n\nExamples of valid words include `\"a-b. \"`, `\"afad \"`, `\"ba-c \"`, `\"a! \"`, and `\"! \"`.\n\nGiven a string `sentence`, return _the **number** of valid words in_ `sentence`.\n\n**Example 1:**\n\n**Input:** sentence =  \"cat and  dog \"\n**Output:** 3\n**Explanation:** The valid words in the sentence are  \"cat \",  \"and \", and  \"dog \".\n\n**Example 2:**\n\n**Input:** sentence =  \"!this  1-s b8d! \"\n**Output:** 0\n**Explanation:** There are no valid words in the sentence.\n \"!this \" is invalid because it starts with a punctuation mark.\n \"1-s \" and  \"b8d \" are invalid because they contain digits.\n\n**Example 3:**\n\n**Input:** sentence =  \"alice and  bob are playing stone-game10 \"\n**Output:** 5\n**Explanation:** The valid words in the sentence are  \"alice \",  \"and \",  \"bob \",  \"are \", and  \"playing \".\n \"stone-game10 \" is invalid because it contains digits.\n\n**Constraints:**\n\n*   `1 <= sentence.length <= 1000`\n*   `sentence` only contains lowercase English letters, digits, `' '`, `'-'`, `'!'`, `'.'`, and `','`.\n*   There will be at least `1` token."}}
{"2053": {"title": "Kth Distinct String in an Array", "difficulty": "Easy", "description": "A **distinct string** is a string that is present only **once** in an array.\n\nGiven an array of strings `arr`, and an integer `k`, return _the_ `kth` _**distinct string** present in_ `arr`. If there are **fewer** than `k` distinct strings, return _an **empty string**_ `\" \"`.\n\nNote that the strings are considered in the **order in which they appear** in the array.\n\n**Example 1:**\n\n**Input:** arr = \\[ \"d \", \"b \", \"c \", \"b \", \"c \", \"a \"\\], k = 2\n**Output:**  \"a \"\n**Explanation:**\nThe only distinct strings in arr are  \"d \" and  \"a \".\n \"d \" appears 1st, so it is the 1st distinct string.\n \"a \" appears 2nd, so it is the 2nd distinct string.\nSince k == 2,  \"a \" is returned. \n\n**Example 2:**\n\n**Input:** arr = \\[ \"aaa \", \"aa \", \"a \"\\], k = 1\n**Output:**  \"aaa \"\n**Explanation:**\nAll strings in arr are distinct, so the 1st string  \"aaa \" is returned.\n\n**Example 3:**\n\n**Input:** arr = \\[ \"a \", \"b \", \"a \"\\], k = 3\n**Output:**  \" \"\n**Explanation:**\nThe only distinct string is  \"b \". Since there are fewer than 3 distinct strings, we return an empty string  \" \".\n\n**Constraints:**\n\n*   `1 <= k <= arr.length <= 1000`\n*   `1 <= arr[i].length <= 5`\n*   `arr[i]` consists of lowercase English letters."}}
{"2057": {"title": "Smallest Index With Equal Value", "difficulty": "Easy", "description": "Given a **0-indexed** integer array `nums`, return _the **smallest** index_ `i` _of_ `nums` _such that_ `i mod 10 == nums[i]`_, or_ `-1` _if such index does not exist_.\n\n`x mod y` denotes the **remainder** when `x` is divided by `y`.\n\n**Example 1:**\n\n**Input:** nums = \\[0,1,2\\]\n**Output:** 0\n**Explanation:** \ni=0: 0 mod 10 = 0 == nums\\[0\\].\ni=1: 1 mod 10 = 1 == nums\\[1\\].\ni=2: 2 mod 10 = 2 == nums\\[2\\].\nAll indices have i mod 10 == nums\\[i\\], so we return the smallest index 0.\n\n**Example 2:**\n\n**Input:** nums = \\[4,3,2,1\\]\n**Output:** 2\n**Explanation:** \ni=0: 0 mod 10 = 0 != nums\\[0\\].\ni=1: 1 mod 10 = 1 != nums\\[1\\].\ni=2: 2 mod 10 = 2 == nums\\[2\\].\ni=3: 3 mod 10 = 3 != nums\\[3\\].\n2 is the only index which has i mod 10 == nums\\[i\\].\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,3,4,5,6,7,8,9,0\\]\n**Output:** -1\n**Explanation:** No index satisfies i mod 10 == nums\\[i\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `0 <= nums[i] <= 9`"}}
{"2062": {"title": "Count Vowel Substrings of a String", "difficulty": "Easy", "description": "A **substring** is a contiguous (non-empty) sequence of characters within a string.\n\nA **vowel substring** is a substring that **only** consists of vowels (`'a'`, `'e'`, `'i'`, `'o'`, and `'u'`) and has **all five** vowels present in it.\n\nGiven a string `word`, return _the number of **vowel substrings** in_ `word`.\n\n**Example 1:**\n\n**Input:** word =  \"aeiouu \"\n**Output:** 2\n**Explanation:** The vowel substrings of word are as follows (underlined):\n-  \"**aeiou**u \"\n-  \"**aeiouu** \"\n\n**Example 2:**\n\n**Input:** word =  \"unicornarihan \"\n**Output:** 0\n**Explanation:** Not all 5 vowels are present, so there are no vowel substrings.\n\n**Example 3:**\n\n**Input:** word =  \"cuaieuouac \"\n**Output:** 7\n**Explanation:** The vowel substrings of word are as follows (underlined):\n-  \"c**uaieuo**uac \"\n-  \"c**uaieuou**ac \"\n-  \"c**uaieuoua**c \"\n-  \"cu**aieuo**uac \"\n-  \"cu**aieuou**ac \"\n-  \"cu**aieuoua**c \"\n-  \"cua**ieuoua**c \"\n\n**Constraints:**\n\n*   `1 <= word.length <= 100`\n*   `word` consists of lowercase English letters only."}}
{"2068": {"title": "Check Whether Two Strings are Almost Equivalent", "difficulty": "Easy", "description": "Two strings `word1` and `word2` are considered **almost equivalent** if the differences between the frequencies of each letter from `'a'` to `'z'` between `word1` and `word2` is **at most** `3`.\n\nGiven two strings `word1` and `word2`, each of length `n`, return `true` _if_ `word1` _and_ `word2` _are **almost equivalent**, or_ `false` _otherwise_.\n\nThe **frequency** of a letter `x` is the number of times it occurs in the string.\n\n**Example 1:**\n\n**Input:** word1 =  \"aaaa \", word2 =  \"bccb \"\n**Output:** false\n**Explanation:** There are 4 'a's in  \"aaaa \" but 0 'a's in  \"bccb \".\nThe difference is 4, which is more than the allowed 3.\n\n**Example 2:**\n\n**Input:** word1 =  \"abcdeef \", word2 =  \"abaaacc \"\n**Output:** true\n**Explanation:** The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 1 time in word1 and 4 times in word2. The difference is 3.\n- 'b' appears 1 time in word1 and 1 time in word2. The difference is 0.\n- 'c' appears 1 time in word1 and 2 times in word2. The difference is 1.\n- 'd' appears 1 time in word1 and 0 times in word2. The difference is 1.\n- 'e' appears 2 times in word1 and 0 times in word2. The difference is 2.\n- 'f' appears 1 time in word1 and 0 times in word2. The difference is 1.\n\n**Example 3:**\n\n**Input:** word1 =  \"cccddabba \", word2 =  \"babababab \"\n**Output:** true\n**Explanation:** The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 2 times in word1 and 4 times in word2. The difference is 2.\n- 'b' appears 2 times in word1 and 5 times in word2. The difference is 3.\n- 'c' appears 3 times in word1 and 0 times in word2. The difference is 3.\n- 'd' appears 2 times in word1 and 0 times in word2. The difference is 2.\n\n**Constraints:**\n\n*   `n == word1.length == word2.length`\n*   `1 <= n <= 100`\n*   `word1` and `word2` consist only of lowercase English letters."}}
{"2073": {"title": "Time Needed to Buy Tickets", "difficulty": "Easy", "description": "There are `n` people in a line queuing to buy tickets, where the `0th` person is at the **front** of the line and the `(n - 1)th` person is at the **back** of the line.\n\nYou are given a **0-indexed** integer array `tickets` of length `n` where the number of tickets that the `ith` person would like to buy is `tickets[i]`.\n\nEach person takes **exactly 1 second** to buy a ticket. A person can only buy **1 ticket at a time** and has to go back to **the end** of the line (which happens **instantaneously**) in order to buy more tickets. If a person does not have any tickets left to buy, the person will **leave** the line.\n\nReturn _the **time taken** for the person at position_ `k` **_(0-indexed)_** _to finish buying tickets_.\n\n**Example 1:**\n\n**Input:** tickets = \\[2,3,2\\], k = 2\n**Output:** 6\n**Explanation:** \n- In the first pass, everyone in the line buys a ticket and the line becomes \\[1, 2, 1\\].\n- In the second pass, everyone in the line buys a ticket and the line becomes \\[0, 1, 0\\].\nThe person at position 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds.\n\n**Example 2:**\n\n**Input:** tickets = \\[5,1,1,1\\], k = 0\n**Output:** 8\n**Explanation:**\n- In the first pass, everyone in the line buys a ticket and the line becomes \\[4, 0, 0, 0\\].\n- In the next 4 passes, only the person in position 0 is buying tickets.\nThe person at position 0 has successfully bought 5 tickets and it took 4 + 1 + 1 + 1 + 1 = 8 seconds.\n\n**Constraints:**\n\n*   `n == tickets.length`\n*   `1 <= n <= 100`\n*   `1 <= tickets[i] <= 100`\n*   `0 <= k < n`"}}
{"2078": {"title": "Two Furthest Houses With Different Colors", "difficulty": "Easy", "description": "There are `n` houses evenly lined up on the street, and each house is beautifully painted. You are given a **0-indexed** integer array `colors` of length `n`, where `colors[i]` represents the color of the `ith` house.\n\nReturn _the **maximum** distance between **two** houses with **different** colors_.\n\nThe distance between the `ith` and `jth` houses is `abs(i - j)`, where `abs(x)` is the **absolute value** of `x`.\n\n**Example 1:**\n\n**Input:** colors = \\[**1**,1,1,**6**,1,1,1\\]\n**Output:** 3\n**Explanation:** In the above image, color 1 is blue, and color 6 is red.\nThe furthest two houses with different colors are house 0 and house 3.\nHouse 0 has color 1, and house 3 has color 6. The distance between them is abs(0 - 3) = 3.\nNote that houses 3 and 6 can also produce the optimal answer.\n\n**Example 2:**\n\n**Input:** colors = \\[**1**,8,3,8,**3**\\]\n**Output:** 4\n**Explanation:** In the above image, color 1 is blue, color 8 is yellow, and color 3 is green.\nThe furthest two houses with different colors are house 0 and house 4.\nHouse 0 has color 1, and house 4 has color 3. The distance between them is abs(0 - 4) = 4.\n\n**Example 3:**\n\n**Input:** colors = \\[**0**,**1**\\]\n**Output:** 1\n**Explanation:** The furthest two houses with different colors are house 0 and house 1.\nHouse 0 has color 0, and house 1 has color 1. The distance between them is abs(0 - 1) = 1.\n\n**Constraints:**\n\n*   `n == colors.length`\n*   `2 <= n <= 100`\n*   `0 <= colors[i] <= 100`\n*   Test data are generated such that **at least** two houses have different colors."}}
{"2085": {"title": "Count Common Words With One Occurrence", "difficulty": "Easy", "description": "Given two string arrays `words1` and `words2`, return _the number of strings that appear **exactly once** in **each** of the two arrays._\n\n**Example 1:**\n\n**Input:** words1 = \\[ \"leetcode \", \"is \", \"amazing \", \"as \", \"is \"\\], words2 = \\[ \"amazing \", \"leetcode \", \"is \"\\]\n**Output:** 2\n**Explanation:**\n-  \"leetcode \" appears exactly once in each of the two arrays. We count this string.\n-  \"amazing \" appears exactly once in each of the two arrays. We count this string.\n-  \"is \" appears in each of the two arrays, but there are 2 occurrences of it in words1. We do not count this string.\n-  \"as \" appears once in words1, but does not appear in words2. We do not count this string.\nThus, there are 2 strings that appear exactly once in each of the two arrays.\n\n**Example 2:**\n\n**Input:** words1 = \\[ \"b \", \"bb \", \"bbb \"\\], words2 = \\[ \"a \", \"aa \", \"aaa \"\\]\n**Output:** 0\n**Explanation:** There are no strings that appear in each of the two arrays.\n\n**Example 3:**\n\n**Input:** words1 = \\[ \"a \", \"ab \"\\], words2 = \\[ \"a \", \"a \", \"a \", \"ab \"\\]\n**Output:** 1\n**Explanation:** The only string that appears exactly once in each of the two arrays is  \"ab \".\n\n**Constraints:**\n\n*   `1 <= words1.length, words2.length <= 1000`\n*   `1 <= words1[i].length, words2[j].length <= 30`\n*   `words1[i]` and `words2[j]` consists only of lowercase English letters."}}
{"2089": {"title": "Find Target Indices After Sorting Array", "difficulty": "Easy", "description": "You are given a **0-indexed** integer array `nums` and a target element `target`.\n\nA **target index** is an index `i` such that `nums[i] == target`.\n\nReturn _a list of the target indices of_ `nums` after _sorting_ `nums` _in **non-decreasing** order_. If there are no target indices, return _an **empty** list_. The returned list must be sorted in **increasing** order.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,5,2,3\\], target = 2\n**Output:** \\[1,2\\]\n**Explanation:** After sorting, nums is \\[1,**2**,**2**,3,5\\].\nThe indices where nums\\[i\\] == 2 are 1 and 2.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,5,2,3\\], target = 3\n**Output:** \\[3\\]\n**Explanation:** After sorting, nums is \\[1,2,2,**3**,5\\].\nThe index where nums\\[i\\] == 3 is 3.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,5,2,3\\], target = 5\n**Output:** \\[4\\]\n**Explanation:** After sorting, nums is \\[1,2,2,3,**5**\\].\nThe index where nums\\[i\\] == 5 is 4.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i], target <= 100`"}}
{"2094": {"title": "Finding 3-Digit Even Numbers", "difficulty": "Easy", "description": "You are given an integer array `digits`, where each element is a digit. The array may contain duplicates.\n\nYou need to find **all** the **unique** integers that follow the given requirements:\n\n*   The integer consists of the **concatenation** of **three** elements from `digits` in **any** arbitrary order.\n*   The integer does not have **leading zeros**.\n*   The integer is **even**.\n\nFor example, if the given `digits` were `[1, 2, 3]`, integers `132` and `312` follow the requirements.\n\nReturn _a **sorted** array of the unique integers._\n\n**Example 1:**\n\n**Input:** digits = \\[2,1,3,0\\]\n**Output:** \\[102,120,130,132,210,230,302,310,312,320\\]\n**Explanation:** All the possible integers that follow the requirements are in the output array. \nNotice that there are no **odd** integers or integers with **leading zeros**.\n\n**Example 2:**\n\n**Input:** digits = \\[2,2,8,8,2\\]\n**Output:** \\[222,228,282,288,822,828,882\\]\n**Explanation:** The same digit can be used as many times as it appears in digits. \nIn this example, the digit 8 is used twice each time in 288, 828, and 882. \n\n**Example 3:**\n\n**Input:** digits = \\[3,7,5\\]\n**Output:** \\[\\]\n**Explanation:** No **even** integers can be formed using the given digits.\n\n**Constraints:**\n\n*   `3 <= digits.length <= 100`\n*   `0 <= digits[i] <= 9`"}}
{"2099": {"title": "Find Subsequence of Length K With the Largest Sum", "difficulty": "Easy", "description": "You are given an integer array `nums` and an integer `k`. You want to find a **subsequence** of `nums` of length `k` that has the **largest** sum.\n\nReturn _**any** such subsequence as an integer array of length_ `k`.\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n**Example 1:**\n\n**Input:** nums = \\[2,1,3,3\\], k = 2\n**Output:** \\[3,3\\]\n**Explanation:**\nThe subsequence has the largest sum of 3 + 3 = 6.\n\n**Example 2:**\n\n**Input:** nums = \\[-1,-2,3,4\\], k = 3\n**Output:** \\[-1,3,4\\]\n**Explanation:** \nThe subsequence has the largest sum of -1 + 3 + 4 = 6.\n\n**Example 3:**\n\n**Input:** nums = \\[3,4,3,3\\], k = 2\n**Output:** \\[3,4\\]\n**Explanation:**\nThe subsequence has the largest sum of 3 + 4 = 7. \nAnother possible subsequence is \\[4, 3\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `-105 <= nums[i] <= 105`\n*   `1 <= k <= nums.length`"}}
{"2103": {"title": "Rings and Rods", "difficulty": "Easy", "description": "There are `n` rings and each ring is either red, green, or blue. The rings are distributed **across ten rods** labeled from `0` to `9`.\n\nYou are given a string `rings` of length `2n` that describes the `n` rings that are placed onto the rods. Every two characters in `rings` forms a **color-position pair** that is used to describe each ring where:\n\n*   The **first** character of the `ith` pair denotes the `ith` ring's **color** (`'R'`, `'G'`, `'B'`).\n*   The **second** character of the `ith` pair denotes the **rod** that the `ith` ring is placed on (`'0'` to `'9'`).\n\nFor example, `\"R3G2B1 \"` describes `n == 3` rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.\n\nReturn _the number of rods that have **all three colors** of rings on them._\n\n**Example 1:**\n\n**Input:** rings =  \"B0B6G0R6R0R6G9 \"\n**Output:** 1\n**Explanation:** \n- The rod labeled 0 holds 3 rings with all colors: red, green, and blue.\n- The rod labeled 6 holds 3 rings, but it only has red and blue.\n- The rod labeled 9 holds only a green ring.\nThus, the number of rods with all three colors is 1.\n\n**Example 2:**\n\n**Input:** rings =  \"B0R0G0R9R0B0G0 \"\n**Output:** 1\n**Explanation:** \n- The rod labeled 0 holds 6 rings with all colors: red, green, and blue.\n- The rod labeled 9 holds only a red ring.\nThus, the number of rods with all three colors is 1.\n\n**Example 3:**\n\n**Input:** rings =  \"G4 \"\n**Output:** 0\n**Explanation:** \nOnly one ring is given. Thus, no rods have all three colors.\n\n**Constraints:**\n\n*   `rings.length == 2 * n`\n*   `1 <= n <= 100`\n*   `rings[i]` where `i` is **even** is either `'R'`, `'G'`, or `'B'` (**0-indexed**).\n*   `rings[i]` where `i` is **odd** is a digit from `'0'` to `'9'` (**0-indexed**)."}}
{"2108": {"title": "Find First Palindromic String in the Array", "difficulty": "Easy", "description": "Given an array of strings `words`, return _the first **palindromic** string in the array_. If there is no such string, return _an **empty string**_ `\" \"`.\n\nA string is **palindromic** if it reads the same forward and backward.\n\n**Example 1:**\n\n**Input:** words = \\[ \"abc \", \"car \", \"ada \", \"racecar \", \"cool \"\\]\n**Output:**  \"ada \"\n**Explanation:** The first string that is palindromic is  \"ada \".\nNote that  \"racecar \" is also palindromic, but it is not the first.\n\n**Example 2:**\n\n**Input:** words = \\[ \"notapalindrome \", \"racecar \"\\]\n**Output:**  \"racecar \"\n**Explanation:** The first and only string that is palindromic is  \"racecar \".\n\n**Example 3:**\n\n**Input:** words = \\[ \"def \", \"ghi \"\\]\n**Output:**  \" \"\n**Explanation:** There are no palindromic strings, so the empty string is returned.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 100`\n*   `words[i]` consists only of lowercase English letters."}}
{"2114": {"title": "Maximum Number of Words Found in Sentences", "difficulty": "Easy", "description": "A **sentence** is a list of **words** that are separated by a single space with no leading or trailing spaces.\n\nYou are given an array of strings `sentences`, where each `sentences[i]` represents a single **sentence**.\n\nReturn _the **maximum number of words** that appear in a single sentence_.\n\n**Example 1:**\n\n**Input:** sentences = \\[ \"alice and bob love leetcode \",  \"i think so too \",  \"this is great thanks very much \"\\]\n**Output:** 6\n**Explanation:** \n- The first sentence,  \"alice and bob love leetcode \", has 5 words in total.\n- The second sentence,  \"i think so too \", has 4 words in total.\n- The third sentence,  \"this is great thanks very much \", has 6 words in total.\nThus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words.\n\n**Example 2:**\n\n**Input:** sentences = \\[ \"please wait \",  \"continue to fight \",  \"continue to win \"\\]\n**Output:** 3\n**Explanation:** It is possible that multiple sentences contain the same number of words. \nIn this example, the second and third sentences (underlined) have the same number of words.\n\n**Constraints:**\n\n*   `1 <= sentences.length <= 100`\n*   `1 <= sentences[i].length <= 100`\n*   `sentences[i]` consists only of lowercase English letters and `' '` only.\n*   `sentences[i]` does not have leading or trailing spaces.\n*   All the words in `sentences[i]` are separated by a single space."}}
{"2119": {"title": "A Number After a Double Reversal", "difficulty": "Easy", "description": "**Reversing** an integer means to reverse all its digits.\n\n*   For example, reversing `2021` gives `1202`. Reversing `12300` gives `321` as the **leading zeros are not retained**.\n\nGiven an integer `num`, **reverse** `num` to get `reversed1`, **then reverse** `reversed1` to get `reversed2`. Return `true` _if_ `reversed2` _equals_ `num`. Otherwise return `false`.\n\n**Example 1:**\n\n**Input:** num = 526\n**Output:** true\n**Explanation:** Reverse num to get 625, then reverse 625 to get 526, which equals num.\n\n**Example 2:**\n\n**Input:** num = 1800\n**Output:** false\n**Explanation:** Reverse num to get 81, then reverse 81 to get 18, which does not equal num.\n\n**Example 3:**\n\n**Input:** num = 0\n**Output:** true\n**Explanation:** Reverse num to get 0, then reverse 0 to get 0, which equals num.\n\n**Constraints:**\n\n*   `0 <= num <= 106`"}}
{"2124": {"title": "Check if All A's Appears Before All B's", "difficulty": "Easy", "description": "Given a string `s` consisting of **only** the characters `'a'` and `'b'`, return `true` _if **every**_ `'a'` _appears before **every**_ `'b'` _in the string_. Otherwise, return `false`.\n\n**Example 1:**\n\n**Input:** s =  \"aaabbb \"\n**Output:** true\n**Explanation:**\nThe 'a's are at indices 0, 1, and 2, while the 'b's are at indices 3, 4, and 5.\nHence, every 'a' appears before every 'b' and we return true.\n\n**Example 2:**\n\n**Input:** s =  \"abab \"\n**Output:** false\n**Explanation:**\nThere is an 'a' at index 2 and a 'b' at index 1.\nHence, not every 'a' appears before every 'b' and we return false.\n\n**Example 3:**\n\n**Input:** s =  \"bbb \"\n**Output:** true\n**Explanation:**\nThere are no 'a's, hence, every 'a' appears before every 'b' and we return true.\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s[i]` is either `'a'` or `'b'`."}}
{"2129": {"title": "Capitalize the Title", "difficulty": "Easy", "description": "You are given a string `title` consisting of one or more words separated by a single space, where each word consists of English letters. **Capitalize** the string by changing the capitalization of each word such that:\n\n*   If the length of the word is `1` or `2` letters, change all letters to lowercase.\n*   Otherwise, change the first letter to uppercase and the remaining letters to lowercase.\n\nReturn _the **capitalized**_ `title`.\n\n**Example 1:**\n\n**Input:** title =  \"capiTalIze tHe titLe \"\n**Output:**  \"Capitalize The Title \"\n**Explanation:**\nSince all the words have a length of at least 3, the first letter of each word is uppercase, and the remaining letters are lowercase.\n\n**Example 2:**\n\n**Input:** title =  \"First leTTeR of EACH Word \"\n**Output:**  \"First Letter of Each Word \"\n**Explanation:**\nThe word  \"of \" has length 2, so it is all lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.\n\n**Example 3:**\n\n**Input:** title =  \"i lOve leetcode \"\n**Output:**  \"i Love Leetcode \"\n**Explanation:**\nThe word  \"i \" has length 1, so it is lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.\n\n**Constraints:**\n\n*   `1 <= title.length <= 100`\n*   `title` consists of words separated by a single space without any leading or trailing spaces.\n*   Each word consists of uppercase and lowercase English letters and is **non-empty**."}}
{"2133": {"title": "Check if Every Row and Column Contains All Numbers", "difficulty": "Easy", "description": "An `n x n` matrix is **valid** if every row and every column contains **all** the integers from `1` to `n` (**inclusive**).\n\nGiven an `n x n` integer matrix `matrix`, return `true` _if the matrix is **valid**._ Otherwise, return `false`.\n\n**Example 1:**\n\n**Input:** matrix = \\[\\[1,2,3\\],\\[3,1,2\\],\\[2,3,1\\]\\]\n**Output:** true\n**Explanation:** In this case, n = 3, and every row and column contains the numbers 1, 2, and 3.\nHence, we return true.\n\n**Example 2:**\n\n**Input:** matrix = \\[\\[1,1,1\\],\\[1,2,3\\],\\[1,2,3\\]\\]\n**Output:** false\n**Explanation:** In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3.\nHence, we return false.\n\n**Constraints:**\n\n*   `n == matrix.length == matrix[i].length`\n*   `1 <= n <= 100`\n*   `1 <= matrix[i][j] <= n`"}}
{"2138": {"title": "Divide a String Into Groups of Size k", "difficulty": "Easy", "description": "A string `s` can be partitioned into groups of size `k` using the following procedure:\n\n*   The first group consists of the first `k` characters of the string, the second group consists of the next `k` characters of the string, and so on. Each character can be a part of **exactly one** group.\n*   For the last group, if the string **does not** have `k` characters remaining, a character `fill` is used to complete the group.\n\nNote that the partition is done so that after removing the `fill` character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be `s`.\n\nGiven the string `s`, the size of each group `k` and the character `fill`, return _a string array denoting the **composition of every group**_ `s` _has been divided into, using the above procedure_.\n\n**Example 1:**\n\n**Input:** s =  \"abcdefghi \", k = 3, fill =  \"x \"\n**Output:** \\[ \"abc \", \"def \", \"ghi \"\\]\n**Explanation:**\nThe first 3 characters  \"abc \" form the first group.\nThe next 3 characters  \"def \" form the second group.\nThe last 3 characters  \"ghi \" form the third group.\nSince all groups can be completely filled by characters from the string, we do not need to use fill.\nThus, the groups formed are  \"abc \",  \"def \", and  \"ghi \".\n\n**Example 2:**\n\n**Input:** s =  \"abcdefghij \", k = 3, fill =  \"x \"\n**Output:** \\[ \"abc \", \"def \", \"ghi \", \"jxx \"\\]\n**Explanation:**\nSimilar to the previous example, we are forming the first three groups  \"abc \",  \"def \", and  \"ghi \".\nFor the last group, we can only use the character 'j' from the string. To complete this group, we add 'x' twice.\nThus, the 4 groups formed are  \"abc \",  \"def \",  \"ghi \", and  \"jxx \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists of lowercase English letters only.\n*   `1 <= k <= 100`\n*   `fill` is a lowercase English letter."}}
{"2144": {"title": "Minimum Cost of Buying Candies With Discount", "difficulty": "Easy", "description": "A shop is selling candies at a discount. For **every two** candies sold, the shop gives a **third** candy for **free**.\n\nThe customer can choose **any** candy to take away for free as long as the cost of the chosen candy is less than or equal to the **minimum** cost of the two candies bought.\n\n*   For example, if there are `4` candies with costs `1`, `2`, `3`, and `4`, and the customer buys candies with costs `2` and `3`, they can take the candy with cost `1` for free, but not the candy with cost `4`.\n\nGiven a **0-indexed** integer array `cost`, where `cost[i]` denotes the cost of the `ith` candy, return _the **minimum cost** of buying **all** the candies_.\n\n**Example 1:**\n\n**Input:** cost = \\[1,2,3\\]\n**Output:** 5\n**Explanation:** We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.\nThe total cost of buying all candies is 2 + 3 = 5. This is the **only** way we can buy the candies.\nNote that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free.\nThe cost of the free candy has to be less than or equal to the minimum cost of the purchased candies.\n\n**Example 2:**\n\n**Input:** cost = \\[6,5,7,9,2,2\\]\n**Output:** 23\n**Explanation:** The way in which we can get the minimum cost is described below:\n- Buy candies with costs 9 and 7\n- Take the candy with cost 6 for free\n- We buy candies with costs 5 and 2\n- Take the last remaining candy with cost 2 for free\nHence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23.\n\n**Example 3:**\n\n**Input:** cost = \\[5,5\\]\n**Output:** 10\n**Explanation:** Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.\nHence, the minimum cost to buy all candies is 5 + 5 = 10.\n\n**Constraints:**\n\n*   `1 <= cost.length <= 100`\n*   `1 <= cost[i] <= 100`"}}
{"2148": {"title": "Count Elements With Strictly Smaller and Greater Elements ", "difficulty": "Easy", "description": "Given an integer array `nums`, return _the number of elements that have **both** a strictly smaller and a strictly greater element appear in_ `nums`.\n\n**Example 1:**\n\n**Input:** nums = \\[11,7,2,15\\]\n**Output:** 2\n**Explanation:** The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it.\nElement 11 has element 7 strictly smaller than it and element 15 strictly greater than it.\nIn total there are 2 elements having both a strictly smaller and a strictly greater element appear in `nums`.\n\n**Example 2:**\n\n**Input:** nums = \\[-3,3,3,90\\]\n**Output:** 2\n**Explanation:** The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it.\nSince there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in `nums`.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `-105 <= nums[i] <= 105`"}}
{"2154": {"title": "Keep Multiplying Found Values by Two", "difficulty": "Easy", "description": "You are given an array of integers `nums`. You are also given an integer `original` which is the first number that needs to be searched for in `nums`.\n\nYou then do the following steps:\n\n1.  If `original` is found in `nums`, **multiply** it by two (i.e., set `original = 2 * original`).\n2.  Otherwise, **stop** the process.\n3.  **Repeat** this process with the new number as long as you keep finding the number.\n\nReturn _the **final** value of_ `original`.\n\n**Example 1:**\n\n**Input:** nums = \\[5,3,6,1,12\\], original = 3\n**Output:** 24\n**Explanation:** \n- 3 is found in nums. 3 is multiplied by 2 to obtain 6.\n- 6 is found in nums. 6 is multiplied by 2 to obtain 12.\n- 12 is found in nums. 12 is multiplied by 2 to obtain 24.\n- 24 is not found in nums. Thus, 24 is returned.\n\n**Example 2:**\n\n**Input:** nums = \\[2,7,9\\], original = 4\n**Output:** 4\n**Explanation:**\n- 4 is not found in nums. Thus, 4 is returned.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i], original <= 1000`"}}
{"2160": {"title": "Minimum Sum of Four Digit Number After Splitting Digits", "difficulty": "Easy", "description": "You are given a **positive** integer `num` consisting of exactly four digits. Split `num` into two new integers `new1` and `new2` by using the **digits** found in `num`. **Leading zeros** are allowed in `new1` and `new2`, and **all** the digits found in `num` must be used.\n\n*   For example, given `num = 2932`, you have the following digits: two `2`'s, one `9` and one `3`. Some of the possible pairs `[new1, new2]` are `[22, 93]`, `[23, 92]`, `[223, 9]` and `[2, 329]`.\n\nReturn _the **minimum** possible sum of_ `new1` _and_ `new2`.\n\n**Example 1:**\n\n**Input:** num = 2932\n**Output:** 52\n**Explanation:** Some possible pairs \\[new1, new2\\] are \\[29, 23\\], \\[223, 9\\], etc.\nThe minimum sum can be obtained by the pair \\[29, 23\\]: 29 + 23 = 52.\n\n**Example 2:**\n\n**Input:** num = 4009\n**Output:** 13\n**Explanation:** Some possible pairs \\[new1, new2\\] are \\[0, 49\\], \\[490, 0\\], etc. \nThe minimum sum can be obtained by the pair \\[4, 9\\]: 4 + 9 = 13.\n\n**Constraints:**\n\n*   `1000 <= num <= 9999`"}}
{"2164": {"title": "Sort Even and Odd Indices Independently", "difficulty": "Easy", "description": "You are given a **0-indexed** integer array `nums`. Rearrange the values of `nums` according to the following rules:\n\n1.  Sort the values at **odd indices** of `nums` in **non-increasing** order.\n    *   For example, if `nums = [4,**1**,2,**3**]` before this step, it becomes `[4,**3**,2,**1**]` after. The values at odd indices `1` and `3` are sorted in non-increasing order.\n2.  Sort the values at **even indices** of `nums` in **non-decreasing** order.\n    *   For example, if `nums = [**4**,1,**2**,3]` before this step, it becomes `[**2**,1,**4**,3]` after. The values at even indices `0` and `2` are sorted in non-decreasing order.\n\nReturn _the array formed after rearranging the values of_ `nums`.\n\n**Example 1:**\n\n**Input:** nums = \\[4,1,2,3\\]\n**Output:** \\[2,3,4,1\\]\n**Explanation:** \nFirst, we sort the values present at odd indices (1 and 3) in non-increasing order.\nSo, nums changes from \\[4,**1**,2,**3**\\] to \\[4,**3**,2,**1**\\].\nNext, we sort the values present at even indices (0 and 2) in non-decreasing order.\nSo, nums changes from \\[**4**,1,**2**,3\\] to \\[**2**,3,**4**,1\\].\nThus, the array formed after rearranging the values is \\[2,3,4,1\\].\n\n**Example 2:**\n\n**Input:** nums = \\[2,1\\]\n**Output:** \\[2,1\\]\n**Explanation:** \nSince there is exactly one odd index and one even index, no rearrangement of values takes place.\nThe resultant array formed is \\[2,1\\], which is the same as the initial array. \n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i] <= 100`"}}
{"2176": {"title": "Count Equal and Divisible Pairs in an Array", "difficulty": "Easy", "description": "Given a **0-indexed** integer array `nums` of length `n` and an integer `k`, return _the **number of pairs**_ `(i, j)` _where_ `0 <= i < j < n`, _such that_ `nums[i] == nums[j]` _and_ `(i * j)` _is divisible by_ `k`.\n\n**Example 1:**\n\n**Input:** nums = \\[3,1,2,2,2,1,3\\], k = 2\n**Output:** 4\n**Explanation:**\nThere are 4 pairs that meet all the requirements:\n- nums\\[0\\] == nums\\[6\\], and 0 \\* 6 == 0, which is divisible by 2.\n- nums\\[2\\] == nums\\[3\\], and 2 \\* 3 == 6, which is divisible by 2.\n- nums\\[2\\] == nums\\[4\\], and 2 \\* 4 == 8, which is divisible by 2.\n- nums\\[3\\] == nums\\[4\\], and 3 \\* 4 == 12, which is divisible by 2.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\], k = 1\n**Output:** 0\n**Explanation:** Since no value in nums is repeated, there are no pairs (i,j) that meet all the requirements.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i], k <= 100`"}}
{"2180": {"title": "Count Integers With Even Digit Sum", "difficulty": "Easy", "description": "Given a positive integer `num`, return _the number of positive integers **less than or equal to**_ `num` _whose digit sums are **even**_.\n\nThe **digit sum** of a positive integer is the sum of all its digits.\n\n**Example 1:**\n\n**Input:** num = 4\n**Output:** 2\n**Explanation:**\nThe only integers less than or equal to 4 whose digit sums are even are 2 and 4.    \n\n**Example 2:**\n\n**Input:** num = 30\n**Output:** 14\n**Explanation:**\nThe 14 integers less than or equal to 30 whose digit sums are even are\n2, 4, 6, 8, 11, 13, 15, 17, 19, 20, 22, 24, 26, and 28.\n\n**Constraints:**\n\n*   `1 <= num <= 1000`"}}
{"2185": {"title": "Counting Words With a Given Prefix", "difficulty": "Easy", "description": "You are given an array of strings `words` and a string `pref`.\n\nReturn _the number of strings in_ `words` _that contain_ `pref` _as a **prefix**_.\n\nA **prefix** of a string `s` is any leading contiguous substring of `s`.\n\n**Example 1:**\n\n**Input:** words = \\[ \"pay \", \"**at**tention \", \"practice \", \"**at**tend \"\\], `pref` \\=  \"at \"\n**Output:** 2\n**Explanation:** The 2 strings that contain  \"at \" as a prefix are:  \"**at**tention \" and  \"**at**tend \".\n\n**Example 2:**\n\n**Input:** words = \\[ \"leetcode \", \"win \", \"loops \", \"success \"\\], `pref` \\=  \"code \"\n**Output:** 0\n**Explanation:** There are no strings that contain  \"code \" as a prefix.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length, pref.length <= 100`\n*   `words[i]` and `pref` consist of lowercase English letters."}}
{"2190": {"title": "Most Frequent Number Following Key In an Array", "difficulty": "Easy", "description": "You are given a **0-indexed** integer array `nums`. You are also given an integer `key`, which is present in `nums`.\n\nFor every unique integer `target` in `nums`, **count** the number of times `target` immediately follows an occurrence of `key` in `nums`. In other words, count the number of indices `i` such that:\n\n*   `0 <= i <= nums.length - 2`,\n*   `nums[i] == key` and,\n*   `nums[i + 1] == target`.\n\nReturn _the_ `target` _with the **maximum** count_. The test cases will be generated such that the `target` with maximum count is unique.\n\n**Example 1:**\n\n**Input:** nums = \\[1,100,200,1,100\\], key = 1\n**Output:** 100\n**Explanation:** For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key.\nNo other integers follow an occurrence of key, so we return 100.\n\n**Example 2:**\n\n**Input:** nums = \\[2,2,2,2,3\\], key = 2\n**Output:** 2\n**Explanation:** For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key.\nFor target = 3, there is only one occurrence at index 4 which follows an occurrence of key.\ntarget = 2 has the maximum number of occurrences following an occurrence of key, so we return 2.\n\n**Constraints:**\n\n*   `2 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 1000`\n*   The test cases will be generated such that the answer is unique."}}
{"2194": {"title": "Cells in a Range on an Excel Sheet", "difficulty": "Easy", "description": "A cell `(r, c)` of an excel sheet is represented as a string `\" \"` where:\n\n*   denotes the column number `c` of the cell. It is represented by **alphabetical letters**.\n    *   For example, the `1st` column is denoted by `'A'`, the `2nd` by `'B'`, the `3rd` by `'C'`, and so on.\n*   is the row number `r` of the cell. The `rth` row is represented by the **integer** `r`.\n\nYou are given a string `s` in the format `\": \"`, where represents the column `c1`, represents the row `r1`, represents the column `c2`, and represents the row `r2`, such that `r1 <= r2` and `c1 <= c2`.\n\nReturn _the **list of cells**_ `(x, y)` _such that_ `r1 <= x <= r2` _and_ `c1 <= y <= c2`. The cells should be represented as **strings** in the format mentioned above and be sorted in **non-decreasing** order first by columns and then by rows.\n\n**Example 1:**\n\n**Input:** s =  \"K1:L2 \"\n**Output:** \\[ \"K1 \", \"K2 \", \"L1 \", \"L2 \"\\]\n**Explanation:**\nThe above diagram shows the cells which should be present in the list.\nThe red arrows denote the order in which the cells should be presented.\n\n**Example 2:**\n\n**Input:** s =  \"A1:F1 \"\n**Output:** \\[ \"A1 \", \"B1 \", \"C1 \", \"D1 \", \"E1 \", \"F1 \"\\]\n**Explanation:**\nThe above diagram shows the cells which should be present in the list.\nThe red arrow denotes the order in which the cells should be presented.\n\n**Constraints:**\n\n*   `s.length == 5`\n*   `'A' <= s[0] <= s[3] <= 'Z'`\n*   `'1' <= s[1] <= s[4] <= '9'`\n*   `s` consists of uppercase English letters, digits and `':'`."}}
{"2200": {"title": "Find All K-Distant Indices in an Array", "difficulty": "Easy", "description": "You are given a **0-indexed** integer array `nums` and two integers `key` and `k`. A **k-distant index** is an index `i` of `nums` for which there exists at least one index `j` such that `|i - j| <= k` and `nums[j] == key`.\n\nReturn _a list of all k-distant indices sorted in **increasing order**_.\n\n**Example 1:**\n\n**Input:** nums = \\[3,4,9,1,3,9,5\\], key = 9, k = 1\n**Output:** \\[1,2,3,4,5,6\\]\n**Explanation:** Here, `nums[2] == key` and `nums[5] == key. - For index 0, |0 - 2| > k and |0 - 5| > k, so there is no j` where `|0 - j| <= k` and `nums[j] == key. Thus, 0 is not a k-distant index. - For index 1, |1 - 2| <= k and nums[2] == key, so 1 is a k-distant index. - For index 2, |2 - 2| <= k and nums[2] == key, so 2 is a k-distant index. - For index 3, |3 - 2| <= k and nums[2] == key, so 3 is a k-distant index. - For index 4, |4 - 5| <= k and nums[5] == key, so 4 is a k-distant index. - For index 5, |5 - 5| <= k and nums[5] == key, so 5 is a k-distant index. - For index 6, |6 - 5| <= k and nums[5] == key, so 6 is a k-distant index.`\nThus, we return \\[1,2,3,4,5,6\\] which is sorted in increasing order. \n\n**Example 2:**\n\n**Input:** nums = \\[2,2,2,2,2\\], key = 2, k = 2\n**Output:** \\[0,1,2,3,4\\]\n**Explanation:** For all indices i in nums, there exists some index j such that |i - j| <= k and nums\\[j\\] == key, so every index is a k-distant index. \nHence, we return \\[0,1,2,3,4\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 1000`\n*   `key` is an integer from the array `nums`.\n*   `1 <= k <= nums.length`"}}
{"2206": {"title": "Divide Array Into Equal Pairs", "difficulty": "Easy", "description": "You are given an integer array `nums` consisting of `2 * n` integers.\n\nYou need to divide `nums` into `n` pairs such that:\n\n*   Each element belongs to **exactly one** pair.\n*   The elements present in a pair are **equal**.\n\nReturn `true` _if nums can be divided into_ `n` _pairs, otherwise return_ `false`.\n\n**Example 1:**\n\n**Input:** nums = \\[3,2,3,2,2,2\\]\n**Output:** true\n**Explanation:** \nThere are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs.\nIf nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** false\n**Explanation:** \nThere is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition.\n\n**Constraints:**\n\n*   `nums.length == 2 * n`\n*   `1 <= n <= 500`\n*   `1 <= nums[i] <= 500`"}}
{"2210": {"title": "Count Hills and Valleys in an Array", "difficulty": "Easy", "description": "You are given a **0-indexed** integer array `nums`. An index `i` is part of a **hill** in `nums` if the closest non-equal neighbors of `i` are smaller than `nums[i]`. Similarly, an index `i` is part of a **valley** in `nums` if the closest non-equal neighbors of `i` are larger than `nums[i]`. Adjacent indices `i` and `j` are part of the **same** hill or valley if `nums[i] == nums[j]`.\n\nNote that for an index to be part of a hill or valley, it must have a non-equal neighbor on **both** the left and right of the index.\n\nReturn _the number of hills and valleys in_ `nums`.\n\n**Example 1:**\n\n**Input:** nums = \\[2,4,1,1,6,5\\]\n**Output:** 3\n**Explanation:**\nAt index 0: There is no non-equal neighbor of 2 on the left, so index 0 is neither a hill nor a valley.\nAt index 1: The closest non-equal neighbors of 4 are 2 and 1. Since 4 > 2 and 4 > 1, index 1 is a hill. \nAt index 2: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 2 is a valley.\nAt index 3: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 3 is a valley, but note that it is part of the same valley as index 2.\nAt index 4: The closest non-equal neighbors of 6 are 1 and 5. Since 6 > 1 and 6 > 5, index 4 is a hill.\nAt index 5: There is no non-equal neighbor of 5 on the right, so index 5 is neither a hill nor a valley. \nThere are 3 hills and valleys so we return 3.\n\n**Example 2:**\n\n**Input:** nums = \\[6,6,5,5,4,1\\]\n**Output:** 0\n**Explanation:**\nAt index 0: There is no non-equal neighbor of 6 on the left, so index 0 is neither a hill nor a valley.\nAt index 1: There is no non-equal neighbor of 6 on the left, so index 1 is neither a hill nor a valley.\nAt index 2: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 2 is neither a hill nor a valley.\nAt index 3: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 3 is neither a hill nor a valley.\nAt index 4: The closest non-equal neighbors of 4 are 5 and 1. Since 4 < 5 and 4 > 1, index 4 is neither a hill nor a valley.\nAt index 5: There is no non-equal neighbor of 1 on the right, so index 5 is neither a hill nor a valley.\nThere are 0 hills and valleys so we return 0.\n\n**Constraints:**\n\n*   `3 <= nums.length <= 100`\n*   `1 <= nums[i] <= 100`"}}
{"2215": {"title": "Find the Difference of Two Arrays", "difficulty": "Easy", "description": "Given two **0-indexed** integer arrays `nums1` and `nums2`, return _a list_ `answer` _of size_ `2` _where:_\n\n*   `answer[0]` _is a list of all **distinct** integers in_ `nums1` _which are **not** present in_ `nums2`_._\n*   `answer[1]` _is a list of all **distinct** integers in_ `nums2` _which are **not** present in_ `nums1`.\n\n**Note** that the integers in the lists may be returned in **any** order.\n\n**Example 1:**\n\n**Input:** nums1 = \\[1,2,3\\], nums2 = \\[2,4,6\\]\n**Output:** \\[\\[1,3\\],\\[4,6\\]\\]\n**Explanation:**\nFor nums1, nums1\\[1\\] = 2 is present at index 0 of nums2, whereas nums1\\[0\\] = 1 and nums1\\[2\\] = 3 are not present in nums2. Therefore, answer\\[0\\] = \\[1,3\\].\nFor nums2, nums2\\[0\\] = 2 is present at index 1 of nums1, whereas nums2\\[1\\] = 4 and nums2\\[2\\] = 6 are not present in nums2. Therefore, answer\\[1\\] = \\[4,6\\].\n\n**Example 2:**\n\n**Input:** nums1 = \\[1,2,3,3\\], nums2 = \\[1,1,2,2\\]\n**Output:** \\[\\[3\\],\\[\\]\\]\n**Explanation:**\nFor nums1, nums1\\[2\\] and nums1\\[3\\] are not present in nums2. Since nums1\\[2\\] == nums1\\[3\\], their value is only included once and answer\\[0\\] = \\[3\\].\nEvery integer in nums2 is present in nums1. Therefore, answer\\[1\\] = \\[\\].\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 1000`\n*   `-1000 <= nums1[i], nums2[i] <= 1000`"}}
{"2220": {"title": "Minimum Bit Flips to Convert Number", "difficulty": "Easy", "description": "A **bit flip** of a number `x` is choosing a bit in the binary representation of `x` and **flipping** it from either `0` to `1` or `1` to `0`.\n\n*   For example, for `x = 7`, the binary representation is `111` and we may choose any bit (including any leading zeros not shown) and flip it. We can flip the first bit from the right to get `110`, flip the second bit from the right to get `101`, flip the fifth bit from the right (a leading zero) to get `10111`, etc.\n\nGiven two integers `start` and `goal`, return _the **minimum** number of **bit flips** to convert_ `start` _to_ `goal`.\n\n**Example 1:**\n\n**Input:** start = 10, goal = 7\n**Output:** 3\n**Explanation:** The binary representation of 10 and 7 are 1010 and 0111 respectively. We can convert 10 to 7 in 3 steps:\n- Flip the first bit from the right: 1010 -> 1011.\n- Flip the third bit from the right: 1011 -> 1111.\n- Flip the fourth bit from the right: 1111 -> 0111.\nIt can be shown we cannot convert 10 to 7 in less than 3 steps. Hence, we return 3.\n\n**Example 2:**\n\n**Input:** start = 3, goal = 4\n**Output:** 3\n**Explanation:** The binary representation of 3 and 4 are 011 and 100 respectively. We can convert 3 to 4 in 3 steps:\n- Flip the first bit from the right: 011 -> 010.\n- Flip the second bit from the right: 010 -> 000.\n- Flip the third bit from the right: 000 -> 100.\nIt can be shown we cannot convert 3 to 4 in less than 3 steps. Hence, we return 3.\n\n**Constraints:**\n\n*   `0 <= start, goal <= 109`"}}
{"2224": {"title": "Minimum Number of Operations to Convert Time", "difficulty": "Easy", "description": "You are given two strings `current` and `correct` representing two **24-hour times**.\n\n24-hour times are formatted as `\"HH:MM \"`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`.\n\nIn one operation you can increase the time `current` by `1`, `5`, `15`, or `60` minutes. You can perform this operation **any** number of times.\n\nReturn _the **minimum number of operations** needed to convert_ `current` _to_ `correct`.\n\n**Example 1:**\n\n**Input:** current =  \"02:30 \", correct =  \"04:35 \"\n**Output:** 3\n**Explanation:**\nWe can convert current to correct in 3 operations as follows:\n- Add 60 minutes to current. current becomes  \"03:30 \".\n- Add 60 minutes to current. current becomes  \"04:30 \".\n- Add 5 minutes to current. current becomes  \"04:35 \".\nIt can be proven that it is not possible to convert current to correct in fewer than 3 operations.\n\n**Example 2:**\n\n**Input:** current =  \"11:00 \", correct =  \"11:01 \"\n**Output:** 1\n**Explanation:** We only have to add one minute to current, so the minimum number of operations needed is 1.\n\n**Constraints:**\n\n*   `current` and `correct` are in the format `\"HH:MM \"`\n*   `current <= correct`"}}
{"2229": {"title": "Check if an Array Is Consecutive", "difficulty": "Easy", "description": "Given an integer array `nums`, return `true` _if_ `nums` _is **consecutive**, otherwise return_ `false`_._\n\nAn array is **consecutive** if it contains every number in the range `[x, x + n - 1]` (**inclusive**), where `x` is the minimum number in the array and `n` is the length of the array.\n\n**Example 1:**\n\n**Input:** nums = \\[1,3,4,2\\]\n**Output:** true\n**Explanation:**\nThe minimum value is 1 and the length of nums is 4.\nAll of the values in the range \\[x, x + n - 1\\] = \\[1, 1 + 4 - 1\\] = \\[1, 4\\] = (1, 2, 3, 4) occur in nums.\nTherefore, nums is consecutive.\n\n**Example 2:**\n\n**Input:** nums = \\[1,3\\]\n**Output:** false\n**Explanation:**\nThe minimum value is 1 and the length of nums is 2.\nThe value 2 in the range \\[x, x + n - 1\\] = \\[1, 1 + 2 - 1\\], = \\[1, 2\\] = (1, 2) does not occur in nums.\nTherefore, nums is not consecutive.\n\n**Example 3:**\n\n**Input:** nums = \\[3,5,4\\]\n**Output:** true\n**Explanation:**\nThe minimum value is 3 and the length of nums is 3.\nAll of the values in the range \\[x, x + n - 1\\] = \\[3, 3 + 3 - 1\\] = \\[3, 5\\] = (3, 4, 5) occur in nums.\nTherefore, nums is consecutive.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 105`\n*   `0 <= nums[i] <= 105`"}}
{"2231": {"title": "Largest Number After Digit Swaps by Parity", "difficulty": "Easy", "description": "You are given a positive integer `num`. You may swap any two digits of `num` that have the same **parity** (i.e. both odd digits or both even digits).\n\nReturn _the **largest** possible value of_ `num` _after **any** number of swaps._\n\n**Example 1:**\n\n**Input:** num = 1234\n**Output:** 3412\n**Explanation:** Swap the digit 3 with the digit 1, this results in the number 3214.\nSwap the digit 2 with the digit 4, this results in the number 3412.\nNote that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number.\nAlso note that we may not swap the digit 4 with the digit 1 since they are of different parities.\n\n**Example 2:**\n\n**Input:** num = 65875\n**Output:** 87655\n**Explanation:** Swap the digit 8 with the digit 6, this results in the number 85675.\nSwap the first digit 5 with the digit 7, this results in the number 87655.\nNote that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number.\n\n**Constraints:**\n\n*   `1 <= num <= 109`"}}
{"2235": {"title": "Add Two Integers", "difficulty": "Easy", "description": "Given two integers `num1` and `num2`, return _the **sum** of the two integers_.\n\n**Example 1:**\n\n**Input:** num1 = 12, num2 = 5\n**Output:** 17\n**Explanation:** num1 is 12, num2 is 5, and their sum is 12 + 5 = 17, so 17 is returned.\n\n**Example 2:**\n\n**Input:** num1 = -10, num2 = 4\n**Output:** -6\n**Explanation:** num1 + num2 = -6, so -6 is returned.\n\n**Constraints:**\n\n*   `-100 <= num1, num2 <= 100`"}}
{"2236": {"title": "Root Equals Sum of Children", "difficulty": "Easy", "description": "You are given the `root` of a **binary tree** that consists of exactly `3` nodes: the root, its left child, and its right child.\n\nReturn `true` _if the value of the root is equal to the **sum** of the values of its two children, or_ `false` _otherwise_.\n\n**Example 1:**\n\n**Input:** root = \\[10,4,6\\]\n**Output:** true\n**Explanation:** The values of the root, its left child, and its right child are 10, 4, and 6, respectively.\n10 is equal to 4 + 6, so we return true.\n\n**Example 2:**\n\n**Input:** root = \\[5,3,1\\]\n**Output:** false\n**Explanation:** The values of the root, its left child, and its right child are 5, 3, and 1, respectively.\n5 is not equal to 3 + 1, so we return false.\n\n**Constraints:**\n\n*   The tree consists only of the root, its left child, and its right child.\n*   `-100 <= Node.val <= 100`"}}
{"2239": {"title": "Find Closest Number to Zero", "difficulty": "Easy", "description": "Given an integer array `nums` of size `n`, return _the number with the value **closest** to_ `0` _in_ `nums`. If there are multiple answers, return _the number with the **largest** value_.\n\n**Example 1:**\n\n**Input:** nums = \\[-4,-2,1,4,8\\]\n**Output:** 1\n**Explanation:**\nThe distance from -4 to 0 is |-4| = 4.\nThe distance from -2 to 0 is |-2| = 2.\nThe distance from 1 to 0 is |1| = 1.\nThe distance from 4 to 0 is |4| = 4.\nThe distance from 8 to 0 is |8| = 8.\nThus, the closest number to 0 in the array is 1.\n\n**Example 2:**\n\n**Input:** nums = \\[2,-1,1\\]\n**Output:** 1\n**Explanation:** 1 and -1 are both the closest numbers to 0, so 1 being larger is returned.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`\n*   `-105 <= nums[i] <= 105`"}}
{"2243": {"title": "Calculate Digit Sum of a String", "difficulty": "Easy", "description": "You are given a string `s` consisting of digits and an integer `k`.\n\nA **round** can be completed if the length of `s` is greater than `k`. In one round, do the following:\n\n1.  **Divide** `s` into **consecutive groups** of size `k` such that the first `k` characters are in the first group, the next `k` characters are in the second group, and so on. **Note** that the size of the last group can be smaller than `k`.\n2.  **Replace** each group of `s` with a string representing the sum of all its digits. For example, `\"346 \"` is replaced with `\"13 \"` because `3 + 4 + 6 = 13`.\n3.  **Merge** consecutive groups together to form a new string. If the length of the string is greater than `k`, repeat from step `1`.\n\nReturn `s` _after all rounds have been completed_.\n\n**Example 1:**\n\n**Input:** s =  \"11111222223 \", k = 3\n**Output:**  \"135 \"\n**Explanation:** \n- For the first round, we divide s into groups of size 3:  \"111 \",  \"112 \",  \"222 \", and  \"23 \".\n  ​​​​​Then we calculate the digit sum of each group: 1 + 1 + 1 = 3, 1 + 1 + 2 = 4, 2 + 2 + 2 = 6, and 2 + 3 = 5. \n  So, s becomes  \"3 \" +  \"4 \" +  \"6 \" +  \"5 \" =  \"3465 \" after the first round.\n- For the second round, we divide s into  \"346 \" and  \"5 \".\n  Then we calculate the digit sum of each group: 3 + 4 + 6 = 13, 5 = 5. \n  So, s becomes  \"13 \" +  \"5 \" =  \"135 \" after second round. \nNow, s.length <= k, so we return  \"135 \" as the answer.\n\n**Example 2:**\n\n**Input:** s =  \"00000000 \", k = 3\n**Output:**  \"000 \"\n**Explanation:** \nWe divide s into  \"000 \",  \"000 \", and  \"00 \".\nThen we calculate the digit sum of each group: 0 + 0 + 0 = 0, 0 + 0 + 0 = 0, and 0 + 0 = 0. \ns becomes  \"0 \" +  \"0 \" +  \"0 \" =  \"000 \", whose length is equal to k, so we return  \"000 \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `2 <= k <= 100`\n*   `s` consists of digits only."}}
{"2248": {"title": "Intersection of Multiple Arrays", "difficulty": "Easy", "description": "Given a 2D integer array `nums` where `nums[i]` is a non-empty array of **distinct** positive integers, return _the list of integers that are present in **each array** of_ `nums` _sorted in **ascending order**_.\n\n**Example 1:**\n\n**Input:** nums = \\[\\[**3**,1,2,**4**,5\\],\\[1,2,**3**,**4**\\],\\[**3**,**4**,5,6\\]\\]\n**Output:** \\[3,4\\]\n**Explanation:** \nThe only integers present in each of nums\\[0\\] = \\[**3**,1,2,**4**,5\\], nums\\[1\\] = \\[1,2,**3**,**4**\\], and nums\\[2\\] = \\[**3**,**4**,5,6\\] are 3 and 4, so we return \\[3,4\\].\n\n**Example 2:**\n\n**Input:** nums = \\[\\[1,2,3\\],\\[4,5,6\\]\\]\n**Output:** \\[\\]\n**Explanation:** \nThere does not exist any integer present both in nums\\[0\\] and nums\\[1\\], so we return an empty list \\[\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= sum(nums[i].length) <= 1000`\n*   `1 <= nums[i][j] <= 1000`\n*   All the values of `nums[i]` are **unique**."}}
{"2255": {"title": "Count Prefixes of a Given String", "difficulty": "Easy", "description": "You are given a string array `words` and a string `s`, where `words[i]` and `s` comprise only of **lowercase English letters**.\n\nReturn _the **number of strings** in_ `words` _that are a **prefix** of_ `s`.\n\nA **prefix** of a string is a substring that occurs at the beginning of the string. A **substring** is a contiguous sequence of characters within a string.\n\n**Example 1:**\n\n**Input:** words = \\[ \"a \", \"b \", \"c \", \"ab \", \"bc \", \"abc \"\\], s =  \"abc \"\n**Output:** 3\n**Explanation:**\nThe strings in words which are a prefix of s =  \"abc \" are:\n \"a \",  \"ab \", and  \"abc \".\nThus the number of strings in words which are a prefix of s is 3.\n\n**Example 2:**\n\n**Input:** words = \\[ \"a \", \"a \"\\], s =  \"aa \"\n**Output:** 2\n**Explanation:**\nBoth of the strings are a prefix of s. \nNote that the same string can occur multiple times in words, and it should be counted each time.\n\n**Constraints:**\n\n*   `1 <= words.length <= 1000`\n*   `1 <= words[i].length, s.length <= 10`\n*   `words[i]` and `s` consist of lowercase English letters **only**."}}
{"2259": {"title": "Remove Digit From Number to Maximize Result", "difficulty": "Easy", "description": "You are given a string `number` representing a **positive integer** and a character `digit`.\n\nReturn _the resulting string after removing **exactly one occurrence** of_ `digit` _from_ `number` _such that the value of the resulting string in **decimal** form is **maximized**_. The test cases are generated such that `digit` occurs at least once in `number`.\n\n**Example 1:**\n\n**Input:** number =  \"123 \", digit =  \"3 \"\n**Output:**  \"12 \"\n**Explanation:** There is only one '3' in  \"123 \". After removing '3', the result is  \"12 \".\n\n**Example 2:**\n\n**Input:** number =  \"1231 \", digit =  \"1 \"\n**Output:**  \"231 \"\n**Explanation:** We can remove the first '1' to get  \"231 \" or remove the second '1' to get  \"123 \".\nSince 231 > 123, we return  \"231 \".\n\n**Example 3:**\n\n**Input:** number =  \"551 \", digit =  \"5 \"\n**Output:**  \"51 \"\n**Explanation:** We can remove either the first or second '5' from  \"551 \".\nBoth result in the string  \"51 \".\n\n**Constraints:**\n\n*   `2 <= number.length <= 100`\n*   `number` consists of digits from `'1'` to `'9'`.\n*   `digit` is a digit from `'1'` to `'9'`.\n*   `digit` occurs at least once in `number`."}}
{"2264": {"title": "Largest 3-Same-Digit Number in String", "difficulty": "Easy", "description": "You are given a string `num` representing a large integer. An integer is **good** if it meets the following conditions:\n\n*   It is a **substring** of `num` with length `3`.\n*   It consists of only one unique digit.\n\nReturn _the **maximum good** integer as a **string** or an empty string_ `\" \"` _if no such integer exists_.\n\nNote:\n\n*   A **substring** is a contiguous sequence of characters within a string.\n*   There may be **leading zeroes** in `num` or a good integer.\n\n**Example 1:**\n\n**Input:** num =  \"6**777**133339 \"\n**Output:**  \"777 \"\n**Explanation:** There are two distinct good integers:  \"777 \" and  \"333 \".\n \"777 \" is the largest, so we return  \"777 \".\n\n**Example 2:**\n\n**Input:** num =  \"23**000**19 \"\n**Output:**  \"000 \"\n**Explanation:**  \"000 \" is the only good integer.\n\n**Example 3:**\n\n**Input:** num =  \"42352338 \"\n**Output:**  \" \"\n**Explanation:** No substring of length 3 consists of only one unique digit. Therefore, there are no good integers.\n\n**Constraints:**\n\n*   `3 <= num.length <= 1000`\n*   `num` only consists of digits."}}
{"2269": {"title": "Find the K-Beauty of a Number", "difficulty": "Easy", "description": "The **k-beauty** of an integer `num` is defined as the number of **substrings** of `num` when it is read as a string that meet the following conditions:\n\n*   It has a length of `k`.\n*   It is a divisor of `num`.\n\nGiven integers `num` and `k`, return _the k-beauty of_ `num`.\n\nNote:\n\n*   **Leading zeros** are allowed.\n*   `0` is not a divisor of any value.\n\nA **substring** is a contiguous sequence of characters in a string.\n\n**Example 1:**\n\n**Input:** num = 240, k = 2\n**Output:** 2\n**Explanation:** The following are the substrings of num of length k:\n-  \"24 \" from  \"**24**0 \": 24 is a divisor of 240.\n-  \"40 \" from  \"2**40** \": 40 is a divisor of 240.\nTherefore, the k-beauty is 2.\n\n**Example 2:**\n\n**Input:** num = 430043, k = 2\n**Output:** 2\n**Explanation:** The following are the substrings of num of length k:\n-  \"43 \" from  \"**43**0043 \": 43 is a divisor of 430043.\n-  \"30 \" from  \"4**30**043 \": 30 is not a divisor of 430043.\n-  \"00 \" from  \"43**00**43 \": 0 is not a divisor of 430043.\n-  \"04 \" from  \"430**04**3 \": 4 is not a divisor of 430043.\n-  \"43 \" from  \"4300**43** \": 43 is a divisor of 430043.\nTherefore, the k-beauty is 2.\n\n**Constraints:**\n\n*   `1 <= num <= 109`\n*   `1 <= k <= num.length` (taking `num` as a string)"}}
{"2273": {"title": "Find Resultant Array After Removing Anagrams", "difficulty": "Easy", "description": "You are given a **0-indexed** string array `words`, where `words[i]` consists of lowercase English letters.\n\nIn one operation, select any index `i` such that `0 < i < words.length` and `words[i - 1]` and `words[i]` are **anagrams**, and **delete** `words[i]` from `words`. Keep performing this operation as long as you can select an index that satisfies the conditions.\n\nReturn `words` _after performing all operations_. It can be shown that selecting the indices for each operation in **any** arbitrary order will lead to the same result.\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. For example, `\"dacb \"` is an anagram of `\"abdc \"`.\n\n**Example 1:**\n\n**Input:** words = \\[ \"abba \", \"baba \", \"bbaa \", \"cd \", \"cd \"\\]\n**Output:** \\[ \"abba \", \"cd \"\\]\n**Explanation:**\nOne of the ways we can obtain the resultant array is by using the following operations:\n- Since words\\[2\\] =  \"bbaa \" and words\\[1\\] =  \"baba \" are anagrams, we choose index 2 and delete words\\[2\\].\n  Now words = \\[ \"abba \", \"baba \", \"cd \", \"cd \"\\].\n- Since words\\[1\\] =  \"baba \" and words\\[0\\] =  \"abba \" are anagrams, we choose index 1 and delete words\\[1\\].\n  Now words = \\[ \"abba \", \"cd \", \"cd \"\\].\n- Since words\\[2\\] =  \"cd \" and words\\[1\\] =  \"cd \" are anagrams, we choose index 2 and delete words\\[2\\].\n  Now words = \\[ \"abba \", \"cd \"\\].\nWe can no longer perform any operations, so \\[ \"abba \", \"cd \"\\] is the final answer.\n\n**Example 2:**\n\n**Input:** words = \\[ \"a \", \"b \", \"c \", \"d \", \"e \"\\]\n**Output:** \\[ \"a \", \"b \", \"c \", \"d \", \"e \"\\]\n**Explanation:**\nNo two adjacent strings in words are anagrams of each other, so no operations are performed.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 10`\n*   `words[i]` consists of lowercase English letters."}}
{"2278": {"title": "Percentage of Letter in String", "difficulty": "Easy", "description": "Given a string `s` and a character `letter`, return _the **percentage** of characters in_ `s` _that equal_ `letter` _**rounded down** to the nearest whole percent._\n\n**Example 1:**\n\n**Input:** s =  \"foobar \", letter =  \"o \"\n**Output:** 33\n**Explanation:**\nThe percentage of characters in s that equal the letter 'o' is 2 / 6 \\* 100% = 33% when rounded down, so we return 33.\n\n**Example 2:**\n\n**Input:** s =  \"jjjj \", letter =  \"k \"\n**Output:** 0\n**Explanation:**\nThe percentage of characters in s that equal the letter 'k' is 0%, so we return 0.\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s` consists of lowercase English letters.\n*   `letter` is a lowercase English letter."}}
{"2283": {"title": "Check if Number Has Equal Digit Count and Digit Value", "difficulty": "Easy", "description": "You are given a **0-indexed** string `num` of length `n` consisting of digits.\n\nReturn `true` _if for **every** index_ `i` _in the range_ `0 <= i < n`_, the digit_ `i` _occurs_ `num[i]` _times in_ `num`_, otherwise return_ `false`.\n\n**Example 1:**\n\n**Input:** num =  \"1210 \"\n**Output:** true\n**Explanation:**\nnum\\[0\\] = '1'. The digit 0 occurs once in num.\nnum\\[1\\] = '2'. The digit 1 occurs twice in num.\nnum\\[2\\] = '1'. The digit 2 occurs once in num.\nnum\\[3\\] = '0'. The digit 3 occurs zero times in num.\nThe condition holds true for every index in  \"1210 \", so return true.\n\n**Example 2:**\n\n**Input:** num =  \"030 \"\n**Output:** false\n**Explanation:**\nnum\\[0\\] = '0'. The digit 0 should occur zero times, but actually occurs twice in num.\nnum\\[1\\] = '3'. The digit 1 should occur three times, but actually occurs zero times in num.\nnum\\[2\\] = '0'. The digit 2 occurs zero times in num.\nThe indices 0 and 1 both violate the condition, so return false.\n\n**Constraints:**\n\n*   `n == num.length`\n*   `1 <= n <= 10`\n*   `num` consists of digits."}}
{"2287": {"title": "Rearrange Characters to Make Target String", "difficulty": "Easy", "description": "You are given two **0-indexed** strings `s` and `target`. You can take some letters from `s` and rearrange them to form new strings.\n\nReturn _the **maximum** number of copies of_ `target` _that can be formed by taking letters from_ `s` _and rearranging them._\n\n**Example 1:**\n\n**Input:** s =  \"ilovecodingonleetcode \", target =  \"code \"\n**Output:** 2\n**Explanation:**\nFor the first copy of  \"code \", take the letters at indices 4, 5, 6, and 7.\nFor the second copy of  \"code \", take the letters at indices 17, 18, 19, and 20.\nThe strings that are formed are  \"ecod \" and  \"code \" which can both be rearranged into  \"code \".\nWe can make at most two copies of  \"code \", so we return 2.\n\n**Example 2:**\n\n**Input:** s =  \"abcba \", target =  \"abc \"\n**Output:** 1\n**Explanation:**\nWe can make one copy of  \"abc \" by taking the letters at indices 0, 1, and 2.\nWe can make at most one copy of  \"abc \", so we return 1.\nNote that while there is an extra 'a' and 'b' at indices 3 and 4, we cannot reuse the letter 'c' at index 2, so we cannot make a second copy of  \"abc \".\n\n**Example 3:**\n\n**Input:** s =  \"abbaccaddaeea \", target =  \"aaaaa \"\n**Output:** 1\n**Explanation:**\nWe can make one copy of  \"aaaaa \" by taking the letters at indices 0, 3, 6, 9, and 12.\nWe can make at most one copy of  \"aaaaa \", so we return 1.\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `1 <= target.length <= 10`\n*   `s` and `target` consist of lowercase English letters."}}
{"2293": {"title": "Min Max Game", "difficulty": "Easy", "description": "You are given a **0-indexed** integer array `nums` whose length is a power of `2`.\n\nApply the following algorithm on `nums`:\n\n1.  Let `n` be the length of `nums`. If `n == 1`, **end** the process. Otherwise, **create** a new **0-indexed** integer array `newNums` of length `n / 2`.\n2.  For every **even** index `i` where `0 <= i < n / 2`, **assign** the value of `newNums[i]` as `min(nums[2 * i], nums[2 * i + 1])`.\n3.  For every **odd** index `i` where `0 <= i < n / 2`, **assign** the value of `newNums[i]` as `max(nums[2 * i], nums[2 * i + 1])`.\n4.  **Replace** the array `nums` with `newNums`.\n5.  **Repeat** the entire process starting from step 1.\n\nReturn _the last number that remains in_ `nums` _after applying the algorithm._\n\n**Example 1:**\n\n**Input:** nums = \\[1,3,5,2,4,8,2,2\\]\n**Output:** 1\n**Explanation:** The following arrays are the results of applying the algorithm repeatedly.\nFirst: nums = \\[1,5,4,2\\]\nSecond: nums = \\[1,4\\]\nThird: nums = \\[1\\]\n1 is the last remaining number, so we return 1.\n\n**Example 2:**\n\n**Input:** nums = \\[3\\]\n**Output:** 3\n**Explanation:** 3 is already the last remaining number, so we return 3.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1024`\n*   `1 <= nums[i] <= 109`\n*   `nums.length` is a power of `2`."}}
{"2299": {"title": "Strong Password Checker II", "difficulty": "Easy", "description": "A password is said to be **strong** if it satisfies all the following criteria:\n\n*   It has at least `8` characters.\n*   It contains at least **one lowercase** letter.\n*   It contains at least **one uppercase** letter.\n*   It contains at least **one digit**.\n*   It contains at least **one special character**. The special characters are the characters in the following string: `\"!@#$%^&*()-+ \"`.\n*   It does **not** contain `2` of the same character in adjacent positions (i.e., `\"aab \"` violates this condition, but `\"aba \"` does not).\n\nGiven a string `password`, return `true` _if it is a **strong** password_. Otherwise, return `false`.\n\n**Example 1:**\n\n**Input:** password =  \"IloveLe3tcode! \"\n**Output:** true\n**Explanation:** The password meets all the requirements. Therefore, we return true.\n\n**Example 2:**\n\n**Input:** password =  \"Me+You--IsMyDream \"\n**Output:** false\n**Explanation:** The password does not contain a digit and also contains 2 of the same character in adjacent positions. Therefore, we return false.\n\n**Example 3:**\n\n**Input:** password =  \"1aB! \"\n**Output:** false\n**Explanation:** The password does not meet the length requirement. Therefore, we return false.\n\n**Constraints:**\n\n*   `1 <= password.length <= 100`\n*   `password` consists of letters, digits, and special characters: `\"!@#$%^&*()-+ \"`."}}
{"2303": {"title": "Calculate Amount Paid in Taxes", "difficulty": "Easy", "description": "You are given a **0-indexed** 2D integer array `brackets` where `brackets[i] = [upperi, percenti]` means that the `ith` tax bracket has an upper bound of `upperi` and is taxed at a rate of `percenti`. The brackets are **sorted** by upper bound (i.e. `upperi-1 < upperi` for `0 < i < brackets.length`).\n\nTax is calculated as follows:\n\n*   The first `upper0` dollars earned are taxed at a rate of `percent0`.\n*   The next `upper1 - upper0` dollars earned are taxed at a rate of `percent1`.\n*   The next `upper2 - upper1` dollars earned are taxed at a rate of `percent2`.\n*   And so on.\n\nYou are given an integer `income` representing the amount of money you earned. Return _the amount of money that you have to pay in taxes._ Answers within `10-5` of the actual answer will be accepted.\n\n**Example 1:**\n\n**Input:** brackets = \\[\\[3,50\\],\\[7,10\\],\\[12,25\\]\\], income = 10\n**Output:** 2.65000\n**Explanation:**\nBased on your income, you have 3 dollars in the 1st tax bracket, 4 dollars in the 2nd tax bracket, and 3 dollars in the 3rd tax bracket.\nThe tax rate for the three tax brackets is 50%, 10%, and 25%, respectively.\nIn total, you pay $3 \\* 50% + $4 \\* 10% + $3 \\* 25% = $2.65 in taxes.\n\n**Example 2:**\n\n**Input:** brackets = \\[\\[1,0\\],\\[4,25\\],\\[5,50\\]\\], income = 2\n**Output:** 0.25000\n**Explanation:**\nBased on your income, you have 1 dollar in the 1st tax bracket and 1 dollar in the 2nd tax bracket.\nThe tax rate for the two tax brackets is 0% and 25%, respectively.\nIn total, you pay $1 \\* 0% + $1 \\* 25% = $0.25 in taxes.\n\n**Example 3:**\n\n**Input:** brackets = \\[\\[2,50\\]\\], income = 0\n**Output:** 0.00000\n**Explanation:**\nYou have no income to tax, so you have to pay a total of $0 in taxes.\n\n**Constraints:**\n\n*   `1 <= brackets.length <= 100`\n*   `1 <= upperi <= 1000`\n*   `0 <= percenti <= 100`\n*   `0 <= income <= 1000`\n*   `upperi` is sorted in ascending order.\n*   All the values of `upperi` are **unique**.\n*   The upper bound of the last tax bracket is greater than or equal to `income`."}}
{"2309": {"title": "Greatest English Letter in Upper and Lower Case", "difficulty": "Easy", "description": "Given a string of English letters `s`, return _the **greatest** English letter which occurs as **both** a lowercase and uppercase letter in_ `s`. The returned letter should be in **uppercase**. If no such letter exists, return _an empty string_.\n\nAn English letter `b` is **greater** than another letter `a` if `b` appears **after** `a` in the English alphabet.\n\n**Example 1:**\n\n**Input:** s =  \"l**Ee**TcOd**E** \"\n**Output:**  \"E \"\n**Explanation:**\nThe letter 'E' is the only letter to appear in both lower and upper case.\n\n**Example 2:**\n\n**Input:** s =  \"a**rR**AzFif \"\n**Output:**  \"R \"\n**Explanation:**\nThe letter 'R' is the greatest letter to appear in both lower and upper case.\nNote that 'A' and 'F' also appear in both lower and upper case, but 'R' is greater than 'F' or 'A'.\n\n**Example 3:**\n\n**Input:** s =  \"AbCdEfGhIjK \"\n**Output:**  \" \"\n**Explanation:**\nThere is no letter that appears in both lower and upper case.\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of lowercase and uppercase English letters."}}
{"2315": {"title": "Count Asterisks", "difficulty": "Easy", "description": "You are given a string `s`, where every **two** consecutive vertical bars `'|'` are grouped into a **pair**. In other words, the 1st and 2nd `'|'` make a pair, the 3rd and 4th `'|'` make a pair, and so forth.\n\nReturn _the number of_ `'*'` _in_ `s`_, **excluding** the_ `'*'` _between each pair of_ `'|'`.\n\n**Note** that each `'|'` will belong to **exactly** one pair.\n\n**Example 1:**\n\n**Input:** s =  \"l|\\*e\\*et|c\\*\\*o|\\*de| \"\n**Output:** 2\n**Explanation:** The considered characters are underlined:  \"l|\\*e\\*et|c\\*\\*o|\\*de| \".\nThe characters between the first and second '|' are excluded from the answer.\nAlso, the characters between the third and fourth '|' are excluded from the answer.\nThere are 2 asterisks considered. Therefore, we return 2.\n\n**Example 2:**\n\n**Input:** s =  \"iamprogrammer \"\n**Output:** 0\n**Explanation:** In this example, there are no asterisks in s. Therefore, we return 0.\n\n**Example 3:**\n\n**Input:** s =  \"yo|uar|e\\*\\*|b|e\\*\\*\\*au|tifu|l \"\n**Output:** 5\n**Explanation:** The considered characters are underlined:  \"yo|uar|e\\*\\*|b|e\\*\\*\\*au|tifu|l \". There are 5 asterisks considered. Therefore, we return 5.\n\n**Constraints:**\n\n*   `1 <= s.length <= 1000`\n*   `s` consists of lowercase English letters, vertical bars `'|'`, and asterisks `'*'`.\n*   `s` contains an **even** number of vertical bars `'|'`."}}
{"2319": {"title": "Check if Matrix Is X-Matrix", "difficulty": "Easy", "description": "A square matrix is said to be an **X-Matrix** if **both** of the following conditions hold:\n\n1.  All the elements in the diagonals of the matrix are **non-zero**.\n2.  All other elements are 0.\n\nGiven a 2D integer array `grid` of size `n x n` representing a square matrix, return `true` _if_ `grid` _is an X-Matrix_. Otherwise, return `false`.\n\n**Example 1:**\n\n**Input:** grid = \\[\\[2,0,0,1\\],\\[0,3,1,0\\],\\[0,5,2,0\\],\\[4,0,0,2\\]\\]\n**Output:** true\n**Explanation:** Refer to the diagram above. \nAn X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.\nThus, grid is an X-Matrix.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[5,7,0\\],\\[0,3,1\\],\\[0,5,0\\]\\]\n**Output:** false\n**Explanation:** Refer to the diagram above.\nAn X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.\nThus, grid is not an X-Matrix.\n\n**Constraints:**\n\n*   `n == grid.length == grid[i].length`\n*   `3 <= n <= 100`\n*   `0 <= grid[i][j] <= 105`"}}
{"2325": {"title": "Decode the Message", "difficulty": "Easy", "description": "You are given the strings `key` and `message`, which represent a cipher key and a secret message, respectively. The steps to decode `message` are as follows:\n\n1.  Use the **first** appearance of all 26 lowercase English letters in `key` as the **order** of the substitution table.\n2.  Align the substitution table with the regular English alphabet.\n3.  Each letter in `message` is then **substituted** using the table.\n4.  Spaces `' '` are transformed to themselves.\n\n*   For example, given `key = \"**hap**p**y** **bo**y \"` (actual key would have **at least one** instance of each letter in the alphabet), we have the partial substitution table of (`'h' -> 'a'`, `'a' -> 'b'`, `'p' -> 'c'`, `'y' -> 'd'`, `'b' -> 'e'`, `'o' -> 'f'`).\n\nReturn _the decoded message_.\n\n**Example 1:**\n\n**Input:** key =  \"the quick brown fox jumps over the lazy dog \", message =  \"vkbs bs t suepuv \"\n**Output:**  \"this is a secret \"\n**Explanation:** The diagram above shows the substitution table.\nIt is obtained by taking the first appearance of each letter in  \"**the** **quick** **brown** **f**o**x** **j**u**mps** o**v**er the **lazy** **d**o**g** \".\n\n**Example 2:**\n\n**Input:** key =  \"eljuxhpwnyrdgtqkviszcfmabo \", message =  \"zwx hnfx lqantp mnoeius ycgk vcnjrdb \"\n**Output:**  \"the five boxing wizards jump quickly \"\n**Explanation:** The diagram above shows the substitution table.\nIt is obtained by taking the first appearance of each letter in  \"**eljuxhpwnyrdgtqkviszcfmabo** \".\n\n**Constraints:**\n\n*   `26 <= key.length <= 2000`\n*   `key` consists of lowercase English letters and `' '`.\n*   `key` contains every letter in the English alphabet (`'a'` to `'z'`) **at least once**.\n*   `1 <= message.length <= 2000`\n*   `message` consists of lowercase English letters and `' '`."}}
{"2331": {"title": "Evaluate Boolean Binary Tree", "difficulty": "Easy", "description": "You are given the `root` of a **full binary tree** with the following properties:\n\n*   **Leaf nodes** have either the value `0` or `1`, where `0` represents `False` and `1` represents `True`.\n*   **Non-leaf nodes** have either the value `2` or `3`, where `2` represents the boolean `OR` and `3` represents the boolean `AND`.\n\nThe **evaluation** of a node is as follows:\n\n*   If the node is a leaf node, the evaluation is the **value** of the node, i.e. `True` or `False`.\n*   Otherwise, **evaluate** the node's two children and **apply** the boolean operation of its value with the children's evaluations.\n\nReturn _the boolean result of **evaluating** the_ `root` _node._\n\nA **full binary tree** is a binary tree where each node has either `0` or `2` children.\n\nA **leaf node** is a node that has zero children.\n\n**Example 1:**\n\n**Input:** root = \\[2,1,3,null,null,0,1\\]\n**Output:** true\n**Explanation:** The above diagram illustrates the evaluation process.\nThe AND node evaluates to False AND True = False.\nThe OR node evaluates to True OR False = True.\nThe root node evaluates to True, so we return true.\n\n**Example 2:**\n\n**Input:** root = \\[0\\]\n**Output:** false\n**Explanation:** The root node is a leaf node and it evaluates to false, so we return false.\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 1000]`.\n*   `0 <= Node.val <= 3`\n*   Every node has either `0` or `2` children.\n*   Leaf nodes have a value of `0` or `1`.\n*   Non-leaf nodes have a value of `2` or `3`."}}
{"2335": {"title": "Minimum Amount of Time to Fill Cups", "difficulty": "Easy", "description": "You have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up `2` cups with **different** types of water, or `1` cup of any type of water.\n\nYou are given a **0-indexed** integer array `amount` of length `3` where `amount[0]`, `amount[1]`, and `amount[2]` denote the number of cold, warm, and hot water cups you need to fill respectively. Return _the **minimum** number of seconds needed to fill up all the cups_.\n\n**Example 1:**\n\n**Input:** amount = \\[1,4,2\\]\n**Output:** 4\n**Explanation:** One way to fill up the cups is:\nSecond 1: Fill up a cold cup and a warm cup.\nSecond 2: Fill up a warm cup and a hot cup.\nSecond 3: Fill up a warm cup and a hot cup.\nSecond 4: Fill up a warm cup.\nIt can be proven that 4 is the minimum number of seconds needed.\n\n**Example 2:**\n\n**Input:** amount = \\[5,4,4\\]\n**Output:** 7\n**Explanation:** One way to fill up the cups is:\nSecond 1: Fill up a cold cup, and a hot cup.\nSecond 2: Fill up a cold cup, and a warm cup.\nSecond 3: Fill up a cold cup, and a warm cup.\nSecond 4: Fill up a warm cup, and a hot cup.\nSecond 5: Fill up a cold cup, and a hot cup.\nSecond 6: Fill up a cold cup, and a warm cup.\nSecond 7: Fill up a hot cup.\n\n**Example 3:**\n\n**Input:** amount = \\[5,0,0\\]\n**Output:** 5\n**Explanation:** Every second, we fill up a cold cup.\n\n**Constraints:**\n\n*   `amount.length == 3`\n*   `0 <= amount[i] <= 100`"}}
{"2341": {"title": "Maximum Number of Pairs in Array", "difficulty": "Easy", "description": "You are given a **0-indexed** integer array `nums`. In one operation, you may do the following:\n\n*   Choose **two** integers in `nums` that are **equal**.\n*   Remove both integers from `nums`, forming a **pair**.\n\nThe operation is done on `nums` as many times as possible.\n\nReturn _a **0-indexed** integer array_ `answer` _of size_ `2` _where_ `answer[0]` _is the number of pairs that are formed and_ `answer[1]` _is the number of leftover integers in_ `nums` _after doing the operation as many times as possible_.\n\n**Example 1:**\n\n**Input:** nums = \\[1,3,2,1,3,2,2\\]\n**Output:** \\[3,1\\]\n**Explanation:**\nForm a pair with nums\\[0\\] and nums\\[3\\] and remove them from nums. Now, nums = \\[3,2,3,2,2\\].\nForm a pair with nums\\[0\\] and nums\\[2\\] and remove them from nums. Now, nums = \\[2,2,2\\].\nForm a pair with nums\\[0\\] and nums\\[1\\] and remove them from nums. Now, nums = \\[2\\].\nNo more pairs can be formed. A total of 3 pairs have been formed, and there is 1 number leftover in nums.\n\n**Example 2:**\n\n**Input:** nums = \\[1,1\\]\n**Output:** \\[1,0\\]\n**Explanation:** Form a pair with nums\\[0\\] and nums\\[1\\] and remove them from nums. Now, nums = \\[\\].\nNo more pairs can be formed. A total of 1 pair has been formed, and there are 0 numbers leftover in nums.\n\n**Example 3:**\n\n**Input:** nums = \\[0\\]\n**Output:** \\[0,1\\]\n**Explanation:** No pairs can be formed, and there is 1 number leftover in nums.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `0 <= nums[i] <= 100`"}}
{"2347": {"title": "Best Poker Hand", "difficulty": "Easy", "description": "You are given an integer array `ranks` and a character array `suits`. You have `5` cards where the `ith` card has a rank of `ranks[i]` and a suit of `suits[i]`.\n\nThe following are the types of **poker hands** you can make from best to worst:\n\n1.  `\"Flush \"`: Five cards of the same suit.\n2.  `\"Three of a Kind \"`: Three cards of the same rank.\n3.  `\"Pair \"`: Two cards of the same rank.\n4.  `\"High Card \"`: Any single card.\n\nReturn _a string representing the **best** type of **poker hand** you can make with the given cards._\n\n**Note** that the return values are **case-sensitive**.\n\n**Example 1:**\n\n**Input:** ranks = \\[13,2,3,1,9\\], suits = \\[ \"a \", \"a \", \"a \", \"a \", \"a \"\\]\n**Output:**  \"Flush \"\n**Explanation:** The hand with all the cards consists of 5 cards with the same suit, so we have a  \"Flush \".\n\n**Example 2:**\n\n**Input:** ranks = \\[4,4,2,4,4\\], suits = \\[ \"d \", \"a \", \"a \", \"b \", \"c \"\\]\n**Output:**  \"Three of a Kind \"\n**Explanation:** The hand with the first, second, and fourth card consists of 3 cards with the same rank, so we have a  \"Three of a Kind \".\nNote that we could also make a  \"Pair \" hand but  \"Three of a Kind \" is a better hand.\nAlso note that other cards could be used to make the  \"Three of a Kind \" hand.\n\n**Example 3:**\n\n**Input:** ranks = \\[10,10,2,12,9\\], suits = \\[ \"a \", \"b \", \"c \", \"a \", \"d \"\\]\n**Output:**  \"Pair \"\n**Explanation:** The hand with the first and second card consists of 2 cards with the same rank, so we have a  \"Pair \".\nNote that we cannot make a  \"Flush \" or a  \"Three of a Kind \".\n\n**Constraints:**\n\n*   `ranks.length == suits.length == 5`\n*   `1 <= ranks[i] <= 13`\n*   `'a' <= suits[i] <= 'd'`\n*   No two cards have the same rank and suit."}}
{"2351": {"title": "First Letter to Appear Twice", "difficulty": "Easy", "description": "Given a string `s` consisting of lowercase English letters, return _the first letter to appear **twice**_.\n\n**Note**:\n\n*   A letter `a` appears twice before another letter `b` if the **second** occurrence of `a` is before the **second** occurrence of `b`.\n*   `s` will contain at least one letter that appears twice.\n\n**Example 1:**\n\n**Input:** s =  \"abccbaacz \"\n**Output:**  \"c \"\n**Explanation:**\nThe letter 'a' appears on the indexes 0, 5 and 6.\nThe letter 'b' appears on the indexes 1 and 4.\nThe letter 'c' appears on the indexes 2, 3 and 7.\nThe letter 'z' appears on the index 8.\nThe letter 'c' is the first letter to appear twice, because out of all the letters the index of its second occurrence is the smallest.\n\n**Example 2:**\n\n**Input:** s =  \"abcdd \"\n**Output:**  \"d \"\n**Explanation:**\nThe only letter that appears twice is 'd' so we return 'd'.\n\n**Constraints:**\n\n*   `2 <= s.length <= 100`\n*   `s` consists of lowercase English letters.\n*   `s` has at least one repeated letter."}}
{"2357": {"title": "Make Array Zero by Subtracting Equal Amounts", "difficulty": "Easy", "description": "You are given a non-negative integer array `nums`. In one operation, you must:\n\n*   Choose a positive integer `x` such that `x` is less than or equal to the **smallest non-zero** element in `nums`.\n*   Subtract `x` from every **positive** element in `nums`.\n\nReturn _the **minimum** number of operations to make every element in_ `nums` _equal to_ `0`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,5,0,3,5\\]\n**Output:** 3\n**Explanation:**\nIn the first operation, choose x = 1. Now, nums = \\[0,4,0,2,4\\].\nIn the second operation, choose x = 2. Now, nums = \\[0,2,0,0,2\\].\nIn the third operation, choose x = 2. Now, nums = \\[0,0,0,0,0\\].\n\n**Example 2:**\n\n**Input:** nums = \\[0\\]\n**Output:** 0\n**Explanation:** Each element in nums is already 0 so no operations are needed.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `0 <= nums[i] <= 100`"}}
{"2363": {"title": "Merge Similar Items", "difficulty": "Easy", "description": "You are given two 2D integer arrays, `items1` and `items2`, representing two sets of items. Each array `items` has the following properties:\n\n*   `items[i] = [valuei, weighti]` where `valuei` represents the **value** and `weighti` represents the **weight** of the `ith` item.\n*   The value of each item in `items` is **unique**.\n\nReturn _a 2D integer array_ `ret` _where_ `ret[i] = [valuei, weighti]`_,_ _with_ `weighti` _being the **sum of weights** of all items with value_ `valuei`.\n\n**Note:** `ret` should be returned in **ascending** order by value.\n\n**Example 1:**\n\n**Input:** items1 = \\[\\[1,1\\],\\[4,5\\],\\[3,8\\]\\], items2 = \\[\\[3,1\\],\\[1,5\\]\\]\n**Output:** \\[\\[1,6\\],\\[3,9\\],\\[4,5\\]\\]\n**Explanation:** \nThe item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 5, total weight = 1 + 5 = 6.\nThe item with value = 3 occurs in items1 with weight = 8 and in items2 with weight = 1, total weight = 8 + 1 = 9.\nThe item with value = 4 occurs in items1 with weight = 5, total weight = 5.  \nTherefore, we return \\[\\[1,6\\],\\[3,9\\],\\[4,5\\]\\].\n\n**Example 2:**\n\n**Input:** items1 = \\[\\[1,1\\],\\[3,2\\],\\[2,3\\]\\], items2 = \\[\\[2,1\\],\\[3,2\\],\\[1,3\\]\\]\n**Output:** \\[\\[1,4\\],\\[2,4\\],\\[3,4\\]\\]\n**Explanation:** \nThe item with value = 1 occurs in items1 with weight = 1 and in items2 with weight = 3, total weight = 1 + 3 = 4.\nThe item with value = 2 occurs in items1 with weight = 3 and in items2 with weight = 1, total weight = 3 + 1 = 4.\nThe item with value = 3 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4.\nTherefore, we return \\[\\[1,4\\],\\[2,4\\],\\[3,4\\]\\].\n\n**Example 3:**\n\n**Input:** items1 = \\[\\[1,3\\],\\[2,2\\]\\], items2 = \\[\\[7,1\\],\\[2,2\\],\\[1,4\\]\\]\n**Output:** \\[\\[1,7\\],\\[2,4\\],\\[7,1\\]\\]\n**Explanation:**\nThe item with value = 1 occurs in items1 with weight = 3 and in items2 with weight = 4, total weight = 3 + 4 = 7. \nThe item with value = 2 occurs in items1 with weight = 2 and in items2 with weight = 2, total weight = 2 + 2 = 4. \nThe item with value = 7 occurs in items2 with weight = 1, total weight = 1.\nTherefore, we return \\[\\[1,7\\],\\[2,4\\],\\[7,1\\]\\].\n\n**Constraints:**\n\n*   `1 <= items1.length, items2.length <= 1000`\n*   `items1[i].length == items2[i].length == 2`\n*   `1 <= valuei, weighti <= 1000`\n*   Each `valuei` in `items1` is **unique**.\n*   Each `valuei` in `items2` is **unique**."}}
{"2367": {"title": "Number of Arithmetic Triplets", "difficulty": "Easy", "description": "You are given a **0-indexed**, **strictly increasing** integer array `nums` and a positive integer `diff`. A triplet `(i, j, k)` is an **arithmetic triplet** if the following conditions are met:\n\n*   `i < j < k`,\n*   `nums[j] - nums[i] == diff`, and\n*   `nums[k] - nums[j] == diff`.\n\nReturn _the number of unique **arithmetic triplets**._\n\n**Example 1:**\n\n**Input:** nums = \\[0,1,4,6,7,10\\], diff = 3\n**Output:** 2\n**Explanation:**\n(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.\n(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3. \n\n**Example 2:**\n\n**Input:** nums = \\[4,5,6,7,8,9\\], diff = 2\n**Output:** 2\n**Explanation:**\n(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.\n(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2.\n\n**Constraints:**\n\n*   `3 <= nums.length <= 200`\n*   `0 <= nums[i] <= 200`\n*   `1 <= diff <= 50`\n*   `nums` is **strictly** increasing."}}
{"2373": {"title": "Largest Local Values in a Matrix", "difficulty": "Easy", "description": "You are given an `n x n` integer matrix `grid`.\n\nGenerate an integer matrix `maxLocal` of size `(n - 2) x (n - 2)` such that:\n\n*   `maxLocal[i][j]` is equal to the **largest** value of the `3 x 3` matrix in `grid` centered around row `i + 1` and column `j + 1`.\n\nIn other words, we want to find the largest value in every contiguous `3 x 3` matrix in `grid`.\n\nReturn _the generated matrix_.\n\n**Example 1:**\n\n**Input:** grid = \\[\\[9,9,8,1\\],\\[5,6,2,6\\],\\[8,2,6,4\\],\\[6,2,2,2\\]\\]\n**Output:** \\[\\[9,9\\],\\[8,6\\]\\]\n**Explanation:** The diagram above shows the original matrix and the generated matrix.\nNotice that each value in the generated matrix corresponds to the largest value of a contiguous 3 x 3 matrix in grid.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[1,1,1,1,1\\],\\[1,1,1,1,1\\],\\[1,1,2,1,1\\],\\[1,1,1,1,1\\],\\[1,1,1,1,1\\]\\]\n**Output:** \\[\\[2,2,2\\],\\[2,2,2\\],\\[2,2,2\\]\\]\n**Explanation:** Notice that the 2 is contained within every contiguous 3 x 3 matrix in grid.\n\n**Constraints:**\n\n*   `n == grid.length == grid[i].length`\n*   `3 <= n <= 100`\n*   `1 <= grid[i][j] <= 100`"}}
{"2379": {"title": "Minimum Recolors to Get K Consecutive Black Blocks", "difficulty": "Easy", "description": "You are given a **0-indexed** string `blocks` of length `n`, where `blocks[i]` is either `'W'` or `'B'`, representing the color of the `ith` block. The characters `'W'` and `'B'` denote the colors white and black, respectively.\n\nYou are also given an integer `k`, which is the desired number of **consecutive** black blocks.\n\nIn one operation, you can **recolor** a white block such that it becomes a black block.\n\nReturn _the **minimum** number of operations needed such that there is at least **one** occurrence of_ `k` _consecutive black blocks._\n\n**Example 1:**\n\n**Input:** blocks =  \"WBBWWBBWBW \", k = 7\n**Output:** 3\n**Explanation:**\nOne way to achieve 7 consecutive black blocks is to recolor the 0th, 3rd, and 4th blocks\nso that blocks =  \"BBBBBBBWBW \". \nIt can be shown that there is no way to achieve 7 consecutive black blocks in less than 3 operations.\nTherefore, we return 3.\n\n**Example 2:**\n\n**Input:** blocks =  \"WBWBBBW \", k = 2\n**Output:** 0\n**Explanation:**\nNo changes need to be made, since 2 consecutive black blocks already exist.\nTherefore, we return 0.\n\n**Constraints:**\n\n*   `n == blocks.length`\n*   `1 <= n <= 100`\n*   `blocks[i]` is either `'W'` or `'B'`.\n*   `1 <= k <= n`"}}
{"2383": {"title": "Minimum Hours of Training to Win a Competition", "difficulty": "Easy", "description": "You are entering a competition, and are given two **positive** integers `initialEnergy` and `initialExperience` denoting your initial energy and initial experience respectively.\n\nYou are also given two **0-indexed** integer arrays `energy` and `experience`, both of length `n`.\n\nYou will face `n` opponents **in order**. The energy and experience of the `ith` opponent is denoted by `energy[i]` and `experience[i]` respectively. When you face an opponent, you need to have both **strictly** greater experience and energy to defeat them and move to the next opponent if available.\n\nDefeating the `ith` opponent **increases** your experience by `experience[i]`, but **decreases** your energy by `energy[i]`.\n\nBefore starting the competition, you can train for some number of hours. After each hour of training, you can **either** choose to increase your initial experience by one, or increase your initial energy by one.\n\nReturn _the **minimum** number of training hours required to defeat all_ `n` _opponents_.\n\n**Example 1:**\n\n**Input:** initialEnergy = 5, initialExperience = 3, energy = \\[1,4,3,2\\], experience = \\[2,6,3,1\\]\n**Output:** 8\n**Explanation:** You can increase your energy to 11 after 6 hours of training, and your experience to 5 after 2 hours of training.\nYou face the opponents in the following order:\n- You have more energy and experience than the 0th opponent so you win.\n  Your energy becomes 11 - 1 = 10, and your experience becomes 5 + 2 = 7.\n- You have more energy and experience than the 1st opponent so you win.\n  Your energy becomes 10 - 4 = 6, and your experience becomes 7 + 6 = 13.\n- You have more energy and experience than the 2nd opponent so you win.\n  Your energy becomes 6 - 3 = 3, and your experience becomes 13 + 3 = 16.\n- You have more energy and experience than the 3rd opponent so you win.\n  Your energy becomes 3 - 2 = 1, and your experience becomes 16 + 1 = 17.\nYou did a total of 6 + 2 = 8 hours of training before the competition, so we return 8.\nIt can be proven that no smaller answer exists.\n\n**Example 2:**\n\n**Input:** initialEnergy = 2, initialExperience = 4, energy = \\[1\\], experience = \\[3\\]\n**Output:** 0\n**Explanation:** You do not need any additional energy or experience to win the competition, so we return 0.\n\n**Constraints:**\n\n*   `n == energy.length == experience.length`\n*   `1 <= n <= 100`\n*   `1 <= initialEnergy, initialExperience, energy[i], experience[i] <= 100`"}}
{"2389": {"title": "Longest Subsequence With Limited Sum", "difficulty": "Easy", "description": "You are given an integer array `nums` of length `n`, and an integer array `queries` of length `m`.\n\nReturn _an array_ `answer` _of length_ `m` _where_ `answer[i]` _is the **maximum** size of a **subsequence** that you can take from_ `nums` _such that the **sum** of its elements is less than or equal to_ `queries[i]`.\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n**Example 1:**\n\n**Input:** nums = \\[4,5,2,1\\], queries = \\[3,10,21\\]\n**Output:** \\[2,3,4\\]\n**Explanation:** We answer the queries as follows:\n- The subsequence \\[2,1\\] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer\\[0\\] = 2.\n- The subsequence \\[4,5,1\\] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer\\[1\\] = 3.\n- The subsequence \\[4,5,2,1\\] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer\\[2\\] = 4.\n\n**Example 2:**\n\n**Input:** nums = \\[2,3,4,5\\], queries = \\[1\\]\n**Output:** \\[0\\]\n**Explanation:** The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer\\[0\\] = 0.\n\n**Constraints:**\n\n*   `n == nums.length`\n*   `m == queries.length`\n*   `1 <= n, m <= 1000`\n*   `1 <= nums[i], queries[i] <= 106`"}}
{"2395": {"title": "Find Subarrays With Equal Sum", "difficulty": "Easy", "description": "Given a **0-indexed** integer array `nums`, determine whether there exist **two** subarrays of length `2` with **equal** sum. Note that the two subarrays must begin at **different** indices.\n\nReturn `true` _if these subarrays exist, and_ `false` _otherwise._\n\nA **subarray** is a contiguous non-empty sequence of elements within an array.\n\n**Example 1:**\n\n**Input:** nums = \\[4,2,4\\]\n**Output:** true\n**Explanation:** The subarrays with elements \\[4,2\\] and \\[2,4\\] have the same sum of 6.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4,5\\]\n**Output:** false\n**Explanation:** No two subarrays of size 2 have the same sum.\n\n**Example 3:**\n\n**Input:** nums = \\[0,0,0\\]\n**Output:** true\n**Explanation:** The subarrays \\[nums\\[0\\],nums\\[1\\]\\] and \\[nums\\[1\\],nums\\[2\\]\\] have the same sum of 0. \nNote that even though the subarrays have the same content, the two subarrays are considered different because they are in different positions in the original array.\n\n**Constraints:**\n\n*   `2 <= nums.length <= 1000`\n*   `-109 <= nums[i] <= 109`"}}
{"2399": {"title": "Check Distances Between Same Letters", "difficulty": "Easy", "description": "You are given a **0-indexed** string `s` consisting of only lowercase English letters, where each letter in `s` appears **exactly** **twice**. You are also given a **0-indexed** integer array `distance` of length `26`.\n\nEach letter in the alphabet is numbered from `0` to `25` (i.e. `'a' -> 0`, `'b' -> 1`, `'c' -> 2`, ... , `'z' -> 25`).\n\nIn a **well-spaced** string, the number of letters between the two occurrences of the `ith` letter is `distance[i]`. If the `ith` letter does not appear in `s`, then `distance[i]` can be **ignored**.\n\nReturn `true` _if_ `s` _is a **well-spaced** string, otherwise return_ `false`.\n\n**Example 1:**\n\n**Input:** s =  \"abaccb \", distance = \\[1,3,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\\]\n**Output:** true\n**Explanation:**\n- 'a' appears at indices 0 and 2 so it satisfies distance\\[0\\] = 1.\n- 'b' appears at indices 1 and 5 so it satisfies distance\\[1\\] = 3.\n- 'c' appears at indices 3 and 4 so it satisfies distance\\[2\\] = 0.\nNote that distance\\[3\\] = 5, but since 'd' does not appear in s, it can be ignored.\nReturn true because s is a well-spaced string.\n\n**Example 2:**\n\n**Input:** s =  \"aa \", distance = \\[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\\]\n**Output:** false\n**Explanation:**\n- 'a' appears at indices 0 and 1 so there are zero letters between them.\nBecause distance\\[0\\] = 1, s is not a well-spaced string.\n\n**Constraints:**\n\n*   `2 <= s.length <= 52`\n*   `s` consists only of lowercase English letters.\n*   Each letter appears in `s` exactly twice.\n*   `distance.length == 26`\n*   `0 <= distance[i] <= 50`"}}
{"2404": {"title": "Most Frequent Even Element", "difficulty": "Easy", "description": "Given an integer array `nums`, return _the most frequent even element_.\n\nIf there is a tie, return the **smallest** one. If there is no such element, return `-1`.\n\n**Example 1:**\n\n**Input:** nums = \\[0,1,2,2,4,4,1\\]\n**Output:** 2\n**Explanation:**\nThe even elements are 0, 2, and 4. Of these, 2 and 4 appear the most.\nWe return the smallest one, which is 2.\n\n**Example 2:**\n\n**Input:** nums = \\[4,4,4,9,2,4\\]\n**Output:** 4\n**Explanation:** 4 is the even element appears the most.\n\n**Example 3:**\n\n**Input:** nums = \\[29,47,21,41,13,37,25,7\\]\n**Output:** -1\n**Explanation:** There is no even element.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2000`\n*   `0 <= nums[i] <= 105`"}}
{"2409": {"title": "Count Days Spent Together", "difficulty": "Easy", "description": "Alice and Bob are traveling to Rome for separate business meetings.\n\nYou are given 4 strings `arriveAlice`, `leaveAlice`, `arriveBob`, and `leaveBob`. Alice will be in the city from the dates `arriveAlice` to `leaveAlice` (**inclusive**), while Bob will be in the city from the dates `arriveBob` to `leaveBob` (**inclusive**). Each will be a 5-character string in the format `\"MM-DD \"`, corresponding to the month and day of the date.\n\nReturn _the total number of days that Alice and Bob are in Rome together._\n\nYou can assume that all dates occur in the **same** calendar year, which is **not** a leap year. Note that the number of days per month can be represented as: `[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]`.\n\n**Example 1:**\n\n**Input:** arriveAlice =  \"08-15 \", leaveAlice =  \"08-18 \", arriveBob =  \"08-16 \", leaveBob =  \"08-19 \"\n**Output:** 3\n**Explanation:** Alice will be in Rome from August 15 to August 18. Bob will be in Rome from August 16 to August 19. They are both in Rome together on August 16th, 17th, and 18th, so the answer is 3.\n\n**Example 2:**\n\n**Input:** arriveAlice =  \"10-01 \", leaveAlice =  \"10-31 \", arriveBob =  \"11-01 \", leaveBob =  \"12-31 \"\n**Output:** 0\n**Explanation:** There is no day when Alice and Bob are in Rome together, so we return 0.\n\n**Constraints:**\n\n*   All dates are provided in the format `\"MM-DD \"`.\n*   Alice and Bob's arrival dates are **earlier than or equal to** their leaving dates.\n*   The given dates are valid dates of a **non-leap** year."}}
{"2413": {"title": "Smallest Even Multiple", "difficulty": "Easy", "description": "Given a **positive** integer `n`, return _the smallest positive integer that is a multiple of **both**_ `2` _and_ `n`.\n\n**Example 1:**\n\n**Input:** n = 5\n**Output:** 10\n**Explanation:** The smallest multiple of both 5 and 2 is 10.\n\n**Example 2:**\n\n**Input:** n = 6\n**Output:** 6\n**Explanation:** The smallest multiple of both 6 and 2 is 6. Note that a number is a multiple of itself.\n\n**Constraints:**\n\n*   `1 <= n <= 150`"}}
{"2418": {"title": "Sort the People", "difficulty": "Easy", "description": "You are given an array of strings `names`, and an array `heights` that consists of **distinct** positive integers. Both arrays are of length `n`.\n\nFor each index `i`, `names[i]` and `heights[i]` denote the name and height of the `ith` person.\n\nReturn `names` _sorted in **descending** order by the people's heights_.\n\n**Example 1:**\n\n**Input:** names = \\[ \"Mary \", \"John \", \"Emma \"\\], heights = \\[180,165,170\\]\n**Output:** \\[ \"Mary \", \"Emma \", \"John \"\\]\n**Explanation:** Mary is the tallest, followed by Emma and John.\n\n**Example 2:**\n\n**Input:** names = \\[ \"Alice \", \"Bob \", \"Bob \"\\], heights = \\[155,185,150\\]\n**Output:** \\[ \"Bob \", \"Alice \", \"Bob \"\\]\n**Explanation:** The first Bob is the tallest, followed by Alice and the second Bob.\n\n**Constraints:**\n\n*   `n == names.length == heights.length`\n*   `1 <= n <= 103`\n*   `1 <= names[i].length <= 20`\n*   `1 <= heights[i] <= 105`\n*   `names[i]` consists of lower and upper case English letters.\n*   All the values of `heights` are distinct."}}
{"2423": {"title": "Remove Letter To Equalize Frequency", "difficulty": "Easy", "description": "You are given a **0-indexed** string `word`, consisting of lowercase English letters. You need to select **one** index and **remove** the letter at that index from `word` so that the **frequency** of every letter present in `word` is equal.\n\nReturn `true` _if it is possible to remove one letter so that the frequency of all letters in_ `word` _are equal, and_ `false` _otherwise_.\n\n**Note:**\n\n*   The **frequency** of a letter `x` is the number of times it occurs in the string.\n*   You **must** remove exactly one letter and cannot chose to do nothing.\n\n**Example 1:**\n\n**Input:** word =  \"abcc \"\n**Output:** true\n**Explanation:** Select index 3 and delete it: word becomes  \"abc \" and each character has a frequency of 1.\n\n**Example 2:**\n\n**Input:** word =  \"aazz \"\n**Output:** false\n**Explanation:** We must delete a character, so either the frequency of  \"a \" is 1 and the frequency of  \"z \" is 2, or vice versa. It is impossible to make all present letters have equal frequency.\n\n**Constraints:**\n\n*   `2 <= word.length <= 100`\n*   `word` consists of lowercase English letters only."}}
{"2427": {"title": "Number of Common Factors", "difficulty": "Easy", "description": "Given two positive integers `a` and `b`, return _the number of **common** factors of_ `a` _and_ `b`.\n\nAn integer `x` is a **common factor** of `a` and `b` if `x` divides both `a` and `b`.\n\n**Example 1:**\n\n**Input:** a = 12, b = 6\n**Output:** 4\n**Explanation:** The common factors of 12 and 6 are 1, 2, 3, 6.\n\n**Example 2:**\n\n**Input:** a = 25, b = 30\n**Output:** 2\n**Explanation:** The common factors of 25 and 30 are 1, 5.\n\n**Constraints:**\n\n*   `1 <= a, b <= 1000`"}}
{"2432": {"title": "The Employee That Worked on the Longest Task", "difficulty": "Easy", "description": "There are `n` employees, each with a unique id from `0` to `n - 1`.\n\nYou are given a 2D integer array `logs` where `logs[i] = [idi, leaveTimei]` where:\n\n*   `idi` is the id of the employee that worked on the `ith` task, and\n*   `leaveTimei` is the time at which the employee finished the `ith` task. All the values `leaveTimei` are **unique**.\n\nNote that the `ith` task starts the moment right after the `(i - 1)th` task ends, and the `0th` task starts at time `0`.\n\nReturn _the id of the employee that worked the task with the longest time._ If there is a tie between two or more employees, return _the **smallest** id among them_.\n\n**Example 1:**\n\n**Input:** n = 10, logs = \\[\\[0,3\\],\\[2,5\\],\\[0,9\\],\\[1,15\\]\\]\n**Output:** 1\n**Explanation:** \nTask 0 started at 0 and ended at 3 with 3 units of times.\nTask 1 started at 3 and ended at 5 with 2 units of times.\nTask 2 started at 5 and ended at 9 with 4 units of times.\nTask 3 started at 9 and ended at 15 with 6 units of times.\nThe task with the longest time is task 3 and the employee with id 1 is the one that worked on it, so we return 1.\n\n**Example 2:**\n\n**Input:** n = 26, logs = \\[\\[1,1\\],\\[3,7\\],\\[2,12\\],\\[7,17\\]\\]\n**Output:** 3\n**Explanation:** \nTask 0 started at 0 and ended at 1 with 1 unit of times.\nTask 1 started at 1 and ended at 7 with 6 units of times.\nTask 2 started at 7 and ended at 12 with 5 units of times.\nTask 3 started at 12 and ended at 17 with 5 units of times.\nThe tasks with the longest time is task 1. The employees that worked on it is 3, so we return 3.\n\n**Example 3:**\n\n**Input:** n = 2, logs = \\[\\[0,10\\],\\[1,20\\]\\]\n**Output:** 0\n**Explanation:** \nTask 0 started at 0 and ended at 10 with 10 units of times.\nTask 1 started at 10 and ended at 20 with 10 units of times.\nThe tasks with the longest time are tasks 0 and 1. The employees that worked on them are 0 and 1, so we return the smallest id 0.\n\n**Constraints:**\n\n*   `2 <= n <= 500`\n*   `1 <= logs.length <= 500`\n*   `logs[i].length == 2`\n*   `0 <= idi <= n - 1`\n*   `1 <= leaveTimei <= 500`\n*   `idi != idi+1`\n*   `leaveTimei` are sorted in a strictly increasing order."}}
{"2437": {"title": "Number of Valid Clock Times", "difficulty": "Easy", "description": "You are given a string of length `5` called `time`, representing the current time on a digital clock in the format `\"hh:mm \"`. The **earliest** possible time is `\"00:00 \"` and the **latest** possible time is `\"23:59 \"`.\n\nIn the string `time`, the digits represented by the `?` symbol are **unknown**, and must be **replaced** with a digit from `0` to `9`.\n\nReturn _an integer_ `answer`_, the number of valid clock times that can be created by replacing every_ `?` _with a digit from_ `0` _to_ `9`.\n\n**Example 1:**\n\n**Input:** time =  \"?5:00 \"\n**Output:** 2\n**Explanation:** We can replace the ? with either a 0 or 1, producing  \"05:00 \" or  \"15:00 \". Note that we cannot replace it with a 2, since the time  \"25:00 \" is invalid. In total, we have two choices.\n\n**Example 2:**\n\n**Input:** time =  \"0?:0? \"\n**Output:** 100\n**Explanation:** Each ? can be replaced by any digit from 0 to 9, so we have 100 total choices.\n\n**Example 3:**\n\n**Input:** time =  \"??:?? \"\n**Output:** 1440\n**Explanation:** There are 24 possible choices for the hours, and 60 possible choices for the minutes. In total, we have 24 \\* 60 = 1440 choices.\n\n**Constraints:**\n\n*   `time` is a valid string of length `5` in the format `\"hh:mm \"`.\n*   `\"00 \" <= hh <= \"23 \"`\n*   `\"00 \" <= mm <= \"59 \"`\n*   Some of the digits might be replaced with `'?'` and need to be replaced with digits from `0` to `9`."}}
{"2441": {"title": "Largest Positive Integer That Exists With Its Negative", "difficulty": "Easy", "description": "Given an integer array `nums` that **does not contain** any zeros, find **the largest positive** integer `k` such that `-k` also exists in the array.\n\nReturn _the positive integer_ `k`. If there is no such integer, return `-1`.\n\n**Example 1:**\n\n**Input:** nums = \\[-1,2,-3,3\\]\n**Output:** 3\n**Explanation:** 3 is the only valid k we can find in the array.\n\n**Example 2:**\n\n**Input:** nums = \\[-1,10,6,7,-7,1\\]\n**Output:** 7\n**Explanation:** Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value.\n\n**Example 3:**\n\n**Input:** nums = \\[-10,8,6,7,-2,-3\\]\n**Output:** -1\n**Explanation:** There is no a single valid k, we return -1.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `-1000 <= nums[i] <= 1000`\n*   `nums[i] != 0`"}}
{"2446": {"title": "Determine if Two Events Have Conflict", "difficulty": "Easy", "description": "You are given two arrays of strings that represent two inclusive events that happened **on the same day**, `event1` and `event2`, where:\n\n*   `event1 = [startTime1, endTime1]` and\n*   `event2 = [startTime2, endTime2]`.\n\nEvent times are valid 24 hours format in the form of `HH:MM`.\n\nA **conflict** happens when two events have some non-empty intersection (i.e., some moment is common to both events).\n\nReturn `true` _if there is a conflict between two events. Otherwise, return_ `false`.\n\n**Example 1:**\n\n**Input:** event1 = \\[ \"01:15 \", \"02:00 \"\\], event2 = \\[ \"02:00 \", \"03:00 \"\\]\n**Output:** true\n**Explanation:** The two events intersect at time 2:00.\n\n**Example 2:**\n\n**Input:** event1 = \\[ \"01:00 \", \"02:00 \"\\], event2 = \\[ \"01:20 \", \"03:00 \"\\]\n**Output:** true\n**Explanation:** The two events intersect starting from 01:20 to 02:00.\n\n**Example 3:**\n\n**Input:** event1 = \\[ \"10:00 \", \"11:00 \"\\], event2 = \\[ \"14:00 \", \"15:00 \"\\]\n**Output:** false\n**Explanation:** The two events do not intersect.\n\n**Constraints:**\n\n*   `evnet1.length == event2.length == 2.`\n*   `event1[i].length == event2[i].length == 5`\n*   `startTime1 <= endTime1`\n*   `startTime2 <= endTime2`\n*   All the event times follow the `HH:MM` format."}}
{"2451": {"title": "Odd String Difference", "difficulty": "Easy", "description": "You are given an array of equal-length strings `words`. Assume that the length of each string is `n`.\n\nEach string `words[i]` can be converted into a **difference integer array** `difference[i]` of length `n - 1` where `difference[i][j] = words[i][j+1] - words[i][j]` where `0 <= j <= n - 2`. Note that the difference between two letters is the difference between their **positions** in the alphabet i.e. the position of `'a'` is `0`, `'b'` is `1`, and `'z'` is `25`.\n\n*   For example, for the string `\"acb \"`, the difference integer array is `[2 - 0, 1 - 2] = [2, -1]`.\n\nAll the strings in words have the same difference integer array, **except one**. You should find that string.\n\nReturn _the string in_ `words` _that has different **difference integer array**._\n\n**Example 1:**\n\n**Input:** words = \\[ \"adc \", \"wzy \", \"abc \"\\]\n**Output:**  \"abc \"\n**Explanation:** \n- The difference integer array of  \"adc \" is \\[3 - 0, 2 - 3\\] = \\[3, -1\\].\n- The difference integer array of  \"wzy \" is \\[25 - 22, 24 - 25\\]= \\[3, -1\\].\n- The difference integer array of  \"abc \" is \\[1 - 0, 2 - 1\\] = \\[1, 1\\]. \nThe odd array out is \\[1, 1\\], so we return the corresponding string,  \"abc \".\n\n**Example 2:**\n\n**Input:** words = \\[ \"aaa \", \"bob \", \"ccc \", \"ddd \"\\]\n**Output:**  \"bob \"\n**Explanation:** All the integer arrays are \\[0, 0\\] except for  \"bob \", which corresponds to \\[13, -13\\].\n\n**Constraints:**\n\n*   `3 <= words.length <= 100`\n*   `n == words[i].length`\n*   `2 <= n <= 20`\n*   `words[i]` consists of lowercase English letters."}}
{"2455": {"title": "Average Value of Even Numbers That Are Divisible by Three", "difficulty": "Easy", "description": "Given an integer array `nums` of **positive** integers, return _the average value of all even integers that are divisible by_ `3`_._\n\nNote that the **average** of `n` elements is the **sum** of the `n` elements divided by `n` and **rounded down** to the nearest integer.\n\n**Example 1:**\n\n**Input:** nums = \\[1,3,6,10,12,15\\]\n**Output:** 9\n**Explanation:** 6 and 12 are even numbers that are divisible by 3. (6 + 12) / 2 = 9.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,4,7,10\\]\n**Output:** 0\n**Explanation:** There is no single number that satisfies the requirement, so return 0.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 1000`"}}
{"2460": {"title": "Apply Operations to an Array", "difficulty": "Easy", "description": "You are given a **0-indexed** array `nums` of size `n` consisting of **non-negative** integers.\n\nYou need to apply `n - 1` operations to this array where, in the `ith` operation (**0-indexed**), you will apply the following on the `ith` element of `nums`:\n\n*   If `nums[i] == nums[i + 1]`, then multiply `nums[i]` by `2` and set `nums[i + 1]` to `0`. Otherwise, you skip this operation.\n\nAfter performing **all** the operations, **shift** all the `0`'s to the **end** of the array.\n\n*   For example, the array `[1,0,2,0,0,1]` after shifting all its `0`'s to the end, is `[1,2,1,0,0,0]`.\n\nReturn _the resulting array_.\n\n**Note** that the operations are applied **sequentially**, not all at once.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,2,1,1,0\\]\n**Output:** \\[1,4,2,0,0,0\\]\n**Explanation:** We do the following operations:\n- i = 0: nums\\[0\\] and nums\\[1\\] are not equal, so we skip this operation.\n- i = 1: nums\\[1\\] and nums\\[2\\] are equal, we multiply nums\\[1\\] by 2 and change nums\\[2\\] to 0. The array becomes \\[1,**4**,**0**,1,1,0\\].\n- i = 2: nums\\[2\\] and nums\\[3\\] are not equal, so we skip this operation.\n- i = 3: nums\\[3\\] and nums\\[4\\] are equal, we multiply nums\\[3\\] by 2 and change nums\\[4\\] to 0. The array becomes \\[1,4,0,**2**,**0**,0\\].\n- i = 4: nums\\[4\\] and nums\\[5\\] are equal, we multiply nums\\[4\\] by 2 and change nums\\[5\\] to 0. The array becomes \\[1,4,0,2,**0**,**0**\\].\nAfter that, we shift the 0's to the end, which gives the array \\[1,4,2,0,0,0\\].\n\n**Example 2:**\n\n**Input:** nums = \\[0,1\\]\n**Output:** \\[1,0\\]\n**Explanation:** No operation can be applied, we just shift the 0 to the end.\n\n**Constraints:**\n\n*   `2 <= nums.length <= 2000`\n*   `0 <= nums[i] <= 1000`"}}
{"2465": {"title": "Number of Distinct Averages", "difficulty": "Easy", "description": "You are given a **0-indexed** integer array `nums` of **even** length.\n\nAs long as `nums` is **not** empty, you must repetitively:\n\n*   Find the minimum number in `nums` and remove it.\n*   Find the maximum number in `nums` and remove it.\n*   Calculate the average of the two removed numbers.\n\nThe **average** of two numbers `a` and `b` is `(a + b) / 2`.\n\n*   For example, the average of `2` and `3` is `(2 + 3) / 2 = 2.5`.\n\nReturn _the number of **distinct** averages calculated using the above process_.\n\n**Note** that when there is a tie for a minimum or maximum number, any can be removed.\n\n**Example 1:**\n\n**Input:** nums = \\[4,1,4,0,3,5\\]\n**Output:** 2\n**Explanation:**\n1. Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = \\[4,1,4,3\\].\n2. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = \\[4,3\\].\n3. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.\nSince there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2.\n\n**Example 2:**\n\n**Input:** nums = \\[1,100\\]\n**Output:** 1\n**Explanation:**\nThere is only one average to be calculated after removing 1 and 100, so we return 1.\n\n**Constraints:**\n\n*   `2 <= nums.length <= 100`\n*   `nums.length` is even.\n*   `0 <= nums[i] <= 100`"}}
{"2469": {"title": "Convert the Temperature", "difficulty": "Easy", "description": "You are given a non-negative floating point number rounded to two decimal places `celsius`, that denotes the **temperature in Celsius**.\n\nYou should convert Celsius into **Kelvin** and **Fahrenheit** and return it as an array `ans = [kelvin, fahrenheit]`.\n\nReturn _the array `ans`._ Answers within `10-5` of the actual answer will be accepted.\n\n**Note that:**\n\n*   `Kelvin = Celsius + 273.15`\n*   `Fahrenheit = Celsius * 1.80 + 32.00`\n\n**Example 1:**\n\n**Input:** celsius = 36.50\n**Output:** \\[309.65000,97.70000\\]\n**Explanation:** Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70.\n\n**Example 2:**\n\n**Input:** celsius = 122.11\n**Output:** \\[395.26000,251.79800\\]\n**Explanation:** Temperature at 122.11 Celsius converted in Kelvin is 395.26 and converted in Fahrenheit is 251.798.\n\n**Constraints:**\n\n*   `0 <= celsius <= 1000`"}}
{"2475": {"title": "Number of Unequal Triplets in Array", "difficulty": "Easy", "description": "You are given a **0-indexed** array of positive integers `nums`. Find the number of triplets `(i, j, k)` that meet the following conditions:\n\n*   `0 <= i < j < k < nums.length`\n*   `nums[i]`, `nums[j]`, and `nums[k]` are **pairwise distinct**.\n    *   In other words, `nums[i] != nums[j]`, `nums[i] != nums[k]`, and `nums[j] != nums[k]`.\n\nReturn _the number of triplets that meet the conditions._\n\n**Example 1:**\n\n**Input:** nums = \\[4,4,2,4,3\\]\n**Output:** 3\n**Explanation:** The following triplets meet the conditions:\n- (0, 2, 4) because 4 != 2 != 3\n- (1, 2, 4) because 4 != 2 != 3\n- (2, 3, 4) because 2 != 4 != 3\nSince there are 3 triplets, we return 3.\nNote that (2, 0, 4) is not a valid triplet because 2 > 0.\n\n**Example 2:**\n\n**Input:** nums = \\[1,1,1,1,1\\]\n**Output:** 0\n**Explanation:** No triplets meet the conditions so we return 0.\n\n**Constraints:**\n\n*   `3 <= nums.length <= 100`\n*   `1 <= nums[i] <= 1000`"}}
{"2481": {"title": "Minimum Cuts to Divide a Circle", "difficulty": "Easy", "description": "A **valid cut** in a circle can be:\n\n*   A cut that is represented by a straight line that touches two points on the edge of the circle and passes through its center, or\n*   A cut that is represented by a straight line that touches one point on the edge of the circle and its center.\n\nSome valid and invalid cuts are shown in the figures below.\n\nGiven the integer `n`, return _the **minimum** number of cuts needed to divide a circle into_ `n` _equal slices_.\n\n**Example 1:**\n\n**Input:** n = 4\n**Output:** 2\n**Explanation:** \nThe above figure shows how cutting the circle twice through the middle divides it into 4 equal slices.\n\n**Example 2:**\n\n**Input:** n = 3\n**Output:** 3\n**Explanation:**\nAt least 3 cuts are needed to divide the circle into 3 equal slices. \nIt can be shown that less than 3 cuts cannot result in 3 slices of equal size and shape.\nAlso note that the first cut will not divide the circle into distinct parts.\n\n**Constraints:**\n\n*   `1 <= n <= 100`"}}
{"2485": {"title": "Find the Pivot Integer", "difficulty": "Easy", "description": "Given a positive integer `n`, find the **pivot integer** `x` such that:\n\n*   The sum of all elements between `1` and `x` inclusively equals the sum of all elements between `x` and `n` inclusively.\n\nReturn _the pivot integer_ `x`. If no such integer exists, return `-1`. It is guaranteed that there will be at most one pivot index for the given input.\n\n**Example 1:**\n\n**Input:** n = 8\n**Output:** 6\n**Explanation:** 6 is the pivot integer since: 1 + 2 + 3 + 4 + 5 + 6 = 6 + 7 + 8 = 21.\n\n**Example 2:**\n\n**Input:** n = 1\n**Output:** 1\n**Explanation:** 1 is the pivot integer since: 1 = 1.\n\n**Example 3:**\n\n**Input:** n = 4\n**Output:** -1\n**Explanation:** It can be proved that no such integer exist.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`"}}
{"2490": {"title": "Circular Sentence", "difficulty": "Easy", "description": "A **sentence** is a list of words that are separated by a **single** space with no leading or trailing spaces.\n\n*   For example, `\"Hello World \"`, `\"HELLO \"`, `\"hello world hello world \"` are all sentences.\n\nWords consist of **only** uppercase and lowercase English letters. Uppercase and lowercase English letters are considered different.\n\nA sentence is **circular** if:\n\n*   The last character of a word is equal to the first character of the next word.\n*   The last character of the last word is equal to the first character of the first word.\n\nFor example, `\"leetcode exercises sound delightful \"`, `\"eetcode \"`, `\"leetcode eats soul \"` are all circular sentences. However, `\"Leetcode is cool \"`, `\"happy Leetcode \"`, `\"Leetcode \"` and `\"I like Leetcode \"` are **not** circular sentences.\n\nGiven a string `sentence`, return `true` _if it is circular_. Otherwise, return `false`.\n\n**Example 1:**\n\n**Input:** sentence =  \"leetcode exercises sound delightful \"\n**Output:** true\n**Explanation:** The words in sentence are \\[ \"leetcode \",  \"exercises \",  \"sound \",  \"delightful \"\\].\n- leetcode's last character is equal to exercises's first character.\n- exercises's last character is equal to sound's first character.\n- sound's last character is equal to delightful's first character.\n- delightful's last character is equal to leetcode's first character.\nThe sentence is circular.\n\n**Example 2:**\n\n**Input:** sentence =  \"eetcode \"\n**Output:** true\n**Explanation:** The words in sentence are \\[ \"eetcode \"\\].\n- eetcode's last character is equal to eetcode's first character.\nThe sentence is circular.\n\n**Example 3:**\n\n**Input:** sentence =  \"Leetcode is cool \"\n**Output:** false\n**Explanation:** The words in sentence are \\[ \"Leetcode \",  \"is \",  \"cool \"\\].\n- Leetcode's last character is **not** equal to is's first character.\nThe sentence is **not** circular.\n\n**Constraints:**\n\n*   `1 <= sentence.length <= 500`\n*   `sentence` consist of only lowercase and uppercase English letters and spaces.\n*   The words in `sentence` are separated by a single space.\n*   There are no leading or trailing spaces."}}
{"2496": {"title": "Maximum Value of a String in an Array", "difficulty": "Easy", "description": "The **value** of an alphanumeric string can be defined as:\n\n*   The **numeric** representation of the string in base `10`, if it comprises of digits **only**.\n*   The **length** of the string, otherwise.\n\nGiven an array `strs` of alphanumeric strings, return _the **maximum value** of any string in_ `strs`.\n\n**Example 1:**\n\n**Input:** strs = \\[ \"alic3 \", \"bob \", \"3 \", \"4 \", \"00000 \"\\]\n**Output:** 5\n**Explanation:** \n-  \"alic3 \" consists of both letters and digits, so its value is its length, i.e. 5.\n-  \"bob \" consists only of letters, so its value is also its length, i.e. 3.\n-  \"3 \" consists only of digits, so its value is its numeric equivalent, i.e. 3.\n-  \"4 \" also consists only of digits, so its value is 4.\n-  \"00000 \" consists only of digits, so its value is 0.\nHence, the maximum value is 5, of  \"alic3 \".\n\n**Example 2:**\n\n**Input:** strs = \\[ \"1 \", \"01 \", \"001 \", \"0001 \"\\]\n**Output:** 1\n**Explanation:** \nEach string in the array has value 1. Hence, we return 1.\n\n**Constraints:**\n\n*   `1 <= strs.length <= 100`\n*   `1 <= strs[i].length <= 9`\n*   `strs[i]` consists of only lowercase English letters and digits."}}
{"2500": {"title": "Delete Greatest Value in Each Row", "difficulty": "Easy", "description": "You are given an `m x n` matrix `grid` consisting of positive integers.\n\nPerform the following operation until `grid` becomes empty:\n\n*   Delete the element with the greatest value from each row. If multiple such elements exist, delete any of them.\n*   Add the maximum of deleted elements to the answer.\n\n**Note** that the number of columns decreases by one after each operation.\n\nReturn _the answer after performing the operations described above_.\n\n**Example 1:**\n\n**Input:** grid = \\[\\[1,2,4\\],\\[3,3,1\\]\\]\n**Output:** 8\n**Explanation:** The diagram above shows the removed values in each step.\n- In the first operation, we remove 4 from the first row and 3 from the second row (notice that, there are two cells with value 3 and we can remove any of them). We add 4 to the answer.\n- In the second operation, we remove 2 from the first row and 3 from the second row. We add 3 to the answer.\n- In the third operation, we remove 1 from the first row and 1 from the second row. We add 1 to the answer.\nThe final answer = 4 + 3 + 1 = 8.\n\n**Example 2:**\n\n**Input:** grid = \\[\\[10\\]\\]\n**Output:** 10\n**Explanation:** The diagram above shows the removed values in each step.\n- In the first operation, we remove 10 from the first row. We add 10 to the answer.\nThe final answer = 10.\n\n**Constraints:**\n\n*   `m == grid.length`\n*   `n == grid[i].length`\n*   `1 <= m, n <= 50`\n*   `1 <= grid[i][j] <= 100`"}}
{"2506": {"title": "Count Pairs Of Similar Strings", "difficulty": "Easy", "description": "You are given a **0-indexed** string array `words`.\n\nTwo strings are **similar** if they consist of the same characters.\n\n*   For example, `\"abca \"` and `\"cba \"` are similar since both consist of characters `'a'`, `'b'`, and `'c'`.\n*   However, `\"abacba \"` and `\"bcfd \"` are not similar since they do not consist of the same characters.\n\nReturn _the number of pairs_ `(i, j)` _such that_ `0 <= i < j <= word.length - 1` _and the two strings_ `words[i]` _and_ `words[j]` _are similar_.\n\n**Example 1:**\n\n**Input:** words = \\[ \"aba \", \"aabb \", \"abcd \", \"bac \", \"aabc \"\\]\n**Output:** 2\n**Explanation:** There are 2 pairs that satisfy the conditions:\n- i = 0 and j = 1 : both words\\[0\\] and words\\[1\\] only consist of characters 'a' and 'b'. \n- i = 3 and j = 4 : both words\\[3\\] and words\\[4\\] only consist of characters 'a', 'b', and 'c'. \n\n**Example 2:**\n\n**Input:** words = \\[ \"aabb \", \"ab \", \"ba \"\\]\n**Output:** 3\n**Explanation:** There are 3 pairs that satisfy the conditions:\n- i = 0 and j = 1 : both words\\[0\\] and words\\[1\\] only consist of characters 'a' and 'b'. \n- i = 0 and j = 2 : both words\\[0\\] and words\\[2\\] only consist of characters 'a' and 'b'.\n- i = 1 and j = 2 : both words\\[1\\] and words\\[2\\] only consist of characters 'a' and 'b'.\n\n**Example 3:**\n\n**Input:** words = \\[ \"nba \", \"cba \", \"dba \"\\]\n**Output:** 0\n**Explanation:** Since there does not exist any pair that satisfies the conditions, we return 0.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 100`\n*   `words[i]` consist of only lowercase English letters."}}
{"2511": {"title": "Maximum Enemy Forts That Can Be Captured", "difficulty": "Easy", "description": "You are given a **0-indexed** integer array `forts` of length `n` representing the positions of several forts. `forts[i]` can be `-1`, `0`, or `1` where:\n\n*   `-1` represents there is **no fort** at the `ith` position.\n*   `0` indicates there is an **enemy** fort at the `ith` position.\n*   `1` indicates the fort at the `ith` the position is under your command.\n\nNow you have decided to move your army from one of your forts at position `i` to an empty position `j` such that:\n\n*   `0 <= i, j <= n - 1`\n*   The army travels over enemy forts **only**. Formally, for all `k` where `min(i,j) < k < max(i,j)`, `forts[k] == 0.`\n\nWhile moving the army, all the enemy forts that come in the way are **captured**.\n\nReturn _the **maximum** number of enemy forts that can be captured_. In case it is **impossible** to move your army, or you do not have any fort under your command, return `0`_._\n\n**Example 1:**\n\n**Input:** forts = \\[1,0,0,-1,0,0,0,0,1\\]\n**Output:** 4\n**Explanation:**\n- Moving the army from position 0 to position 3 captures 2 enemy forts, at 1 and 2.\n- Moving the army from position 8 to position 3 captures 4 enemy forts.\nSince 4 is the maximum number of enemy forts that can be captured, we return 4.\n\n**Example 2:**\n\n**Input:** forts = \\[0,0,1,-1\\]\n**Output:** 0\n**Explanation:** Since no enemy fort can be captured, 0 is returned.\n\n**Constraints:**\n\n*   `1 <= forts.length <= 1000`\n*   `-1 <= forts[i] <= 1`"}}
{"2515": {"title": "Shortest Distance to Target String in a Circular Array", "difficulty": "Easy", "description": "You are given a **0-indexed** **circular** string array `words` and a string `target`. A **circular array** means that the array's end connects to the array's beginning.\n\n*   Formally, the next element of `words[i]` is `words[(i + 1) % n]` and the previous element of `words[i]` is `words[(i - 1 + n) % n]`, where `n` is the length of `words`.\n\nStarting from `startIndex`, you can move to either the next word or the previous word with `1` step at a time.\n\nReturn _the **shortest** distance needed to reach the string_ `target`. If the string `target` does not exist in `words`, return `-1`.\n\n**Example 1:**\n\n**Input:** words = \\[ \"hello \", \"i \", \"am \", \"leetcode \", \"hello \"\\], target =  \"hello \", startIndex = 1\n**Output:** 1\n**Explanation:** We start from index 1 and can reach  \"hello \" by\n- moving 3 units to the right to reach index 4.\n- moving 2 units to the left to reach index 4.\n- moving 4 units to the right to reach index 0.\n- moving 1 unit to the left to reach index 0.\nThe shortest distance to reach  \"hello \" is 1.\n\n**Example 2:**\n\n**Input:** words = \\[ \"a \", \"b \", \"leetcode \"\\], target =  \"leetcode \", startIndex = 0\n**Output:** 1\n**Explanation:** We start from index 0 and can reach  \"leetcode \" by\n- moving 2 units to the right to reach index 3.\n- moving 1 unit to the left to reach index 3.\nThe shortest distance to reach  \"leetcode \" is 1.\n\n**Example 3:**\n\n**Input:** words = \\[ \"i \", \"eat \", \"leetcode \"\\], target =  \"ate \", startIndex = 0\n**Output:** -1\n**Explanation:** Since  \"ate \" does not exist in `words`, we return -1.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 100`\n*   `words[i]` and `target` consist of only lowercase English letters.\n*   `0 <= startIndex < words.length`"}}
{"2520": {"title": "Count the Digits That Divide a Number", "difficulty": "Easy", "description": "Given an integer `num`, return _the number of digits in `num` that divide_ `num`.\n\nAn integer `val` divides `nums` if `nums % val == 0`.\n\n**Example 1:**\n\n**Input:** num = 7\n**Output:** 1\n**Explanation:** 7 divides itself, hence the answer is 1.\n\n**Example 2:**\n\n**Input:** num = 121\n**Output:** 2\n**Explanation:** 121 is divisible by 1, but not 2. Since 1 occurs twice as a digit, we return 2.\n\n**Example 3:**\n\n**Input:** num = 1248\n**Output:** 4\n**Explanation:** 1248 is divisible by all of its digits, hence the answer is 4.\n\n**Constraints:**\n\n*   `1 <= num <= 109`\n*   `num` does not contain `0` as one of its digits."}}
{"2525": {"title": "Categorize Box According to Criteria", "difficulty": "Easy", "description": "Given four integers `length`, `width`, `height`, and `mass`, representing the dimensions and mass of a box, respectively, return _a string representing the **category** of the box_.\n\n*   The box is `\"Bulky \"` if:\n    *   **Any** of the dimensions of the box is greater or equal to `104`.\n    *   Or, the **volume** of the box is greater or equal to `109`.\n*   If the mass of the box is greater or equal to `100`, it is `\"Heavy \".`\n*   If the box is both `\"Bulky \"` and `\"Heavy \"`, then its category is `\"Both \"`.\n*   If the box is neither `\"Bulky \"` nor `\"Heavy \"`, then its category is `\"Neither \"`.\n*   If the box is `\"Bulky \"` but not `\"Heavy \"`, then its category is `\"Bulky \"`.\n*   If the box is `\"Heavy \"` but not `\"Bulky \"`, then its category is `\"Heavy \"`.\n\n**Note** that the volume of the box is the product of its length, width and height.\n\n**Example 1:**\n\n**Input:** length = 1000, width = 35, height = 700, mass = 300\n**Output:**  \"Heavy \"\n**Explanation:** \nNone of the dimensions of the box is greater or equal to 104. \nIts volume = 24500000 <= 109. So it cannot be categorized as  \"Bulky \".\nHowever mass >= 100, so the box is  \"Heavy \".\nSince the box is not  \"Bulky \" but  \"Heavy \", we return  \"Heavy \".\n\n**Example 2:**\n\n**Input:** length = 200, width = 50, height = 800, mass = 50\n**Output:**  \"Neither \"\n**Explanation:** \nNone of the dimensions of the box is greater or equal to 104.\nIts volume = 8 \\* 106 <= 109. So it cannot be categorized as  \"Bulky \".\nIts mass is also less than 100, so it cannot be categorized as  \"Heavy \" either. \nSince its neither of the two above categories, we return  \"Neither \".\n\n**Constraints:**\n\n*   `1 <= length, width, height <= 105`\n*   `1 <= mass <= 103`"}}
{"2529": {"title": "Maximum Count of Positive Integer and Negative Integer", "difficulty": "Easy", "description": "Given an array `nums` sorted in **non-decreasing** order, return _the maximum between the number of positive integers and the number of negative integers._\n\n*   In other words, if the number of positive integers in `nums` is `pos` and the number of negative integers is `neg`, then return the maximum of `pos` and `neg`.\n\n**Note** that `0` is neither positive nor negative.\n\n**Example 1:**\n\n**Input:** nums = \\[-2,-1,-1,1,2,3\\]\n**Output:** 3\n**Explanation:** There are 3 positive integers and 3 negative integers. The maximum count among them is 3.\n\n**Example 2:**\n\n**Input:** nums = \\[-3,-2,-1,0,0,1,2\\]\n**Output:** 3\n**Explanation:** There are 2 positive integers and 3 negative integers. The maximum count among them is 3.\n\n**Example 3:**\n\n**Input:** nums = \\[5,20,66,1314\\]\n**Output:** 4\n**Explanation:** There are 4 positive integers and 0 negative integers. The maximum count among them is 4.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2000`\n*   `-2000 <= nums[i] <= 2000`\n*   `nums` is sorted in a **non-decreasing order**.\n\n**Follow up:** Can you solve the problem in `O(log(n))` time complexity?"}}
{"2535": {"title": "Difference Between Element Sum and Digit Sum of an Array", "difficulty": "Easy", "description": "You are given a positive integer array `nums`.\n\n*   The **element sum** is the sum of all the elements in `nums`.\n*   The **digit sum** is the sum of all the digits (not necessarily distinct) that appear in `nums`.\n\nReturn _the **absolute** difference between the **element sum** and **digit sum** of_ `nums`.\n\n**Note** that the absolute difference between two integers `x` and `y` is defined as `|x - y|`.\n\n**Example 1:**\n\n**Input:** nums = \\[1,15,6,3\\]\n**Output:** 9\n**Explanation:** \nThe element sum of nums is 1 + 15 + 6 + 3 = 25.\nThe digit sum of nums is 1 + 1 + 5 + 6 + 3 = 16.\nThe absolute difference between the element sum and digit sum is |25 - 16| = 9.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,3,4\\]\n**Output:** 0\n**Explanation:**\nThe element sum of nums is 1 + 2 + 3 + 4 = 10.\nThe digit sum of nums is 1 + 2 + 3 + 4 = 10.\nThe absolute difference between the element sum and digit sum is |10 - 10| = 0.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 2000`\n*   `1 <= nums[i] <= 2000`"}}
{"2540": {"title": "Minimum Common Value", "difficulty": "Easy", "description": "Given two integer arrays `nums1` and `nums2`, sorted in non-decreasing order, return _the **minimum integer common** to both arrays_. If there is no common integer amongst `nums1` and `nums2`, return `-1`.\n\nNote that an integer is said to be **common** to `nums1` and `nums2` if both arrays have **at least one** occurrence of that integer.\n\n**Example 1:**\n\n**Input:** nums1 = \\[1,2,3\\], nums2 = \\[2,4\\]\n**Output:** 2\n**Explanation:** The smallest element common to both arrays is 2, so we return 2.\n\n**Example 2:**\n\n**Input:** nums1 = \\[1,2,3,6\\], nums2 = \\[2,3,4,5\\]\n**Output:** 2\n**Explanation:** There are two common elements in the array 2 and 3 out of which 2 is the smallest, so 2 is returned.\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 105`\n*   `1 <= nums1[i], nums2[j] <= 109`\n*   Both `nums1` and `nums2` are sorted in **non-decreasing** order."}}
{"2544": {"title": "Alternating Digit Sum", "difficulty": "Easy", "description": "You are given a positive integer `n`. Each digit of `n` has a sign according to the following rules:\n\n*   The **most significant digit** is assigned a **positive** sign.\n*   Each other digit has an opposite sign to its adjacent digits.\n\nReturn _the sum of all digits with their corresponding sign_.\n\n**Example 1:**\n\n**Input:** n = 521\n**Output:** 4\n**Explanation:** (+5) + (-2) + (+1) = 4.\n\n**Example 2:**\n\n**Input:** n = 111\n**Output:** 1\n**Explanation:** (+1) + (-1) + (+1) = 1.\n\n**Example 3:**\n\n**Input:** n = 886996\n**Output:** 0\n**Explanation:** (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0.\n\n**Constraints:**\n\n*   `1 <= n <= 109`\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0; } .spoiler {overflow:hidden;} .spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;} .spoilerbutton\\[value=\"Show Message\"\\] + .spoiler > div {margin-top:-500%;} .spoilerbutton\\[value=\"Hide Message\"\\] + .spoiler {padding:5px;}"}}
{"2549": {"title": "Count Distinct Numbers on Board", "difficulty": "Easy", "description": "You are given a positive integer `n`, that is initially placed on a board. Every day, for `109` days, you perform the following procedure:\n\n*   For each number `x` present on the board, find all numbers `1 <= i <= n` such that `x % i == 1`.\n*   Then, place those numbers on the board.\n\nReturn _the number of **distinct** integers present on the board after_ `109` _days have elapsed_.\n\n**Note:**\n\n*   Once a number is placed on the board, it will remain on it until the end.\n*   `%` stands for the modulo operation. For example, `14 % 3` is `2`.\n\n**Example 1:**\n\n**Input:** n = 5\n**Output:** 4\n**Explanation:** Initially, 5 is present on the board. \nThe next day, 2 and 4 will be added since 5 % 2 == 1 and 5 % 4 == 1. \nAfter that day, 3 will be added to the board because 4 % 3 == 1. \nAt the end of a billion days, the distinct numbers on the board will be 2, 3, 4, and 5. \n\n**Example 2:**\n\n**Input:** n = 3\n**Output:** 2\n**Explanation:** \nSince 3 % 2 == 1, 2 will be added to the board. \nAfter a billion days, the only two distinct numbers on the board are 2 and 3. \n\n**Constraints:**\n\n*   `1 <= n <= 100`"}}
{"2553": {"title": "Separate the Digits in an Array", "difficulty": "Easy", "description": "Given an array of positive integers `nums`, return _an array_ `answer` _that consists of the digits of each integer in_ `nums` _after separating them in **the same order** they appear in_ `nums`.\n\nTo separate the digits of an integer is to get all the digits it has in the same order.\n\n*   For example, for the integer `10921`, the separation of its digits is `[1,0,9,2,1]`.\n\n**Example 1:**\n\n**Input:** nums = \\[13,25,83,77\\]\n**Output:** \\[1,3,2,5,8,3,7,7\\]\n**Explanation:** \n- The separation of 13 is \\[1,3\\].\n- The separation of 25 is \\[2,5\\].\n- The separation of 83 is \\[8,3\\].\n- The separation of 77 is \\[7,7\\].\nanswer = \\[1,3,2,5,8,3,7,7\\]. Note that answer contains the separations in the same order.\n\n**Example 2:**\n\n**Input:** nums = \\[7,1,3,9\\]\n**Output:** \\[7,1,3,9\\]\n**Explanation:** The separation of each integer in nums is itself.\nanswer = \\[7,1,3,9\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 105`"}}
{"2558": {"title": "Take Gifts From the Richest Pile", "difficulty": "Easy", "description": "You are given an integer array `gifts` denoting the number of gifts in various piles. Every second, you do the following:\n\n*   Choose the pile with the maximum number of gifts.\n*   If there is more than one pile with the maximum number of gifts, choose any.\n*   Leave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts.\n\nReturn _the number of gifts remaining after_ `k` _seconds._\n\n**Example 1:**\n\n**Input:** gifts = \\[25,64,9,4,100\\], k = 4\n**Output:** 29\n**Explanation:** \nThe gifts are taken in the following way:\n- In the first second, the last pile is chosen and 10 gifts are left behind.\n- Then the second pile is chosen and 8 gifts are left behind.\n- After that the first pile is chosen and 5 gifts are left behind.\n- Finally, the last pile is chosen again and 3 gifts are left behind.\nThe final remaining gifts are \\[5,8,9,4,3\\], so the total number of gifts remaining is 29.\n\n**Example 2:**\n\n**Input:** gifts = \\[1,1,1,1\\], k = 4\n**Output:** 4\n**Explanation:** \nIn this case, regardless which pile you choose, you have to leave behind 1 gift in each pile. \nThat is, you can't take any pile with you. \nSo, the total gifts remaining are 4.\n\n**Constraints:**\n\n*   `1 <= gifts.length <= 103`\n*   `1 <= gifts[i] <= 109`\n*   `1 <= k <= 103`"}}
{"2562": {"title": "Find the Array Concatenation Value", "difficulty": "Easy", "description": "You are given a **0-indexed** integer array `nums`.\n\nThe **concatenation** of two numbers is the number formed by concatenating their numerals.\n\n*   For example, the concatenation of `15`, `49` is `1549`.\n\nThe **concatenation value** of `nums` is initially equal to `0`. Perform this operation until `nums` becomes empty:\n\n*   If there exists more than one number in `nums`, pick the first element and last element in `nums` respectively and add the value of their concatenation to the **concatenation value** of `nums`, then delete the first and last element from `nums`.\n*   If one element exists, add its value to the **concatenation value** of `nums`, then delete it.\n\nReturn _the concatenation value of the `nums`_.\n\n**Example 1:**\n\n**Input:** nums = \\[7,52,2,4\\]\n**Output:** 596\n**Explanation:** Before performing any operation, nums is \\[7,52,2,4\\] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 7, and the last element, 4.\nTheir concatenation is 74, and we add it to the concatenation value, so it becomes equal to 74.\nThen we delete them from nums, so nums becomes equal to \\[52,2\\].\n - In the second operation:\nWe pick the first element, 52, and the last element, 2.\nTheir concatenation is 522, and we add it to the concatenation value, so it becomes equal to 596.\nThen we delete them from the nums, so nums becomes empty.\nSince the concatenation value is 596 so the answer is 596.\n\n**Example 2:**\n\n**Input:** nums = \\[5,14,13,8,12\\]\n**Output:** 673\n**Explanation:** Before performing any operation, nums is \\[5,14,13,8,12\\] and concatenation value is 0.\n - In the first operation:\nWe pick the first element, 5, and the last element, 12.\nTheir concatenation is 512, and we add it to the concatenation value, so it becomes equal to 512.\nThen we delete them from the nums, so nums becomes equal to \\[14,13,8\\].\n - In the second operation:\nWe pick the first element, 14, and the last element, 8.\nTheir concatenation is 148, and we add it to the concatenation value, so it becomes equal to 660.\nThen we delete them from the nums, so nums becomes equal to \\[13\\].\n - In the third operation:\nnums has only one element, so we pick 13 and add it to the concatenation value, so it becomes equal to 673.\nThen we delete it from nums, so nums become empty.\nSince the concatenation value is 673 so the answer is 673.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 104`\n\n.spoilerbutton {display:block; border:dashed; padding: 0px 0px; margin:10px 0px; font-size:150%; font-weight: bold; color:#000000; background-color:cyan; outline:0;  } .spoiler {overflow:hidden;} .spoiler > div {-webkit-transition: all 0s ease;-moz-transition: margin 0s ease;-o-transition: all 0s ease;transition: margin 0s ease;} .spoilerbutton\\[value=\"Show Message\"\\] + .spoiler > div {margin-top:-500%;} .spoilerbutton\\[value=\"Hide Message\"\\] + .spoiler {padding:5px;}"}}
{"2566": {"title": "Maximum Difference by Remapping a Digit", "difficulty": "Easy", "description": "You are given an integer `num`. You know that Danny Mittal will sneakily **remap** one of the `10` possible digits (`0` to `9`) to another digit.\n\nReturn _the difference between the maximum and minimum_ _values Danny can make by remapping **exactly** **one** digit_ _in_ `num`.\n\n**Notes:**\n\n*   When Danny remaps a digit d1 to another digit d2, Danny replaces all occurrences of `d1` in `num` with `d2`.\n*   Danny can remap a digit to itself, in which case `num` does not change.\n*   Danny can remap different digits for obtaining minimum and maximum values respectively.\n*   The resulting number after remapping can contain leading zeroes.\n*   We mentioned \"Danny Mittal \" to congratulate him on being in the top 10 in Weekly Contest 326.\n\n**Example 1:**\n\n**Input:** num = 11891\n**Output:** 99009\n**Explanation:** \nTo achieve the maximum value, Danny can remap the digit 1 to the digit 9 to yield 99899.\nTo achieve the minimum value, Danny can remap the digit 1 to the digit 0, yielding 890.\nThe difference between these two numbers is 99009.\n\n**Example 2:**\n\n**Input:** num = 90\n**Output:** 99\n**Explanation:**\nThe maximum value that can be returned by the function is 99 (if 0 is replaced by 9) and the minimum value that can be returned by the function is 0 (if 9 is replaced by 0).\nThus, we return 99.\n\n**Constraints:**\n\n*   `1 <= num <= 108`"}}
{"2570": {"title": "Merge Two 2D Arrays by Summing Values", "difficulty": "Easy", "description": "You are given two **2D** integer arrays `nums1` and `nums2.`\n\n*   `nums1[i] = [idi, vali]` indicate that the number with the id `idi` has a value equal to `vali`.\n*   `nums2[i] = [idi, vali]` indicate that the number with the id `idi` has a value equal to `vali`.\n\nEach array contains **unique** ids and is sorted in **ascending** order by id.\n\nMerge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions:\n\n*   Only ids that appear in at least one of the two arrays should be included in the resulting array.\n*   Each id should be included **only once** and its value should be the sum of the values of this id in the two arrays. If the id does not exist in one of the two arrays then its value in that array is considered to be `0`.\n\nReturn _the resulting array_. The returned array must be sorted in ascending order by id.\n\n**Example 1:**\n\n**Input:** nums1 = \\[\\[1,2\\],\\[2,3\\],\\[4,5\\]\\], nums2 = \\[\\[1,4\\],\\[3,2\\],\\[4,1\\]\\]\n**Output:** \\[\\[1,6\\],\\[2,3\\],\\[3,2\\],\\[4,6\\]\\]\n**Explanation:** The resulting array contains the following:\n- id = 1, the value of this id is 2 + 4 = 6.\n- id = 2, the value of this id is 3.\n- id = 3, the value of this id is 2.\n- id = 4, the value of this id is 5 + 1 = 6.\n\n**Example 2:**\n\n**Input:** nums1 = \\[\\[2,4\\],\\[3,6\\],\\[5,5\\]\\], nums2 = \\[\\[1,3\\],\\[4,3\\]\\]\n**Output:** \\[\\[1,3\\],\\[2,4\\],\\[3,6\\],\\[4,3\\],\\[5,5\\]\\]\n**Explanation:** There are no common ids, so we just include each id with its value in the resulting list.\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 200`\n*   `nums1[i].length == nums2[j].length == 2`\n*   `1 <= idi, vali <= 1000`\n*   Both arrays contain unique ids.\n*   Both arrays are in strictly ascending order by id."}}
{"2574": {"title": "Left and Right Sum Differences", "difficulty": "Easy", "description": "Given a **0-indexed** integer array `nums`, find a **0-indexed** integer array `answer` where:\n\n*   `answer.length == nums.length`.\n*   `answer[i] = |leftSum[i] - rightSum[i]|`.\n\nWhere:\n\n*   `leftSum[i]` is the sum of elements to the left of the index `i` in the array `nums`. If there is no such element, `leftSum[i] = 0`.\n*   `rightSum[i]` is the sum of elements to the right of the index `i` in the array `nums`. If there is no such element, `rightSum[i] = 0`.\n\nReturn _the array_ `answer`.\n\n**Example 1:**\n\n**Input:** nums = \\[10,4,8,3\\]\n**Output:** \\[15,1,11,22\\]\n**Explanation:** The array leftSum is \\[0,10,14,22\\] and the array rightSum is \\[15,11,3,0\\].\nThe array answer is \\[|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|\\] = \\[15,1,11,22\\].\n\n**Example 2:**\n\n**Input:** nums = \\[1\\]\n**Output:** \\[0\\]\n**Explanation:** The array leftSum is \\[0\\] and the array rightSum is \\[0\\].\nThe array answer is \\[|0 - 0|\\] = \\[0\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 105`"}}
{"2578": {"title": "Split With Minimum Sum", "difficulty": "Easy", "description": "Given a positive integer `num`, split it into two non-negative integers `num1` and `num2` such that:\n\n*   The concatenation of `num1` and `num2` is a permutation of `num`.\n    *   In other words, the sum of the number of occurrences of each digit in `num1` and `num2` is equal to the number of occurrences of that digit in `num`.\n*   `num1` and `num2` can contain leading zeros.\n\nReturn _the **minimum** possible sum of_ `num1` _and_ `num2`.\n\n**Notes:**\n\n*   It is guaranteed that `num` does not contain any leading zeros.\n*   The order of occurrence of the digits in `num1` and `num2` may differ from the order of occurrence of `num`.\n\n**Example 1:**\n\n**Input:** num = 4325\n**Output:** 59\n**Explanation:** We can split 4325 so that `num1` is 24 and num2 `is` 35, giving a sum of 59. We can prove that 59 is indeed the minimal possible sum.\n\n**Example 2:**\n\n**Input:** num = 687\n**Output:** 75\n**Explanation:** We can split 687 so that `num1` is 68 and `num2` is 7, which would give an optimal sum of 75.\n\n**Constraints:**\n\n*   `10 <= num <= 109`"}}
{"2582": {"title": "Pass the Pillow", "difficulty": "Easy", "description": "There are `n` people standing in a line labeled from `1` to `n`. The first person in the line is holding a pillow initially. Every second, the person holding the pillow passes it to the next person standing in the line. Once the pillow reaches the end of the line, the direction changes, and people continue passing the pillow in the opposite direction.\n\n*   For example, once the pillow reaches the `nth` person they pass it to the `n - 1th` person, then to the `n - 2th` person and so on.\n\nGiven the two positive integers `n` and `time`, return _the index of the person holding the pillow after_ `time` _seconds_.\n\n**Example 1:**\n\n**Input:** n = 4, time = 5\n**Output:** 2\n**Explanation:** People pass the pillow in the following way: 1 -> 2 -> 3 -> 4 -> 3 -> 2.\nAfer five seconds, the pillow is given to the 2nd person.\n\n**Example 2:**\n\n**Input:** n = 3, time = 2\n**Output:** 3\n**Explanation:** People pass the pillow in the following way: 1 -> 2 -> 3.\nAfer two seconds, the pillow is given to the 3rd person.\n\n**Constraints:**\n\n*   `2 <= n <= 1000`\n*   `1 <= time <= 1000`"}}
{"2586": {"title": "Count the Number of Vowel Strings in Range", "difficulty": "Easy", "description": "You are given a **0-indexed** array of string `words` and two integers `left` and `right`.\n\nA string is called a **vowel string** if it starts with a vowel character and ends with a vowel character where vowel characters are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\nReturn _the number of vowel strings_ `words[i]` _where_ `i` _belongs to the inclusive range_ `[left, right]`.\n\n**Example 1:**\n\n**Input:** words = \\[ \"are \", \"amy \", \"u \"\\], left = 0, right = 2\n**Output:** 2\n**Explanation:** \n-  \"are \" is a vowel string because it starts with 'a' and ends with 'e'.\n-  \"amy \" is not a vowel string because it does not end with a vowel.\n-  \"u \" is a vowel string because it starts with 'u' and ends with 'u'.\nThe number of vowel strings in the mentioned range is 2.\n\n**Example 2:**\n\n**Input:** words = \\[ \"hey \", \"aeo \", \"mu \", \"ooo \", \"artro \"\\], left = 1, right = 4\n**Output:** 3\n**Explanation:** \n-  \"aeo \" is a vowel string because it starts with 'a' and ends with 'o'.\n-  \"mu \" is not a vowel string because it does not start with a vowel.\n-  \"ooo \" is a vowel string because it starts with 'o' and ends with 'o'.\n-  \"artro \" is a vowel string because it starts with 'a' and ends with 'o'.\nThe number of vowel strings in the mentioned range is 3.\n\n**Constraints:**\n\n*   `1 <= words.length <= 1000`\n*   `1 <= words[i].length <= 10`\n*   `words[i]` consists of only lowercase English letters.\n*   `0 <= left <= right < words.length`"}}
{"2591": {"title": "Distribute Money to Maximum Children", "difficulty": "Easy", "description": "You are given an integer `money` denoting the amount of money (in dollars) that you have and another integer `children` denoting the number of children that you must distribute the money to.\n\nYou have to distribute the money according to the following rules:\n\n*   All money must be distributed.\n*   Everyone must receive at least `1` dollar.\n*   Nobody receives `4` dollars.\n\nReturn _the **maximum** number of children who may receive **exactly**_ `8` _dollars if you distribute the money according to the aforementioned rules_. If there is no way to distribute the money, return `-1`.\n\n**Example 1:**\n\n**Input:** money = 20, children = 3\n**Output:** 1\n**Explanation:** \nThe maximum number of children with 8 dollars will be 1. One of the ways to distribute the money is:\n- 8 dollars to the first child.\n- 9 dollars to the second child. \n- 3 dollars to the third child.\nIt can be proven that no distribution exists such that number of children getting 8 dollars is greater than 1.\n\n**Example 2:**\n\n**Input:** money = 16, children = 2\n**Output:** 2\n**Explanation:** Each child can be given 8 dollars.\n\n**Constraints:**\n\n*   `1 <= money <= 200`\n*   `2 <= children <= 30`"}}
{"2595": {"title": "Number of Even and Odd Bits", "difficulty": "Easy", "description": "You are given a **positive** integer `n`.\n\nLet `even` denote the number of even indices in the binary representation of `n` (**0-indexed**) with value `1`.\n\nLet `odd` denote the number of odd indices in the binary representation of `n` (**0-indexed**) with value `1`.\n\nReturn _an integer array_ `answer` _where_ `answer = [even, odd]`.\n\n**Example 1:**\n\n**Input:** n = 17\n**Output:** \\[2,0\\]\n**Explanation:** The binary representation of 17 is 10001. \nIt contains 1 on the 0th and 4th indices. \nThere are 2 even and 0 odd indices.\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:** \\[0,1\\]\n**Explanation:** The binary representation of 2 is 10.\nIt contains 1 on the 1st index. \nThere are 0 even and 1 odd indices.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`"}}
{"2600": {"title": "K Items With the Maximum Sum", "difficulty": "Easy", "description": "There is a bag that consists of items, each item has a number `1`, `0`, or `-1` written on it.\n\nYou are given four **non-negative** integers `numOnes`, `numZeros`, `numNegOnes`, and `k`.\n\nThe bag initially contains:\n\n*   `numOnes` items with `1`s written on them.\n*   `numZeroes` items with `0`s written on them.\n*   `numNegOnes` items with `-1`s written on them.\n\nWe want to pick exactly `k` items among the available items. Return _the **maximum** possible sum of numbers written on the items_.\n\n**Example 1:**\n\n**Input:** numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2\n**Output:** 2\n**Explanation:** We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 2 items with 1 written on them and get a sum in a total of 2.\nIt can be proven that 2 is the maximum possible sum.\n\n**Example 2:**\n\n**Input:** numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4\n**Output:** 3\n**Explanation:** We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 3 items with 1 written on them, and 1 item with 0 written on it, and get a sum in a total of 3.\nIt can be proven that 3 is the maximum possible sum.\n\n**Constraints:**\n\n*   `0 <= numOnes, numZeros, numNegOnes <= 50`\n*   `0 <= k <= numOnes + numZeros + numNegOnes`"}}
{"2605": {"title": "Form Smallest Number From Two Digit Arrays", "difficulty": "Easy", "description": "Given two arrays of **unique** digits `nums1` and `nums2`, return _the **smallest** number that contains **at least** one digit from each array_.\n\n**Example 1:**\n\n**Input:** nums1 = \\[4,1,3\\], nums2 = \\[5,7\\]\n**Output:** 15\n**Explanation:** The number 15 contains the digit 1 from nums1 and the digit 5 from nums2. It can be proven that 15 is the smallest number we can have.\n\n**Example 2:**\n\n**Input:** nums1 = \\[3,5,2,6\\], nums2 = \\[3,1,7\\]\n**Output:** 3\n**Explanation:** The number 3 contains the digit 3 which exists in both arrays.\n\n**Constraints:**\n\n*   `1 <= nums1.length, nums2.length <= 9`\n*   `1 <= nums1[i], nums2[i] <= 9`\n*   All digits in each array are **unique**."}}
{"2609": {"title": "Find the Longest Balanced Substring of a Binary String", "difficulty": "Easy", "description": "You are given a binary string `s` consisting only of zeroes and ones.\n\nA substring of `s` is considered balanced if **all zeroes are before ones** and the number of zeroes is equal to the number of ones inside the substring. Notice that the empty substring is considered a balanced substring.\n\nReturn _the length of the longest balanced substring of_ `s`.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n**Example 1:**\n\n**Input:** s =  \"01000111 \"\n**Output:** 6\n**Explanation:** The longest balanced substring is  \"000111 \", which has length 6.\n\n**Example 2:**\n\n**Input:** s =  \"00111 \"\n**Output:** 4\n**Explanation:** The longest balanced substring is  \"0011 \", which has length 4. \n\n**Example 3:**\n\n**Input:** s =  \"111 \"\n**Output:** 0\n**Explanation:** There is no balanced substring except the empty substring, so the answer is 0.\n\n**Constraints:**\n\n*   `1 <= s.length <= 50`\n*   `'0' <= s[i] <= '1'`"}}
